/* Generated by Cython 0.14 on Fri Aug  1 07:55:18 2014 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif

#ifndef PySet_CheckExact
#  define PySet_CheckExact(obj)          (Py_TYPE(obj) == &PySet_Type)
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__libopenzwave
#include <utility>
#include <map>
#include <vector>
#include "stdint.h"
#include <string>
#include <new>
#include "vers.cpp"
#include "stdlib.h"
#include "Node.h"
#include "Driver.h"
#include "ValueID.h"
#include "Notification.h"
#include "Options.h"
#include "Log.h"
#include "Manager.h"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "libopenzwave.pyx",
};

/* Type declarations */

typedef struct OpenZWave::Node::NodeData __pyx_t_4node_NodeData_t;

typedef struct OpenZWave::Driver::DriverData __pyx_t_6driver_DriverData_t;

typedef void (*__pyx_t_6driver_pfnControllerCallback_t)(enum OpenZWave::Driver::ControllerState, enum OpenZWave::Driver::ControllerError, void *);

typedef void (*__pyx_t_12notification_pfnOnNotification_t)(OpenZWave::Notification const*, void *);

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":474
 *         free(self.data)
 * 
 * cdef class PyManager:             # <<<<<<<<<<<<<<
 *     '''
 * The main public interface to OpenZWave.
 */

struct __pyx_obj_12libopenzwave_PyManager {
  PyObject_HEAD
  OpenZWave::Manager *manager;
  PyObject *_watcherCallback;
  PyObject *_controllerCallback;
};

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":457
 *         return configPath()
 * 
 * cdef class RetAlloc:             # <<<<<<<<<<<<<<
 *     """
 *     Map an array of uint8_t used when retrieving sets.
 */

struct __pyx_obj_12libopenzwave_RetAlloc {
  PyObject_HEAD
  uint32_t siz;
  uint8_t *data;
};

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":368
 *     return None
 * 
 * cdef class PyOptions:             # <<<<<<<<<<<<<<
 *     """
 *     Manage options manager
 */

struct __pyx_obj_12libopenzwave_PyOptions {
  PyObject_HEAD
  OpenZWave::Options *options;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void);

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    if (unlikely(d == Py_None)) {
        __Pyx_RaiseNoneIndexingError();
        return NULL;
    }
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred())
            PyErr_SetObject(PyExc_KeyError, key);
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#define __Pyx_SetItemInt(o, i, v, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_SetItemInt_Fast(o, i, v) : \
                                                    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}

static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v) {
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        Py_INCREF(v);
        Py_DECREF(PyList_GET_ITEM(o, i));
        PyList_SET_ITEM(o, i, v);
        return 1;
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_ass_item && (likely(i >= 0)))
        return PySequence_SetItem(o, i, v);
    else {
        PyObject *j = PyInt_FromSsize_t(i);
        return __Pyx_SetItemInt_Generic(o, j, v);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

#define __pyx_binding_PyCFunctionType_USED 1

typedef struct {
    PyCFunctionObject func;
} __pyx_binding_PyCFunctionType_object;

PyTypeObject __pyx_binding_PyCFunctionType_type;
PyTypeObject *__pyx_binding_PyCFunctionType = NULL;

PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module); /* proto */
#define __pyx_binding_PyCFunctionType_New(ml, self) __pyx_binding_PyCFunctionType_NewEx(ml, self, NULL)

int __pyx_binding_PyCFunctionType_init(void); /* proto */

static CYTHON_INLINE uint64_t __Pyx_PyInt_from_py_uint64_t(PyObject *);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint8_t(uint8_t);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_int32_t(int32_t);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_int16_t(int16_t);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint32_t(uint32_t);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint64_t(uint64_t);

static CYTHON_INLINE int32_t __Pyx_PyInt_from_py_int32_t(PyObject *);

static CYTHON_INLINE uint32_t __Pyx_PyInt_from_py_uint32_t(PyObject *);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint16_t(uint16_t);

static CYTHON_INLINE uint8_t __Pyx_PyInt_from_py_uint8_t(PyObject *);

static CYTHON_INLINE int16_t __Pyx_PyInt_from_py_int16_t(PyObject *);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_int8_t(int8_t);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

#ifndef __PYX_FORCE_INIT_THREADS
  #if PY_VERSION_HEX < 0x02040200
    #define __PYX_FORCE_INIT_THREADS 1
  #else
    #define __PYX_FORCE_INIT_THREADS 0
  #endif
#endif

static void __Pyx_WriteUnraisable(const char *name); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from libcpp.utility */

/* Module declarations from libcpp.map */

/* Module declarations from libcpp */

/* Module declarations from libcpp.vector */

/* Module declarations from libc.stdint */

/* Module declarations from mylibc */

/* Module declarations from vers */

/* Module declarations from libc.stdlib */

/* Module declarations from node */

/* Module declarations from driver */

/* Module declarations from values */

/* Module declarations from notification */

/* Module declarations from options */

/* Module declarations from log */

/* Module declarations from manager */

/* Module declarations from libopenzwave */

static PyTypeObject *__pyx_ptype_12libopenzwave_PyOptions = 0;
static PyTypeObject *__pyx_ptype_12libopenzwave_RetAlloc = 0;
static PyTypeObject *__pyx_ptype_12libopenzwave_PyManager = 0;
static std::map<uint64_t,OpenZWave::ValueID> __pyx_v_12libopenzwave_values_map;
static PyObject *__pyx_f_12libopenzwave_getValueFromType(OpenZWave::Manager *, PyObject *); /*proto*/
static PyObject *__pyx_f_12libopenzwave_addValueId(OpenZWave::ValueID, PyObject *); /*proto*/
static void __pyx_f_12libopenzwave_notif_callback(OpenZWave::Notification const*, void *); /*proto*/
static void __pyx_f_12libopenzwave_ctrl_callback(enum OpenZWave::Driver::ControllerState, enum OpenZWave::Driver::ControllerError, void *); /*proto*/
static PyObject *__pyx_f_12libopenzwave_driverData(int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "libopenzwave"
int __pyx_module_is_main_libopenzwave = 0;

/* Implementation of libopenzwave */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static char __pyx_k_1[] = "GetValueListSelection";
static char __pyx_k_2[] = "/usr";
static char __pyx_k_3[] = "PY_OZWAVE_CONFIG_DIRECTORY";
static char __pyx_k_4[] = "/usr/local";
static char __pyx_k_5[] = "OZWAVE_CONFIG_DIRECTORY";
static char __pyx_k_6[] = "GetControllerInterfaceType";
static char __pyx_k_7[] = "PyControllerInterface";
static char __pyx_k_8[] = "IsStaticUpdateController";
static char __pyx_k_9[] = "python-openzwave version %s";
static char __pyx_k_10[] = "OpenZWave version %d.%d.%d";
static char __pyx_k_11[] = "%d.%d.%d";
static char __pyx_k_14[] = "bIntervalBetweenPolls";
static char __pyx_k_15[] = "m_receivedUnsolicited";
static char __pyx_k_16[] = "m_averageResponseRTT";
static char __pyx_k_17[] = "m_lastReceivedMessage";
static char __pyx_k_18[] = "IsNodeListeningDevice";
static char __pyx_k_19[] = "IsNodeFrequentListeningDevice";
static char __pyx_k_20[] = "IsNodeSecurityDevice";
static char __pyx_k_21[] = "GetNodeManufacturerName";
static char __pyx_k_22[] = "GetNodeManufacturerId";
static char __pyx_k_23[] = "SetNodeManufacturerName";
static char __pyx_k_24[] = "GetNodeClassInformation";
static char __pyx_k_25[] = "ManufacturerSpecific1";
static char __pyx_k_26[] = "ManufacturerSpecific2";
static char __pyx_k_27[] = "SetValueListSelection";
static char __pyx_k_28[] = "GetValueFloatPrecision";
static char __pyx_k_29[] = "RequestAllConfigParams";
static char __pyx_k_30[] = "call to AddWatcher failed";
static char __pyx_k_32[] = "call to RemoveWatcher failed";
static char __pyx_k_34[] = "CancelControllerCommand";
static char __pyx_k_36[] = "BeginControllerCommand";
static char __pyx_k_37[] = "SceneGetValueAsFloat";
static char __pyx_k_38[] = "SceneGetValueAsShort";
static char __pyx_k_39[] = "SceneGetValueAsString";
static char __pyx_k_40[] = "SceneGetValueListSelection";
static char __pyx_k_41[] = "AddSceneValueListSelection";
static char __pyx_k_42[] = "SetSceneValueListSelection";
static char __pyx_k_43[] = "\n.. module:: libopenzwave\n\nThis file is part of **python-openzwave** project http://code.google.com/p/python-openzwave.\n    :platform: Unix, Windows, MacOS X\n    :sinopsis: openzwave C++\n\n.. moduleauthor: bibi21000 aka S\303\251bastien GALLET <bibi21000@gmail.com>\n.. moduleauthor: Maarten Damen <m.damen@gmail.com>\n\nLicense : GPL(v3)\n\n**python-openzwave** is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\n**python-openzwave** is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with python-openzwave. If not, see http://www.gnu.org/licenses.\n\n";
static char __pyx_k_44[] = "0.2.6";
static char __pyx_k_45[] = "share/python-openzwave/config";
static char __pyx_k_46[] = "share/openzwave/config";
static char __pyx_k_48[] = "A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented.";
static char __pyx_k_51[] = "A node value has been removed from OpenZWave's set.  This only occurs when a node is removed.";
static char __pyx_k_54[] = "A node value has been updated from the Z-Wave network and it is different from the previous value.";
static char __pyx_k_57[] = "A node value has been updated from the Z-Wave network.";
static char __pyx_k_60[] = "The associations for the node have changed. The application should rebuild any group information it holds about the node.";
static char __pyx_k_63[] = "A new node has been found (not already stored in zwcfg*.xml file).";
static char __pyx_k_66[] = "A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself.";
static char __pyx_k_69[] = "A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing.";
static char __pyx_k_72[] = "Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description.";
static char __pyx_k_75[] = "One of the node names has changed (name, manufacturer, product).";
static char __pyx_k_78[] = "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification.";
static char __pyx_k_81[] = "Polling of a node has been successfully turned off by a call to Manager::DisablePoll.";
static char __pyx_k_84[] = "Polling of a node has been successfully turned on by a call to Manager::EnablePoll.";
static char __pyx_k_87[] = "Scene Activation Set received.";
static char __pyx_k_90[] = "Handheld controller button event created.";
static char __pyx_k_93[] = "Handheld controller button event deleted.";
static char __pyx_k_96[] = "Handheld controller button on pressed event.";
static char __pyx_k_99[] = "Handheld controller button off pressed event.";
static char __pyx_k__a[] = "a";
static char __pyx_k__b[] = "b";
static char __pyx_k__c[] = "c";
static char __pyx_k_102[] = "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods.";
static char __pyx_k_105[] = "Driver failed to load.";
static char __pyx_k_108[] = "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications.";
static char __pyx_k_110[] = "EssentialNodeQueriesComplete";
static char __pyx_k_112[] = "The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages.";
static char __pyx_k_115[] = "All the initialisation queries on a node have been completed.";
static char __pyx_k_118[] = "All awake nodes have been queried, so client application can expected complete data for these nodes.";
static char __pyx_k_121[] = "All nodes have been queried, so client application can expected complete data.";
static char __pyx_k_123[] = "AllNodesQueriedSomeDead";
static char __pyx_k_125[] = "All nodes have been queried but some dead nodes found.";
static char __pyx_k_128[] = "A manager notification report..";
static char __pyx_k_131[] = "Completed messages.";
static char __pyx_k_134[] = "Messages that timeout will send a Notification with this code.";
static char __pyx_k_137[] = "Report on NoOperation message sent completion.";
static char __pyx_k_140[] = "Report when a sleeping node wakes.";
static char __pyx_k_143[] = "Report when a node goes to sleep.";
static char __pyx_k_146[] = "Report when a node is presumed dead.";
static char __pyx_k_149[] = "Report when a node is revived.";
static char __pyx_k_152[] = "The 'level' as controlled by basic commands.  Usually duplicated by another command class.";
static char __pyx_k_155[] = "Basic values an ordinary user would be interested in.";
static char __pyx_k_158[] = "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead.";
static char __pyx_k_161[] = "Values of significance only to users who understand the Z-Wave protocol";
static char __pyx_k_164[] = "Boolean, true or false";
static char __pyx_k_167[] = "8-bit unsigned value";
static char __pyx_k_170[] = "Represents a non-integer value as a string, to avoid floating point accuracy issues.";
static char __pyx_k_173[] = "32-bit signed value";
static char __pyx_k_176[] = "List from which one item can be selected";
static char __pyx_k_179[] = "Complex type used with the Climate Control Schedule command class";
static char __pyx_k_182[] = "16-bit signed value";
static char __pyx_k_185[] = "Text string";
static char __pyx_k_188[] = "A write-only value that is the equivalent of pressing a button to send a command to a device";
static char __pyx_k_191[] = "No command in progress.";
static char __pyx_k_194[] = "The command is starting.";
static char __pyx_k_197[] = "The command was cancelled.";
static char __pyx_k_200[] = "Command invocation had error(s) and was aborted.";
static char __pyx_k_203[] = "Controller is waiting for a user action.";
static char __pyx_k_206[] = "Controller command is on a sleep queue wait for device.";
static char __pyx_k_209[] = "The controller is communicating with the other device to carry out the command.";
static char __pyx_k_212[] = "The command has completed successfully.";
static char __pyx_k_215[] = "The command has failed.";
static char __pyx_k_218[] = "Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK.";
static char __pyx_k_221[] = "Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed.";
static char __pyx_k_224[] = "None.";
static char __pyx_k_227[] = "Button.";
static char __pyx_k_234[] = "CreateNewPrimary.";
static char __pyx_k_239[] = "RemoveFailedNode, AddNodeToNetwork.";
static char __pyx_k_242[] = "ReceiveConfiguration.";
static char __pyx_k_245[] = "RemoveFailedNode.";
static char __pyx_k_248[] = "RemoveFailedNode, RequestNetworkUpdate.";
static char __pyx_k_253[] = "RequestNetworkUpdate error.";
static char __pyx_k_258[] = "No command.";
static char __pyx_k_261[] = "Add a new device (but not a controller) to the Z-Wave network.";
static char __pyx_k_264[] = "Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller.";
static char __pyx_k_266[] = "ReceiveConfiguration";
static char __pyx_k_268[] = "Receive Z-Wave network configuration information from another controller.";
static char __pyx_k_271[] = "Remove a new device (but not a controller) from the Z-Wave network.";
static char __pyx_k_274[] = "Move a node to the controller's failed nodes list. This command will only work if the node cannot respond.";
static char __pyx_k_277[] = "Check whether a node is in the controller's failed nodes list.";
static char __pyx_k_280[] = "Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed.";
static char __pyx_k_283[] = "Make a different controller the primary.";
static char __pyx_k_285[] = "RequestNetworkUpdate";
static char __pyx_k_287[] = "Request network information from the SUC/SIS.";
static char __pyx_k_289[] = "RequestNodeNeighborUpdate";
static char __pyx_k_291[] = "Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors.";
static char __pyx_k_294[] = "Assign a network return routes to a device.";
static char __pyx_k_296[] = "DeleteAllReturnRoutes";
static char __pyx_k_298[] = "Delete all return routes from a device.";
static char __pyx_k_301[] = "Send a node information frame.";
static char __pyx_k_304[] = "Send information from primary to secondary.";
static char __pyx_k_307[] = "Create an id that tracks handheld button presses.";
static char __pyx_k_310[] = "Delete id that tracks handheld button presses.";
static char __pyx_k_313[] = "Controller interface use unknown protocol .";
static char __pyx_k_316[] = "Controller interface use serial protocol.";
static char __pyx_k_319[] = "Controller interface use human interface device protocol.";
static char __pyx_k_321[] = "Number of SOF bytes received";
static char __pyx_k_322[] = "Number of unsolicited messages while waiting for an ACK";
static char __pyx_k_323[] = "Number of times read were aborted due to timeouts";
static char __pyx_k_324[] = "Number of bad checksums";
static char __pyx_k_325[] = "Number of messages successfully read";
static char __pyx_k_326[] = "Number of messages successfully sent";
static char __pyx_k_327[] = "Number of CAN bytes received";
static char __pyx_k_328[] = "Number of NAK bytes received";
static char __pyx_k_329[] = "Number of ACK bytes received";
static char __pyx_k_330[] = "Number of bytes out of framing";
static char __pyx_k_331[] = "Number of messages dropped & not delivered";
static char __pyx_k_332[] = "Number of messages retransmitted";
static char __pyx_k_333[] = "Number of unexpected callbacks";
static char __pyx_k_334[] = "Number of failed messages due to bad route response";
static char __pyx_k_335[] = "Number of no ACK returned errors";
static char __pyx_k_336[] = "Number of network busy/failure messages";
static char __pyx_k_337[] = "Number of messages not delivered to network";
static char __pyx_k_338[] = "Number of messages received with routed busy status";
static char __pyx_k_339[] = "Number of broadcasts read";
static char __pyx_k_340[] = "Number of broadcasts sent";
static char __pyx_k_341[] = "COMMAND_CLASS_NO_OPERATION";
static char __pyx_k_342[] = "COMMAND_CLASS_CONTROLLER_REPLICATION";
static char __pyx_k_343[] = "COMMAND_CLASS_APPLICATION_STATUS";
static char __pyx_k_344[] = "COMMAND_CLASS_ZIP_SERVICES";
static char __pyx_k_345[] = "COMMAND_CLASS_ZIP_SERVER";
static char __pyx_k_346[] = "COMMAND_CLASS_SWITCH_BINARY";
static char __pyx_k_347[] = "COMMAND_CLASS_SWITCH_MULTILEVEL";
static char __pyx_k_348[] = "COMMAND_CLASS_SWITCH_ALL";
static char __pyx_k_349[] = "COMMAND_CLASS_SWITCH_TOGGLE_BINARY";
static char __pyx_k_350[] = "COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL";
static char __pyx_k_351[] = "COMMAND_CLASS_CHIMNEY_FAN";
static char __pyx_k_352[] = "COMMAND_CLASS_SCENE_ACTIVATION";
static char __pyx_k_353[] = "COMMAND_CLASS_SCENE_ACTUATOR_CONF";
static char __pyx_k_354[] = "COMMAND_CLASS_SCENE_CONTROLLER_CONF";
static char __pyx_k_355[] = "COMMAND_CLASS_ZIP_CLIENT";
static char __pyx_k_356[] = "COMMAND_CLASS_ZIP_ADV_SERVICES";
static char __pyx_k_357[] = "COMMAND_CLASS_SENSOR_BINARY";
static char __pyx_k_358[] = "COMMAND_CLASS_SENSOR_MULTILEVEL";
static char __pyx_k_359[] = "COMMAND_CLASS_ZIP_ADV_SERVER";
static char __pyx_k_360[] = "COMMAND_CLASS_ZIP_ADV_CLIENT";
static char __pyx_k_361[] = "COMMAND_CLASS_METER_PULSE";
static char __pyx_k_362[] = "COMMAND_CLASS_METER_TBL_CONFIG";
static char __pyx_k_363[] = "COMMAND_CLASS_METER_TBL_MONITOR";
static char __pyx_k_364[] = "COMMAND_CLASS_METER_TBL_PUSH";
static char __pyx_k_365[] = "COMMAND_CLASS_THERMOSTAT_HEATING";
static char __pyx_k_366[] = "COMMAND_CLASS_THERMOSTAT_MODE";
static char __pyx_k_367[] = "COMMAND_CLASS_THERMOSTAT_OPERATING_STATE";
static char __pyx_k_368[] = "COMMAND_CLASS_THERMOSTAT_SETPOINT";
static char __pyx_k_369[] = "COMMAND_CLASS_THERMOSTAT_FAN_MODE";
static char __pyx_k_370[] = "COMMAND_CLASS_THERMOSTAT_FAN_STATE";
static char __pyx_k_371[] = "COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE";
static char __pyx_k_372[] = "COMMAND_CLASS_THERMOSTAT_SETBACK";
static char __pyx_k_373[] = "COMMAND_CLASS_DOOR_LOCK_LOGGING";
static char __pyx_k_374[] = "COMMAND_CLASS_SCHEDULE_ENTRY_LOCK";
static char __pyx_k_375[] = "COMMAND_CLASS_BASIC_WINDOW_COVERING";
static char __pyx_k_376[] = "COMMAND_CLASS_MTP_WINDOW_COVERING";
static char __pyx_k_377[] = "COMMAND_CLASS_MULTI_CHANNEL_V2";
static char __pyx_k_378[] = "COMMAND_CLASS_DISPLAY";
static char __pyx_k_379[] = "COMMAND_CLASS_DOOR_LOCK";
static char __pyx_k_380[] = "COMMAND_CLASS_USER_CODE";
static char __pyx_k_381[] = "COMMAND_CLASS_GARAGE_DOOR";
static char __pyx_k_382[] = "COMMAND_CLASS_CONFIGURATION";
static char __pyx_k_383[] = "COMMAND_CLASS_MANUFACTURER_SPECIFIC";
static char __pyx_k_384[] = "COMMAND_CLASS_POWERLEVEL";
static char __pyx_k_385[] = "COMMAND_CLASS_PROTECTION";
static char __pyx_k_386[] = "COMMAND_CLASS_NODE_NAMING";
static char __pyx_k_387[] = "COMMAND_CLASS_ACTUATOR_MULTILEVEL";
static char __pyx_k_388[] = "COMMAND_CLASS_FIRMWARE_UPDATE_MD";
static char __pyx_k_389[] = "COMMAND_CLASS_GROUPING_NAME";
static char __pyx_k_390[] = "COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE";
static char __pyx_k_391[] = "COMMAND_CLASS_REMOTE_ASSOCIATION";
static char __pyx_k_392[] = "COMMAND_CLASS_BATTERY";
static char __pyx_k_393[] = "COMMAND_CLASS_NETWORK_STAT";
static char __pyx_k_394[] = "COMMAND_CLASS_WAKE_UP";
static char __pyx_k_395[] = "COMMAND_CLASS_ASSOCIATION";
static char __pyx_k_396[] = "COMMAND_CLASS_VERSION";
static char __pyx_k_397[] = "COMMAND_CLASS_INDICATOR";
static char __pyx_k_398[] = "COMMAND_CLASS_PROPRIETARY";
static char __pyx_k_399[] = "COMMAND_CLASS_LANGUAGE";
static char __pyx_k_400[] = "COMMAND_CLASS_TIME_PARAMETERS";
static char __pyx_k_401[] = "COMMAND_CLASS_GEOGRAPHIC_LOCATION";
static char __pyx_k_402[] = "COMMAND_CLASS_COMPOSITE";
static char __pyx_k_403[] = "COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION";
static char __pyx_k_404[] = "COMMAND_CLASS_MULTI_CMD";
static char __pyx_k_405[] = "COMMAND_CLASS_ENERGY_PRODUCTION";
static char __pyx_k_406[] = "COMMAND_CLASS_MANUFACTURER_PROPRIETARY";
static char __pyx_k_407[] = "COMMAND_CLASS_SCREEN_MD";
static char __pyx_k_408[] = "COMMAND_CLASS_SCREEN_ATTRIBUTES";
static char __pyx_k_409[] = "COMMAND_CLASS_SIMPLE_AV_CONTROL";
static char __pyx_k_410[] = "COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD";
static char __pyx_k_411[] = "COMMAND_CLASS_AV_RENDERER_STATUS";
static char __pyx_k_412[] = "COMMAND_CLASS_AV_CONTENT_SEARCH_MD";
static char __pyx_k_413[] = "COMMAND_CLASS_SECURITY";
static char __pyx_k_414[] = "COMMAND_CLASS_AV_TAGGING_MD";
static char __pyx_k_415[] = "COMMAND_CLASS_IP_CONFIGURATION";
static char __pyx_k_416[] = "COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION";
static char __pyx_k_417[] = "COMMAND_CLASS_SENSOR_ALARM";
static char __pyx_k_418[] = "COMMAND_CLASS_SILENCE_ALARM";
static char __pyx_k_419[] = "COMMAND_CLASS_SENSOR_CONFIGURATION";
static char __pyx_k_420[] = "COMMAND_CLASS_NON_INTEROPERABLE";
static char __pyx_k_421[] = "value added";
static char __pyx_k_422[] = "value removed";
static char __pyx_k_423[] = "value changed";
static char __pyx_k_424[] = "groups changed";
static char __pyx_k_425[] = "new node";
static char __pyx_k_426[] = "node added";
static char __pyx_k_427[] = "node removed";
static char __pyx_k_428[] = "node protocol info";
static char __pyx_k_429[] = "node naming";
static char __pyx_k_430[] = "node event";
static char __pyx_k_431[] = "polling disabled";
static char __pyx_k_432[] = "polling enabled";
static char __pyx_k_433[] = "driver ready";
static char __pyx_k_434[] = "driver reset";
static char __pyx_k_435[] = "message complete";
static char __pyx_k_436[] = "node queries complete";
static char __pyx_k_437[] = "awake nodes queried";
static char __pyx_k_438[] = "all nodes queried";
static char __pyx_k__at[] = "at";
static char __pyx_k__id[] = "id";
static char __pyx_k__os[] = "os";
static char __pyx_k__Hid[] = "Hid";
static char __pyx_k__Int[] = "Int";
static char __pyx_k__add[] = "add";
static char __pyx_k__arg[] = "arg";
static char __pyx_k__doc[] = "doc";
static char __pyx_k__end[] = "end";
static char __pyx_k__idx[] = "idx";
static char __pyx_k__siz[] = "siz";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__Bool[] = "Bool";
static char __pyx_k__Busy[] = "Busy";
static char __pyx_k__Byte[] = "Byte";
static char __pyx_k__Dead[] = "Dead";
static char __pyx_k__Info[] = "Info";
static char __pyx_k__List[] = "List";
static char __pyx_k__Lock[] = "Lock";
static char __pyx_k__None[] = "None";
static char __pyx_k__User[] = "User";
static char __pyx_k__back[] = "back";
static char __pyx_k__data[] = "data";
static char __pyx_k__find[] = "find";
static char __pyx_k__help[] = "help";
static char __pyx_k__join[] = "join";
static char __pyx_k__name[] = "name";
static char __pyx_k__path[] = "path";
static char __pyx_k__self[] = "self";
static char __pyx_k__type[] = "type";
static char __pyx_k__unit[] = "unit";
static char __pyx_k__Alert[] = "Alert";
static char __pyx_k__Alive[] = "Alive";
static char __pyx_k__Awake[] = "Awake";
static char __pyx_k__Basic[] = "Basic";
static char __pyx_k__Debug[] = "Debug";
static char __pyx_k__Error[] = "Error";
static char __pyx_k__Fatal[] = "Fatal";
static char __pyx_k__GetId[] = "GetId";
static char __pyx_k__Group[] = "Group";
static char __pyx_k__Probe[] = "Probe";
static char __pyx_k__Short[] = "Short";
static char __pyx_k__Sleep[] = "Sleep";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__clear[] = "clear";
static char __pyx_k__count[] = "count";
static char __pyx_k__empty[] = "empty";
static char __pyx_k__error[] = "error";
static char __pyx_k__event[] = "event";
static char __pyx_k__genre[] = "genre";
static char __pyx_k__hours[] = "hours";
static char __pyx_k__index[] = "index";
static char __pyx_k__label[] = "label";
static char __pyx_k__level[] = "level";
static char __pyx_k__noack[] = "noack";
static char __pyx_k__param[] = "param";
static char __pyx_k__range[] = "range";
static char __pyx_k__state[] = "state";
static char __pyx_k__units[] = "units";
static char __pyx_k__value[] = "value";
static char __pyx_k__ACKCnt[] = "ACKCnt";
static char __pyx_k__Always[] = "Always";
static char __pyx_k__Button[] = "Button";
static char __pyx_k__CANCnt[] = "CANCnt";
static char __pyx_k__Cancel[] = "Cancel";
static char __pyx_k__Config[] = "Config";
static char __pyx_k__Detail[] = "Detail";
static char __pyx_k__Failed[] = "Failed";
static char __pyx_k__NAKCnt[] = "NAKCnt";
static char __pyx_k__NodeOK[] = "NodeOK";
static char __pyx_k__Normal[] = "Normal";
static char __pyx_k__NotSUC[] = "NotSUC";
static char __pyx_k__OOFCnt[] = "OOFCnt";
static char __pyx_k__Probe1[] = "Probe1";
static char __pyx_k__SOFCnt[] = "SOFCnt";
static char __pyx_k__Serial[] = "Serial";
static char __pyx_k__Static[] = "Static";
static char __pyx_k__String[] = "String";
static char __pyx_k__System[] = "System";
static char __pyx_k__WakeUp[] = "WakeUp";
static char __pyx_k__append[] = "append";
static char __pyx_k__ccData[] = "ccData";
static char __pyx_k__exists[] = "exists";
static char __pyx_k__homeId[] = "homeId";
static char __pyx_k__homeid[] = "homeid";
static char __pyx_k__insert[] = "insert";
static char __pyx_k__nodeId[] = "nodeId";
static char __pyx_k__nodeid[] = "nodeid";
static char __pyx_k__sentTS[] = "sentTS";
static char __pyx_k__setDoc[] = "setDoc";
static char __pyx_k__Decimal[] = "Decimal";
static char __pyx_k__Dynamic[] = "Dynamic";
static char __pyx_k__GetType[] = "GetType";
static char __pyx_k__NodeNew[] = "NodeNew";
static char __pyx_k__Session[] = "Session";
static char __pyx_k__Timeout[] = "Timeout";
static char __pyx_k__Unknown[] = "Unknown";
static char __pyx_k__Waiting[] = "Waiting";
static char __pyx_k__Warning[] = "Warning";
static char __pyx_k__command[] = "command";
static char __pyx_k__dropped[] = "dropped";
static char __pyx_k__listdir[] = "listdir";
static char __pyx_k__m_noack[] = "m_noack";
static char __pyx_k__manager[] = "manager";
static char __pyx_k__message[] = "message";
static char __pyx_k__minutes[] = "minutes";
static char __pyx_k__netbusy[] = "netbusy";
static char __pyx_k__options[] = "options";
static char __pyx_k__quality[] = "quality";
static char __pyx_k__readCnt[] = "readCnt";
static char __pyx_k__retries[] = "retries";
static char __pyx_k__sceneId[] = "sceneId";
static char __pyx_k__sceneid[] = "sceneid";
static char __pyx_k__sentCnt[] = "sentCnt";
static char __pyx_k__setback[] = "setback";
static char __pyx_k__valueId[] = "valueId";
static char __pyx_k__ButtonOn[] = "ButtonOn";
static char __pyx_k__Complete[] = "Complete";
static char __pyx_k__Disabled[] = "Disabled";
static char __pyx_k__GetEvent[] = "GetEvent";
static char __pyx_k__GetGenre[] = "GetGenre";
static char __pyx_k__GetIndex[] = "GetIndex";
static char __pyx_k__Internal[] = "Internal";
static char __pyx_k__NodeInfo[] = "NodeInfo";
static char __pyx_k__NotFound[] = "NotFound";
static char __pyx_k__Overflow[] = "Overflow";
static char __pyx_k__PyGenres[] = "PyGenres";
static char __pyx_k__Schedule[] = "Schedule";
static char __pyx_k__SetValue[] = "SetValue";
static char __pyx_k__Sleeping[] = "Sleeping";
static char __pyx_k__Starting[] = "Starting";
static char __pyx_k__Versions[] = "Versions";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__buttonId[] = "buttonId";
static char __pyx_k__groupIdx[] = "groupIdx";
static char __pyx_k__groupidx[] = "groupidx";
static char __pyx_k__instance[] = "instance";
static char __pyx_k__isPolled[] = "isPolled";
static char __pyx_k__location[] = "location";
static char __pyx_k__m_ACKCnt[] = "m_ACKCnt";
static char __pyx_k__m_CANCnt[] = "m_CANCnt";
static char __pyx_k__m_NAKCnt[] = "m_NAKCnt";
static char __pyx_k__m_OOFCnt[] = "m_OOFCnt";
static char __pyx_k__m_SOFCnt[] = "m_SOFCnt";
static char __pyx_k__m_ccData[] = "m_ccData";
static char __pyx_k__m_sentTS[] = "m_sentTS";
static char __pyx_k__pop_back[] = "pop_back";
static char __pyx_k__readOnly[] = "readOnly";
static char __pyx_k__writeCnt[] = "writeCnt";
static char __pyx_k__AddDevice[] = "AddDevice";
static char __pyx_k__AddDriver[] = "AddDriver";
static char __pyx_k__ButtonOff[] = "ButtonOff";
static char __pyx_k__Completed[] = "Completed";
static char __pyx_k__GetHomeId[] = "GetHomeId";
static char __pyx_k__GetNodeId[] = "GetNodeId";
static char __pyx_k__Instances[] = "Instances";
static char __pyx_k__IsPrimary[] = "IsPrimary";
static char __pyx_k__Neighbors[] = "Neighbors";
static char __pyx_k__NodeAdded[] = "NodeAdded";
static char __pyx_k__NodeEvent[] = "NodeEvent";
static char __pyx_k__NotBridge[] = "NotBridge";
static char __pyx_k__PYLIBRARY[] = "PYLIBRARY";
static char __pyx_k__SetNodeOn[] = "SetNodeOn";
static char __pyx_k__SoftReset[] = "SoftReset";
static char __pyx_k__badroutes[] = "badroutes";
static char __pyx_k__callbacks[] = "callbacks";
static char __pyx_k__className[] = "className";
static char __pyx_k__error_msg[] = "error_msg";
static char __pyx_k__highPower[] = "highPower";
static char __pyx_k__intensity[] = "intensity";
static char __pyx_k__m_dropped[] = "m_dropped";
static char __pyx_k__m_netbusy[] = "m_netbusy";
static char __pyx_k__m_quality[] = "m_quality";
static char __pyx_k__m_readCnt[] = "m_readCnt";
static char __pyx_k__m_retries[] = "m_retries";
static char __pyx_k__m_sentCnt[] = "m_sentCnt";
static char __pyx_k__ACKWaiting[] = "ACKWaiting";
static char __pyx_k__AddWatcher[] = "AddWatcher";
static char __pyx_k__EnablePoll[] = "EnablePoll";
static char __pyx_k__GetSceneId[] = "GetSceneId";
static char __pyx_k__GetValueID[] = "GetValueID";
static char __pyx_k__InProgress[] = "InProgress";
static char __pyx_k__IsValueSet[] = "IsValueSet";
static char __pyx_k__NodeFailed[] = "NodeFailed";
static char __pyx_k__NodeNaming[] = "NodeNaming";
static char __pyx_k__NotPrimary[] = "NotPrimary";
static char __pyx_k__SceneEvent[] = "SceneEvent";
static char __pyx_k__SetNodeOff[] = "SetNodeOff";
static char __pyx_k__ValueAdded[] = "ValueAdded";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__configPath[] = "configPath";
static char __pyx_k__m_writeCnt[] = "m_writeCnt";
static char __pyx_k__pythonfunc[] = "pythonfunc";
static char __pyx_k__readAborts[] = "readAborts";
static char __pyx_k__receivedTS[] = "receivedTS";
static char __pyx_k__routedbusy[] = "routedbusy";
static char __pyx_k__sentFailed[] = "sentFailed";
static char __pyx_k__CreateScene[] = "CreateScene";
static char __pyx_k__DisablePoll[] = "DisablePoll";
static char __pyx_k__DriverReady[] = "DriverReady";
static char __pyx_k__DriverReset[] = "DriverReset";
static char __pyx_k__EnumWithDoc[] = "EnumWithDoc";
static char __pyx_k__GetButtonId[] = "GetButtonId";
static char __pyx_k__GetGroupIdx[] = "GetGroupIdx";
static char __pyx_k__GetInstance[] = "GetInstance";
static char __pyx_k__GetNodeName[] = "GetNodeName";
static char __pyx_k__GetNodeType[] = "GetNodeType";
static char __pyx_k__GetValueMax[] = "GetValueMax";
static char __pyx_k__GetValueMin[] = "GetValueMin";
static char __pyx_k__HealNetwork[] = "HealNetwork";
static char __pyx_k__IsNodeAwake[] = "IsNodeAwake";
static char __pyx_k__MsgComplete[] = "MsgComplete";
static char __pyx_k__NoOperation[] = "NoOperation";
static char __pyx_k__NodeRemoved[] = "NodeRemoved";
static char __pyx_k__PressButton[] = "PressButton";
static char __pyx_k__PyLogLevels[] = "PyLogLevels";
static char __pyx_k__RemoveScene[] = "RemoveScene";
static char __pyx_k__SceneExists[] = "SceneExists";
static char __pyx_k__SetNodeName[] = "SetNodeName";
static char __pyx_k__SwitchAllOn[] = "SwitchAllOn";
static char __pyx_k__TestNetwork[] = "TestNetwork";
static char __pyx_k__WriteConfig[] = "WriteConfig";
static char __pyx_k__badChecksum[] = "badChecksum";
static char __pyx_k__m_badroutes[] = "m_badroutes";
static char __pyx_k__m_callbacks[] = "m_callbacks";
static char __pyx_k__nondelivery[] = "nondelivery";
static char __pyx_k__productName[] = "productName";
static char __pyx_k__receivedCnt[] = "receivedCnt";
static char __pyx_k__upNodeRoute[] = "upNodeRoute";
static char __pyx_k__AddOptionInt[] = "AddOptionInt";
static char __pyx_k__Associations[] = "Associations";
static char __pyx_k__CreateButton[] = "CreateButton";
static char __pyx_k__DeleteButton[] = "DeleteButton";
static char __pyx_k__DriverFailed[] = "DriverFailed";
static char __pyx_k__GetAllScenes[] = "GetAllScenes";
static char __pyx_k__GetNodeBasic[] = "GetNodeBasic";
static char __pyx_k__GetNumGroups[] = "GetNumGroups";
static char __pyx_k__GetNumScenes[] = "GetNumScenes";
static char __pyx_k__GetValueHelp[] = "GetValueHelp";
static char __pyx_k__IsNodeFailed[] = "IsNodeFailed";
static char __pyx_k__NodeNotFound[] = "NodeNotFound";
static char __pyx_k__NotSecondary[] = "NotSecondary";
static char __pyx_k__Notification[] = "Notification";
static char __pyx_k__ProtocolInfo[] = "ProtocolInfo";
static char __pyx_k__PyStatDriver[] = "PyStatDriver";
static char __pyx_k__PyValueTypes[] = "PyValueTypes";
static char __pyx_k__RefreshValue[] = "RefreshValue";
static char __pyx_k__RemoveDevice[] = "RemoveDevice";
static char __pyx_k__RemoveDriver[] = "RemoveDriver";
static char __pyx_k__SetNodeLevel[] = "SetNodeLevel";
static char __pyx_k__SetValueHelp[] = "SetValueHelp";
static char __pyx_k__StreamDetail[] = "StreamDetail";
static char __pyx_k__SwitchAllOff[] = "SwitchAllOff";
static char __pyx_k__ValueChanged[] = "ValueChanged";
static char __pyx_k__ValueRemoved[] = "ValueRemoved";
static char __pyx_k__classVersion[] = "classVersion";
static char __pyx_k__commandClass[] = "commandClass";
static char __pyx_k__libopenzwave[] = "libopenzwave";
static char __pyx_k__m_ACKWaiting[] = "m_ACKWaiting";
static char __pyx_k__m_readAborts[] = "m_readAborts";
static char __pyx_k__m_receivedTS[] = "m_receivedTS";
static char __pyx_k__m_routedbusy[] = "m_routedbusy";
static char __pyx_k__m_sentFailed[] = "m_sentFailed";
static char __pyx_k__milliseconds[] = "milliseconds";
static char __pyx_k__receivedDups[] = "receivedDups";
static char __pyx_k__targetnodeid[] = "targetnodeid";
static char __pyx_k__ActivateScene[] = "ActivateScene";
static char __pyx_k__AddOptionBool[] = "AddOptionBool";
static char __pyx_k__AddSceneValue[] = "AddSceneValue";
static char __pyx_k__CALLBACK_DESC[] = "CALLBACK_DESC";
static char __pyx_k__Configuration[] = "Configuration";
static char __pyx_k__GetGroupLabel[] = "GetGroupLabel";
static char __pyx_k__GetSceneLabel[] = "GetSceneLabel";
static char __pyx_k__GetValueAsInt[] = "GetValueAsInt";
static char __pyx_k__GetValueLabel[] = "GetValueLabel";
static char __pyx_k__GetValueUnits[] = "GetValueUnits";
static char __pyx_k__HasNodeFailed[] = "HasNodeFailed";
static char __pyx_k__ReleaseButton[] = "ReleaseButton";
static char __pyx_k__RemoveWatcher[] = "RemoveWatcher";
static char __pyx_k__SetSceneLabel[] = "SetSceneLabel";
static char __pyx_k__SetSceneValue[] = "SetSceneValue";
static char __pyx_k__SetValueLabel[] = "SetValueLabel";
static char __pyx_k__SetValueUnits[] = "SetValueUnits";
static char __pyx_k__m_badChecksum[] = "m_badChecksum";
static char __pyx_k__m_nondelivery[] = "m_nondelivery";
static char __pyx_k__m_receivedCnt[] = "m_receivedCnt";
static char __pyx_k__AddAssociation[] = "AddAssociation";
static char __pyx_k__ButtonNotFound[] = "ButtonNotFound";
static char __pyx_k__GetNodeGeneric[] = "GetNodeGeneric";
static char __pyx_k__GetNodeVersion[] = "GetNodeVersion";
static char __pyx_k__GetSwitchPoint[] = "GetSwitchPoint";
static char __pyx_k__GetValueAsBool[] = "GetValueAsBool";
static char __pyx_k__GetValueAsByte[] = "GetValueAsByte";
static char __pyx_k__PollingEnabled[] = "PollingEnabled";
static char __pyx_k__SceneGetValues[] = "SceneGetValues";
static char __pyx_k__SetConfigParam[] = "SetConfigParam";
static char __pyx_k__SetSwitchPoint[] = "SetSwitchPoint";
static char __pyx_k__ValueRefreshed[] = "ValueRefreshed";
static char __pyx_k__commandClassId[] = "commandClassId";
static char __pyx_k__lastRequestRTT[] = "lastRequestRTT";
static char __pyx_k__m_receivedDups[] = "m_receivedDups";
static char __pyx_k__AddOptionString[] = "AddOptionString";
static char __pyx_k__AllNodesQueried[] = "AllNodesQueried";
static char __pyx_k__GetAssociations[] = "GetAssociations";
static char __pyx_k__GetNodeLocation[] = "GetNodeLocation";
static char __pyx_k__GetNodeSecurity[] = "GetNodeSecurity";
static char __pyx_k__GetNodeSpecific[] = "GetNodeSpecific";
static char __pyx_k__GetNotification[] = "GetNotification";
static char __pyx_k__GetPollInterval[] = "GetPollInterval";
static char __pyx_k__GetValueAsFloat[] = "GetValueAsFloat";
static char __pyx_k__GetValueAsShort[] = "GetValueAsShort";
static char __pyx_k__HealNetworkNode[] = "HealNetworkNode";
static char __pyx_k__IsValueReadOnly[] = "IsValueReadOnly";
static char __pyx_k__PollingDisabled[] = "PollingDisabled";
static char __pyx_k__PyNotifications[] = "PyNotifications";
static char __pyx_k__RefreshNodeInfo[] = "RefreshNodeInfo";
static char __pyx_k__RemoveAllScenes[] = "RemoveAllScenes";
static char __pyx_k__ReplicationSend[] = "ReplicationSend";
static char __pyx_k__ResetController[] = "ResetController";
static char __pyx_k__SetNodeLocation[] = "SetNodeLocation";
static char __pyx_k__SetPollInterval[] = "SetPollInterval";
static char __pyx_k__TestNetworkNode[] = "TestNetworkNode";
static char __pyx_k__lastResponseRTT[] = "lastResponseRTT";
static char __pyx_k__CreateNewPrimary[] = "CreateNewPrimary";
static char __pyx_k__GetNodeNeighbors[] = "GetNodeNeighbors";
static char __pyx_k__GetNodeProductId[] = "GetNodeProductId";
static char __pyx_k__GetPollIntensity[] = "GetPollIntensity";
static char __pyx_k__GetValueAsString[] = "GetValueAsString";
static char __pyx_k__IsValueWriteOnly[] = "IsValueWriteOnly";
static char __pyx_k__NodeProtocolInfo[] = "NodeProtocolInfo";
static char __pyx_k__RemoveFailedNode[] = "RemoveFailedNode";
static char __pyx_k__RemoveSceneValue[] = "RemoveSceneValue";
static char __pyx_k__RequestNodeState[] = "RequestNodeState";
static char __pyx_k__SetPollIntensity[] = "SetPollIntensity";
static char __pyx_k___watcherCallback[] = "_watcherCallback";
static char __pyx_k__broadcastReadCnt[] = "broadcastReadCnt";
static char __pyx_k__m_commandClassId[] = "m_commandClassId";
static char __pyx_k__m_lastRequestRTT[] = "m_lastRequestRTT";
static char __pyx_k__manufacturerName[] = "manufacturerName";
static char __pyx_k__notificationCode[] = "notificationCode";
static char __pyx_k__notificationType[] = "notificationType";
static char __pyx_k__AssignReturnRoute[] = "AssignReturnRoute";
static char __pyx_k__AwakeNodesQueried[] = "AwakeNodesQueried";
static char __pyx_k__ClearSwitchPoints[] = "ClearSwitchPoints";
static char __pyx_k__GetCommandClassId[] = "GetCommandClassId";
static char __pyx_k__GetControllerPath[] = "GetControllerPath";
static char __pyx_k__GetLibraryVersion[] = "GetLibraryVersion";
static char __pyx_k__GetNodeQueryStage[] = "GetNodeQueryStage";
static char __pyx_k__GetNodeStatistics[] = "GetNodeStatistics";
static char __pyx_k__GetSendQueueCount[] = "GetSendQueueCount";
static char __pyx_k__GetValueListItems[] = "GetValueListItems";
static char __pyx_k__PyControllerError[] = "PyControllerError";
static char __pyx_k__PyControllerState[] = "PyControllerState";
static char __pyx_k__RemoveAssociation[] = "RemoveAssociation";
static char __pyx_k__RemoveSwitchPoint[] = "RemoveSwitchPoint";
static char __pyx_k__ReplaceFailedNode[] = "ReplaceFailedNode";
static char __pyx_k__averageRequestRTT[] = "averageRequestRTT";
static char __pyx_k__broadcastWriteCnt[] = "broadcastWriteCnt";
static char __pyx_k__m_lastResponseRTT[] = "m_lastResponseRTT";
static char __pyx_k__COMMAND_CLASS_DESC[] = "COMMAND_CLASS_DESC";
static char __pyx_k__COMMAND_CLASS_HAIL[] = "COMMAND_CLASS_HAIL";
static char __pyx_k__COMMAND_CLASS_KICK[] = "COMMAND_CLASS_KICK";
static char __pyx_k__COMMAND_CLASS_LOCK[] = "COMMAND_CLASS_LOCK";
static char __pyx_k__COMMAND_CLASS_MARK[] = "COMMAND_CLASS_MARK";
static char __pyx_k__COMMAND_CLASS_TIME[] = "COMMAND_CLASS_TIME";
static char __pyx_k__GetLibraryTypeName[] = "GetLibraryTypeName";
static char __pyx_k__GetMaxAssociations[] = "GetMaxAssociations";
static char __pyx_k__GetNodeMaxBaudRate[] = "GetNodeMaxBaudRate";
static char __pyx_k__GetNodeProductName[] = "GetNodeProductName";
static char __pyx_k__GetNodeProductType[] = "GetNodeProductType";
static char __pyx_k__GetNumSwitchPoints[] = "GetNumSwitchPoints";
static char __pyx_k__IsBridgeController[] = "IsBridgeController";
static char __pyx_k__IsNodeInfoReceived[] = "IsNodeInfoReceived";
static char __pyx_k__RequestConfigParam[] = "RequestConfigParam";
static char __pyx_k__RequestNodeDynamic[] = "RequestNodeDynamic";
static char __pyx_k__SceneGetValueAsInt[] = "SceneGetValueAsInt";
static char __pyx_k__SetNodeProductName[] = "SetNodeProductName";
static char __pyx_k__averageResponseRTT[] = "averageResponseRTT";
static char __pyx_k__m_broadcastReadCnt[] = "m_broadcastReadCnt";
static char __pyx_k__COMMAND_CLASS_ALARM[] = "COMMAND_CLASS_ALARM";
static char __pyx_k__COMMAND_CLASS_BASIC[] = "COMMAND_CLASS_BASIC";
static char __pyx_k__COMMAND_CLASS_CLOCK[] = "COMMAND_CLASS_CLOCK";
static char __pyx_k__COMMAND_CLASS_METER[] = "COMMAND_CLASS_METER";
static char __pyx_k__GetControllerNodeId[] = "GetControllerNodeId";
static char __pyx_k__GetDriverStatistics[] = "GetDriverStatistics";
static char __pyx_k__IsNodeBeamingDevice[] = "IsNodeBeamingDevice";
static char __pyx_k__IsNodeRoutingDevice[] = "IsNodeRoutingDevice";
static char __pyx_k__IsPrimaryController[] = "IsPrimaryController";
static char __pyx_k__LogDriverStatistics[] = "LogDriverStatistics";
static char __pyx_k__NodeQueriesComplete[] = "NodeQueriesComplete";
static char __pyx_k__PyControllerCommand[] = "PyControllerCommand";
static char __pyx_k__PyNotificationCodes[] = "PyNotificationCodes";
static char __pyx_k__SceneGetValueAsBool[] = "SceneGetValueAsBool";
static char __pyx_k__SceneGetValueAsByte[] = "SceneGetValueAsByte";
static char __pyx_k__SendNodeInformation[] = "SendNodeInformation";
static char __pyx_k__TransferPrimaryRole[] = "TransferPrimaryRole";
static char __pyx_k___controllerCallback[] = "_controllerCallback";
static char __pyx_k__lastReceivedMessage[] = "lastReceivedMessage";
static char __pyx_k__m_averageRequestRTT[] = "m_averageRequestRTT";
static char __pyx_k__m_broadcastWriteCnt[] = "m_broadcastWriteCnt";
static char __pyx_k__receivedUnsolicited[] = "receivedUnsolicited";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_102;
static PyObject *__pyx_kp_s_105;
static PyObject *__pyx_kp_s_108;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_n_s_110;
static PyObject *__pyx_kp_s_112;
static PyObject *__pyx_kp_s_115;
static PyObject *__pyx_kp_s_118;
static PyObject *__pyx_kp_s_121;
static PyObject *__pyx_n_s_123;
static PyObject *__pyx_kp_s_125;
static PyObject *__pyx_kp_s_128;
static PyObject *__pyx_kp_s_131;
static PyObject *__pyx_kp_s_134;
static PyObject *__pyx_kp_s_137;
static PyObject *__pyx_n_s_14;
static PyObject *__pyx_kp_s_140;
static PyObject *__pyx_kp_s_143;
static PyObject *__pyx_kp_s_146;
static PyObject *__pyx_kp_s_149;
static PyObject *__pyx_n_s_15;
static PyObject *__pyx_kp_s_152;
static PyObject *__pyx_kp_s_155;
static PyObject *__pyx_kp_s_158;
static PyObject *__pyx_n_s_16;
static PyObject *__pyx_kp_s_161;
static PyObject *__pyx_kp_s_164;
static PyObject *__pyx_kp_s_167;
static PyObject *__pyx_n_s_17;
static PyObject *__pyx_kp_s_170;
static PyObject *__pyx_kp_s_173;
static PyObject *__pyx_kp_s_176;
static PyObject *__pyx_kp_s_179;
static PyObject *__pyx_n_s_18;
static PyObject *__pyx_kp_s_182;
static PyObject *__pyx_kp_s_185;
static PyObject *__pyx_kp_s_188;
static PyObject *__pyx_n_s_19;
static PyObject *__pyx_kp_s_191;
static PyObject *__pyx_kp_s_194;
static PyObject *__pyx_kp_s_197;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_n_s_20;
static PyObject *__pyx_kp_s_200;
static PyObject *__pyx_kp_s_203;
static PyObject *__pyx_kp_s_206;
static PyObject *__pyx_kp_s_209;
static PyObject *__pyx_n_s_21;
static PyObject *__pyx_kp_s_212;
static PyObject *__pyx_kp_s_215;
static PyObject *__pyx_kp_s_218;
static PyObject *__pyx_n_s_22;
static PyObject *__pyx_kp_s_221;
static PyObject *__pyx_kp_s_224;
static PyObject *__pyx_kp_s_227;
static PyObject *__pyx_n_s_23;
static PyObject *__pyx_kp_s_234;
static PyObject *__pyx_kp_s_239;
static PyObject *__pyx_n_s_24;
static PyObject *__pyx_kp_s_242;
static PyObject *__pyx_kp_s_245;
static PyObject *__pyx_kp_s_248;
static PyObject *__pyx_n_s_25;
static PyObject *__pyx_kp_s_253;
static PyObject *__pyx_kp_s_258;
static PyObject *__pyx_n_s_26;
static PyObject *__pyx_kp_s_261;
static PyObject *__pyx_kp_s_264;
static PyObject *__pyx_n_s_266;
static PyObject *__pyx_kp_s_268;
static PyObject *__pyx_n_s_27;
static PyObject *__pyx_kp_s_271;
static PyObject *__pyx_kp_s_274;
static PyObject *__pyx_kp_s_277;
static PyObject *__pyx_n_s_28;
static PyObject *__pyx_kp_s_280;
static PyObject *__pyx_kp_s_283;
static PyObject *__pyx_n_s_285;
static PyObject *__pyx_kp_s_287;
static PyObject *__pyx_n_s_289;
static PyObject *__pyx_n_s_29;
static PyObject *__pyx_kp_s_291;
static PyObject *__pyx_kp_s_294;
static PyObject *__pyx_n_s_296;
static PyObject *__pyx_kp_s_298;
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_kp_s_30;
static PyObject *__pyx_kp_s_301;
static PyObject *__pyx_kp_s_304;
static PyObject *__pyx_kp_s_307;
static PyObject *__pyx_kp_s_310;
static PyObject *__pyx_kp_s_313;
static PyObject *__pyx_kp_s_316;
static PyObject *__pyx_kp_s_319;
static PyObject *__pyx_kp_s_32;
static PyObject *__pyx_kp_s_321;
static PyObject *__pyx_kp_s_322;
static PyObject *__pyx_kp_s_323;
static PyObject *__pyx_kp_s_324;
static PyObject *__pyx_kp_s_325;
static PyObject *__pyx_kp_s_326;
static PyObject *__pyx_kp_s_327;
static PyObject *__pyx_kp_s_328;
static PyObject *__pyx_kp_s_329;
static PyObject *__pyx_kp_s_330;
static PyObject *__pyx_kp_s_331;
static PyObject *__pyx_kp_s_332;
static PyObject *__pyx_kp_s_333;
static PyObject *__pyx_kp_s_334;
static PyObject *__pyx_kp_s_335;
static PyObject *__pyx_kp_s_336;
static PyObject *__pyx_kp_s_337;
static PyObject *__pyx_kp_s_338;
static PyObject *__pyx_kp_s_339;
static PyObject *__pyx_n_s_34;
static PyObject *__pyx_kp_s_340;
static PyObject *__pyx_n_s_341;
static PyObject *__pyx_n_s_342;
static PyObject *__pyx_n_s_343;
static PyObject *__pyx_n_s_344;
static PyObject *__pyx_n_s_345;
static PyObject *__pyx_n_s_346;
static PyObject *__pyx_n_s_347;
static PyObject *__pyx_n_s_348;
static PyObject *__pyx_n_s_349;
static PyObject *__pyx_n_s_350;
static PyObject *__pyx_n_s_351;
static PyObject *__pyx_n_s_352;
static PyObject *__pyx_n_s_353;
static PyObject *__pyx_n_s_354;
static PyObject *__pyx_n_s_355;
static PyObject *__pyx_n_s_356;
static PyObject *__pyx_n_s_357;
static PyObject *__pyx_n_s_358;
static PyObject *__pyx_n_s_359;
static PyObject *__pyx_n_s_36;
static PyObject *__pyx_n_s_360;
static PyObject *__pyx_n_s_361;
static PyObject *__pyx_n_s_362;
static PyObject *__pyx_n_s_363;
static PyObject *__pyx_n_s_364;
static PyObject *__pyx_n_s_365;
static PyObject *__pyx_n_s_366;
static PyObject *__pyx_n_s_367;
static PyObject *__pyx_n_s_368;
static PyObject *__pyx_n_s_369;
static PyObject *__pyx_n_s_37;
static PyObject *__pyx_n_s_370;
static PyObject *__pyx_n_s_371;
static PyObject *__pyx_n_s_372;
static PyObject *__pyx_n_s_373;
static PyObject *__pyx_n_s_374;
static PyObject *__pyx_n_s_375;
static PyObject *__pyx_n_s_376;
static PyObject *__pyx_n_s_377;
static PyObject *__pyx_n_s_378;
static PyObject *__pyx_n_s_379;
static PyObject *__pyx_n_s_38;
static PyObject *__pyx_n_s_380;
static PyObject *__pyx_n_s_381;
static PyObject *__pyx_n_s_382;
static PyObject *__pyx_n_s_383;
static PyObject *__pyx_n_s_384;
static PyObject *__pyx_n_s_385;
static PyObject *__pyx_n_s_386;
static PyObject *__pyx_n_s_387;
static PyObject *__pyx_n_s_388;
static PyObject *__pyx_n_s_389;
static PyObject *__pyx_n_s_39;
static PyObject *__pyx_n_s_390;
static PyObject *__pyx_n_s_391;
static PyObject *__pyx_n_s_392;
static PyObject *__pyx_n_s_393;
static PyObject *__pyx_n_s_394;
static PyObject *__pyx_n_s_395;
static PyObject *__pyx_n_s_396;
static PyObject *__pyx_n_s_397;
static PyObject *__pyx_n_s_398;
static PyObject *__pyx_n_s_399;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_n_s_40;
static PyObject *__pyx_n_s_400;
static PyObject *__pyx_n_s_401;
static PyObject *__pyx_n_s_402;
static PyObject *__pyx_n_s_403;
static PyObject *__pyx_n_s_404;
static PyObject *__pyx_n_s_405;
static PyObject *__pyx_n_s_406;
static PyObject *__pyx_n_s_407;
static PyObject *__pyx_n_s_408;
static PyObject *__pyx_n_s_409;
static PyObject *__pyx_n_s_41;
static PyObject *__pyx_n_s_410;
static PyObject *__pyx_n_s_411;
static PyObject *__pyx_n_s_412;
static PyObject *__pyx_n_s_413;
static PyObject *__pyx_n_s_414;
static PyObject *__pyx_n_s_415;
static PyObject *__pyx_n_s_416;
static PyObject *__pyx_n_s_417;
static PyObject *__pyx_n_s_418;
static PyObject *__pyx_n_s_419;
static PyObject *__pyx_n_s_42;
static PyObject *__pyx_n_s_420;
static PyObject *__pyx_kp_s_421;
static PyObject *__pyx_kp_s_422;
static PyObject *__pyx_kp_s_423;
static PyObject *__pyx_kp_s_424;
static PyObject *__pyx_kp_s_425;
static PyObject *__pyx_kp_s_426;
static PyObject *__pyx_kp_s_427;
static PyObject *__pyx_kp_s_428;
static PyObject *__pyx_kp_s_429;
static PyObject *__pyx_kp_s_430;
static PyObject *__pyx_kp_s_431;
static PyObject *__pyx_kp_s_432;
static PyObject *__pyx_kp_s_433;
static PyObject *__pyx_kp_s_434;
static PyObject *__pyx_kp_s_435;
static PyObject *__pyx_kp_s_436;
static PyObject *__pyx_kp_s_437;
static PyObject *__pyx_kp_s_438;
static PyObject *__pyx_kp_s_44;
static PyObject *__pyx_kp_s_45;
static PyObject *__pyx_kp_s_46;
static PyObject *__pyx_kp_s_48;
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_kp_s_51;
static PyObject *__pyx_kp_s_54;
static PyObject *__pyx_kp_s_57;
static PyObject *__pyx_n_s_6;
static PyObject *__pyx_kp_s_60;
static PyObject *__pyx_kp_s_63;
static PyObject *__pyx_kp_s_66;
static PyObject *__pyx_kp_s_69;
static PyObject *__pyx_n_s_7;
static PyObject *__pyx_kp_s_72;
static PyObject *__pyx_kp_s_75;
static PyObject *__pyx_kp_s_78;
static PyObject *__pyx_n_s_8;
static PyObject *__pyx_kp_s_81;
static PyObject *__pyx_kp_s_84;
static PyObject *__pyx_kp_s_87;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_kp_s_90;
static PyObject *__pyx_kp_s_93;
static PyObject *__pyx_kp_s_96;
static PyObject *__pyx_kp_s_99;
static PyObject *__pyx_n_s__ACKCnt;
static PyObject *__pyx_n_s__ACKWaiting;
static PyObject *__pyx_n_s__ActivateScene;
static PyObject *__pyx_n_s__AddAssociation;
static PyObject *__pyx_n_s__AddDevice;
static PyObject *__pyx_n_s__AddDriver;
static PyObject *__pyx_n_s__AddOptionBool;
static PyObject *__pyx_n_s__AddOptionInt;
static PyObject *__pyx_n_s__AddOptionString;
static PyObject *__pyx_n_s__AddSceneValue;
static PyObject *__pyx_n_s__AddWatcher;
static PyObject *__pyx_n_s__Alert;
static PyObject *__pyx_n_s__Alive;
static PyObject *__pyx_n_s__AllNodesQueried;
static PyObject *__pyx_n_s__Always;
static PyObject *__pyx_n_s__AssignReturnRoute;
static PyObject *__pyx_n_s__Associations;
static PyObject *__pyx_n_s__Awake;
static PyObject *__pyx_n_s__AwakeNodesQueried;
static PyObject *__pyx_n_s__Basic;
static PyObject *__pyx_n_s__Bool;
static PyObject *__pyx_n_s__Busy;
static PyObject *__pyx_n_s__Button;
static PyObject *__pyx_n_s__ButtonNotFound;
static PyObject *__pyx_n_s__ButtonOff;
static PyObject *__pyx_n_s__ButtonOn;
static PyObject *__pyx_n_s__Byte;
static PyObject *__pyx_n_s__CALLBACK_DESC;
static PyObject *__pyx_n_s__CANCnt;
static PyObject *__pyx_n_s__COMMAND_CLASS_ALARM;
static PyObject *__pyx_n_s__COMMAND_CLASS_BASIC;
static PyObject *__pyx_n_s__COMMAND_CLASS_CLOCK;
static PyObject *__pyx_n_s__COMMAND_CLASS_DESC;
static PyObject *__pyx_n_s__COMMAND_CLASS_HAIL;
static PyObject *__pyx_n_s__COMMAND_CLASS_KICK;
static PyObject *__pyx_n_s__COMMAND_CLASS_LOCK;
static PyObject *__pyx_n_s__COMMAND_CLASS_MARK;
static PyObject *__pyx_n_s__COMMAND_CLASS_METER;
static PyObject *__pyx_n_s__COMMAND_CLASS_TIME;
static PyObject *__pyx_n_s__Cancel;
static PyObject *__pyx_n_s__ClearSwitchPoints;
static PyObject *__pyx_n_s__Complete;
static PyObject *__pyx_n_s__Completed;
static PyObject *__pyx_n_s__Config;
static PyObject *__pyx_n_s__Configuration;
static PyObject *__pyx_n_s__CreateButton;
static PyObject *__pyx_n_s__CreateNewPrimary;
static PyObject *__pyx_n_s__CreateScene;
static PyObject *__pyx_n_s__Dead;
static PyObject *__pyx_n_s__Debug;
static PyObject *__pyx_n_s__Decimal;
static PyObject *__pyx_n_s__DeleteButton;
static PyObject *__pyx_n_s__Detail;
static PyObject *__pyx_n_s__DisablePoll;
static PyObject *__pyx_n_s__Disabled;
static PyObject *__pyx_n_s__DriverFailed;
static PyObject *__pyx_n_s__DriverReady;
static PyObject *__pyx_n_s__DriverReset;
static PyObject *__pyx_n_s__Dynamic;
static PyObject *__pyx_n_s__EnablePoll;
static PyObject *__pyx_n_s__EnumWithDoc;
static PyObject *__pyx_n_s__Error;
static PyObject *__pyx_n_s__Failed;
static PyObject *__pyx_n_s__Fatal;
static PyObject *__pyx_n_s__GetAllScenes;
static PyObject *__pyx_n_s__GetAssociations;
static PyObject *__pyx_n_s__GetButtonId;
static PyObject *__pyx_n_s__GetCommandClassId;
static PyObject *__pyx_n_s__GetControllerNodeId;
static PyObject *__pyx_n_s__GetControllerPath;
static PyObject *__pyx_n_s__GetDriverStatistics;
static PyObject *__pyx_n_s__GetEvent;
static PyObject *__pyx_n_s__GetGenre;
static PyObject *__pyx_n_s__GetGroupIdx;
static PyObject *__pyx_n_s__GetGroupLabel;
static PyObject *__pyx_n_s__GetHomeId;
static PyObject *__pyx_n_s__GetId;
static PyObject *__pyx_n_s__GetIndex;
static PyObject *__pyx_n_s__GetInstance;
static PyObject *__pyx_n_s__GetLibraryTypeName;
static PyObject *__pyx_n_s__GetLibraryVersion;
static PyObject *__pyx_n_s__GetMaxAssociations;
static PyObject *__pyx_n_s__GetNodeBasic;
static PyObject *__pyx_n_s__GetNodeGeneric;
static PyObject *__pyx_n_s__GetNodeId;
static PyObject *__pyx_n_s__GetNodeLocation;
static PyObject *__pyx_n_s__GetNodeMaxBaudRate;
static PyObject *__pyx_n_s__GetNodeName;
static PyObject *__pyx_n_s__GetNodeNeighbors;
static PyObject *__pyx_n_s__GetNodeProductId;
static PyObject *__pyx_n_s__GetNodeProductName;
static PyObject *__pyx_n_s__GetNodeProductType;
static PyObject *__pyx_n_s__GetNodeQueryStage;
static PyObject *__pyx_n_s__GetNodeSecurity;
static PyObject *__pyx_n_s__GetNodeSpecific;
static PyObject *__pyx_n_s__GetNodeStatistics;
static PyObject *__pyx_n_s__GetNodeType;
static PyObject *__pyx_n_s__GetNodeVersion;
static PyObject *__pyx_n_s__GetNotification;
static PyObject *__pyx_n_s__GetNumGroups;
static PyObject *__pyx_n_s__GetNumScenes;
static PyObject *__pyx_n_s__GetNumSwitchPoints;
static PyObject *__pyx_n_s__GetPollIntensity;
static PyObject *__pyx_n_s__GetPollInterval;
static PyObject *__pyx_n_s__GetSceneId;
static PyObject *__pyx_n_s__GetSceneLabel;
static PyObject *__pyx_n_s__GetSendQueueCount;
static PyObject *__pyx_n_s__GetSwitchPoint;
static PyObject *__pyx_n_s__GetType;
static PyObject *__pyx_n_s__GetValueAsBool;
static PyObject *__pyx_n_s__GetValueAsByte;
static PyObject *__pyx_n_s__GetValueAsFloat;
static PyObject *__pyx_n_s__GetValueAsInt;
static PyObject *__pyx_n_s__GetValueAsShort;
static PyObject *__pyx_n_s__GetValueAsString;
static PyObject *__pyx_n_s__GetValueHelp;
static PyObject *__pyx_n_s__GetValueID;
static PyObject *__pyx_n_s__GetValueLabel;
static PyObject *__pyx_n_s__GetValueListItems;
static PyObject *__pyx_n_s__GetValueMax;
static PyObject *__pyx_n_s__GetValueMin;
static PyObject *__pyx_n_s__GetValueUnits;
static PyObject *__pyx_n_s__Group;
static PyObject *__pyx_n_s__HasNodeFailed;
static PyObject *__pyx_n_s__HealNetwork;
static PyObject *__pyx_n_s__HealNetworkNode;
static PyObject *__pyx_n_s__Hid;
static PyObject *__pyx_n_s__InProgress;
static PyObject *__pyx_n_s__Info;
static PyObject *__pyx_n_s__Instances;
static PyObject *__pyx_n_s__Int;
static PyObject *__pyx_n_s__Internal;
static PyObject *__pyx_n_s__IsBridgeController;
static PyObject *__pyx_n_s__IsNodeAwake;
static PyObject *__pyx_n_s__IsNodeBeamingDevice;
static PyObject *__pyx_n_s__IsNodeFailed;
static PyObject *__pyx_n_s__IsNodeInfoReceived;
static PyObject *__pyx_n_s__IsNodeRoutingDevice;
static PyObject *__pyx_n_s__IsPrimary;
static PyObject *__pyx_n_s__IsPrimaryController;
static PyObject *__pyx_n_s__IsValueReadOnly;
static PyObject *__pyx_n_s__IsValueSet;
static PyObject *__pyx_n_s__IsValueWriteOnly;
static PyObject *__pyx_n_s__List;
static PyObject *__pyx_n_s__Lock;
static PyObject *__pyx_n_s__LogDriverStatistics;
static PyObject *__pyx_n_s__MsgComplete;
static PyObject *__pyx_n_s__NAKCnt;
static PyObject *__pyx_n_s__Neighbors;
static PyObject *__pyx_n_s__NoOperation;
static PyObject *__pyx_n_s__NodeAdded;
static PyObject *__pyx_n_s__NodeEvent;
static PyObject *__pyx_n_s__NodeFailed;
static PyObject *__pyx_n_s__NodeInfo;
static PyObject *__pyx_n_s__NodeNaming;
static PyObject *__pyx_n_s__NodeNew;
static PyObject *__pyx_n_s__NodeNotFound;
static PyObject *__pyx_n_s__NodeOK;
static PyObject *__pyx_n_s__NodeProtocolInfo;
static PyObject *__pyx_n_s__NodeQueriesComplete;
static PyObject *__pyx_n_s__NodeRemoved;
static PyObject *__pyx_n_s__None;
static PyObject *__pyx_n_s__Normal;
static PyObject *__pyx_n_s__NotBridge;
static PyObject *__pyx_n_s__NotFound;
static PyObject *__pyx_n_s__NotPrimary;
static PyObject *__pyx_n_s__NotSUC;
static PyObject *__pyx_n_s__NotSecondary;
static PyObject *__pyx_n_s__Notification;
static PyObject *__pyx_n_s__OOFCnt;
static PyObject *__pyx_n_s__Overflow;
static PyObject *__pyx_n_s__PYLIBRARY;
static PyObject *__pyx_n_s__PollingDisabled;
static PyObject *__pyx_n_s__PollingEnabled;
static PyObject *__pyx_n_s__PressButton;
static PyObject *__pyx_n_s__Probe;
static PyObject *__pyx_n_s__Probe1;
static PyObject *__pyx_n_s__ProtocolInfo;
static PyObject *__pyx_n_s__PyControllerCommand;
static PyObject *__pyx_n_s__PyControllerError;
static PyObject *__pyx_n_s__PyControllerState;
static PyObject *__pyx_n_s__PyGenres;
static PyObject *__pyx_n_s__PyLogLevels;
static PyObject *__pyx_n_s__PyNotificationCodes;
static PyObject *__pyx_n_s__PyNotifications;
static PyObject *__pyx_n_s__PyStatDriver;
static PyObject *__pyx_n_s__PyValueTypes;
static PyObject *__pyx_n_s__RefreshNodeInfo;
static PyObject *__pyx_n_s__RefreshValue;
static PyObject *__pyx_n_s__ReleaseButton;
static PyObject *__pyx_n_s__RemoveAllScenes;
static PyObject *__pyx_n_s__RemoveAssociation;
static PyObject *__pyx_n_s__RemoveDevice;
static PyObject *__pyx_n_s__RemoveDriver;
static PyObject *__pyx_n_s__RemoveFailedNode;
static PyObject *__pyx_n_s__RemoveScene;
static PyObject *__pyx_n_s__RemoveSceneValue;
static PyObject *__pyx_n_s__RemoveSwitchPoint;
static PyObject *__pyx_n_s__RemoveWatcher;
static PyObject *__pyx_n_s__ReplaceFailedNode;
static PyObject *__pyx_n_s__ReplicationSend;
static PyObject *__pyx_n_s__RequestConfigParam;
static PyObject *__pyx_n_s__RequestNodeDynamic;
static PyObject *__pyx_n_s__RequestNodeState;
static PyObject *__pyx_n_s__ResetController;
static PyObject *__pyx_n_s__SOFCnt;
static PyObject *__pyx_n_s__SceneEvent;
static PyObject *__pyx_n_s__SceneExists;
static PyObject *__pyx_n_s__SceneGetValueAsBool;
static PyObject *__pyx_n_s__SceneGetValueAsByte;
static PyObject *__pyx_n_s__SceneGetValueAsInt;
static PyObject *__pyx_n_s__SceneGetValues;
static PyObject *__pyx_n_s__Schedule;
static PyObject *__pyx_n_s__SendNodeInformation;
static PyObject *__pyx_n_s__Serial;
static PyObject *__pyx_n_s__Session;
static PyObject *__pyx_n_s__SetConfigParam;
static PyObject *__pyx_n_s__SetNodeLevel;
static PyObject *__pyx_n_s__SetNodeLocation;
static PyObject *__pyx_n_s__SetNodeName;
static PyObject *__pyx_n_s__SetNodeOff;
static PyObject *__pyx_n_s__SetNodeOn;
static PyObject *__pyx_n_s__SetNodeProductName;
static PyObject *__pyx_n_s__SetPollIntensity;
static PyObject *__pyx_n_s__SetPollInterval;
static PyObject *__pyx_n_s__SetSceneLabel;
static PyObject *__pyx_n_s__SetSceneValue;
static PyObject *__pyx_n_s__SetSwitchPoint;
static PyObject *__pyx_n_s__SetValue;
static PyObject *__pyx_n_s__SetValueHelp;
static PyObject *__pyx_n_s__SetValueLabel;
static PyObject *__pyx_n_s__SetValueUnits;
static PyObject *__pyx_n_s__Short;
static PyObject *__pyx_n_s__Sleep;
static PyObject *__pyx_n_s__Sleeping;
static PyObject *__pyx_n_s__SoftReset;
static PyObject *__pyx_n_s__Starting;
static PyObject *__pyx_n_s__Static;
static PyObject *__pyx_n_s__StreamDetail;
static PyObject *__pyx_n_s__String;
static PyObject *__pyx_n_s__SwitchAllOff;
static PyObject *__pyx_n_s__SwitchAllOn;
static PyObject *__pyx_n_s__System;
static PyObject *__pyx_n_s__TestNetwork;
static PyObject *__pyx_n_s__TestNetworkNode;
static PyObject *__pyx_n_s__Timeout;
static PyObject *__pyx_n_s__TransferPrimaryRole;
static PyObject *__pyx_n_s__Unknown;
static PyObject *__pyx_n_s__User;
static PyObject *__pyx_n_s__ValueAdded;
static PyObject *__pyx_n_s__ValueChanged;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s__ValueRefreshed;
static PyObject *__pyx_n_s__ValueRemoved;
static PyObject *__pyx_n_s__Versions;
static PyObject *__pyx_n_s__Waiting;
static PyObject *__pyx_n_s__WakeUp;
static PyObject *__pyx_n_s__Warning;
static PyObject *__pyx_n_s__WriteConfig;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___controllerCallback;
static PyObject *__pyx_n_s___watcherCallback;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__add;
static PyObject *__pyx_n_s__append;
static PyObject *__pyx_n_s__arg;
static PyObject *__pyx_n_s__at;
static PyObject *__pyx_n_s__averageRequestRTT;
static PyObject *__pyx_n_s__averageResponseRTT;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__back;
static PyObject *__pyx_n_s__badChecksum;
static PyObject *__pyx_n_s__badroutes;
static PyObject *__pyx_n_s__broadcastReadCnt;
static PyObject *__pyx_n_s__broadcastWriteCnt;
static PyObject *__pyx_n_s__buttonId;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__callbacks;
static PyObject *__pyx_n_s__ccData;
static PyObject *__pyx_n_s__className;
static PyObject *__pyx_n_s__classVersion;
static PyObject *__pyx_n_s__clear;
static PyObject *__pyx_n_s__command;
static PyObject *__pyx_n_s__commandClass;
static PyObject *__pyx_n_s__commandClassId;
static PyObject *__pyx_n_s__configPath;
static PyObject *__pyx_n_s__count;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__doc;
static PyObject *__pyx_n_s__dropped;
static PyObject *__pyx_n_s__empty;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__error;
static PyObject *__pyx_n_s__error_msg;
static PyObject *__pyx_n_s__event;
static PyObject *__pyx_n_s__exists;
static PyObject *__pyx_n_s__find;
static PyObject *__pyx_n_s__genre;
static PyObject *__pyx_n_s__groupIdx;
static PyObject *__pyx_n_s__groupidx;
static PyObject *__pyx_n_s__help;
static PyObject *__pyx_n_s__highPower;
static PyObject *__pyx_n_s__homeId;
static PyObject *__pyx_n_s__homeid;
static PyObject *__pyx_n_s__hours;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__idx;
static PyObject *__pyx_n_s__index;
static PyObject *__pyx_n_s__insert;
static PyObject *__pyx_n_s__instance;
static PyObject *__pyx_n_s__intensity;
static PyObject *__pyx_n_s__isPolled;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__label;
static PyObject *__pyx_n_s__lastReceivedMessage;
static PyObject *__pyx_n_s__lastRequestRTT;
static PyObject *__pyx_n_s__lastResponseRTT;
static PyObject *__pyx_n_s__level;
static PyObject *__pyx_n_s__libopenzwave;
static PyObject *__pyx_n_s__listdir;
static PyObject *__pyx_n_s__location;
static PyObject *__pyx_n_s__m_ACKCnt;
static PyObject *__pyx_n_s__m_ACKWaiting;
static PyObject *__pyx_n_s__m_CANCnt;
static PyObject *__pyx_n_s__m_NAKCnt;
static PyObject *__pyx_n_s__m_OOFCnt;
static PyObject *__pyx_n_s__m_SOFCnt;
static PyObject *__pyx_n_s__m_averageRequestRTT;
static PyObject *__pyx_n_s__m_badChecksum;
static PyObject *__pyx_n_s__m_badroutes;
static PyObject *__pyx_n_s__m_broadcastReadCnt;
static PyObject *__pyx_n_s__m_broadcastWriteCnt;
static PyObject *__pyx_n_s__m_callbacks;
static PyObject *__pyx_n_s__m_ccData;
static PyObject *__pyx_n_s__m_commandClassId;
static PyObject *__pyx_n_s__m_dropped;
static PyObject *__pyx_n_s__m_lastRequestRTT;
static PyObject *__pyx_n_s__m_lastResponseRTT;
static PyObject *__pyx_n_s__m_netbusy;
static PyObject *__pyx_n_s__m_noack;
static PyObject *__pyx_n_s__m_nondelivery;
static PyObject *__pyx_n_s__m_quality;
static PyObject *__pyx_n_s__m_readAborts;
static PyObject *__pyx_n_s__m_readCnt;
static PyObject *__pyx_n_s__m_receivedCnt;
static PyObject *__pyx_n_s__m_receivedDups;
static PyObject *__pyx_n_s__m_receivedTS;
static PyObject *__pyx_n_s__m_retries;
static PyObject *__pyx_n_s__m_routedbusy;
static PyObject *__pyx_n_s__m_sentCnt;
static PyObject *__pyx_n_s__m_sentFailed;
static PyObject *__pyx_n_s__m_sentTS;
static PyObject *__pyx_n_s__m_writeCnt;
static PyObject *__pyx_n_s__manager;
static PyObject *__pyx_n_s__manufacturerName;
static PyObject *__pyx_n_s__message;
static PyObject *__pyx_n_s__milliseconds;
static PyObject *__pyx_n_s__minutes;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__netbusy;
static PyObject *__pyx_n_s__noack;
static PyObject *__pyx_n_s__nodeId;
static PyObject *__pyx_n_s__nodeid;
static PyObject *__pyx_n_s__nondelivery;
static PyObject *__pyx_n_s__notificationCode;
static PyObject *__pyx_n_s__notificationType;
static PyObject *__pyx_n_s__options;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__param;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__pop_back;
static PyObject *__pyx_n_s__productName;
static PyObject *__pyx_n_s__pythonfunc;
static PyObject *__pyx_n_s__quality;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__readAborts;
static PyObject *__pyx_n_s__readCnt;
static PyObject *__pyx_n_s__readOnly;
static PyObject *__pyx_n_s__receivedCnt;
static PyObject *__pyx_n_s__receivedDups;
static PyObject *__pyx_n_s__receivedTS;
static PyObject *__pyx_n_s__receivedUnsolicited;
static PyObject *__pyx_n_s__retries;
static PyObject *__pyx_n_s__routedbusy;
static PyObject *__pyx_n_s__sceneId;
static PyObject *__pyx_n_s__sceneid;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__sentCnt;
static PyObject *__pyx_n_s__sentFailed;
static PyObject *__pyx_n_s__sentTS;
static PyObject *__pyx_n_s__setDoc;
static PyObject *__pyx_n_s__setback;
static PyObject *__pyx_n_s__siz;
static PyObject *__pyx_n_s__state;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__targetnodeid;
static PyObject *__pyx_n_s__type;
static PyObject *__pyx_n_s__unit;
static PyObject *__pyx_n_s__units;
static PyObject *__pyx_n_s__upNodeRoute;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__valueId;
static PyObject *__pyx_n_s__writeCnt;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_34;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_36;
static PyObject *__pyx_int_37;
static PyObject *__pyx_int_38;
static PyObject *__pyx_int_39;
static PyObject *__pyx_int_40;
static PyObject *__pyx_int_41;
static PyObject *__pyx_int_42;
static PyObject *__pyx_int_43;
static PyObject *__pyx_int_44;
static PyObject *__pyx_int_45;
static PyObject *__pyx_int_46;
static PyObject *__pyx_int_47;
static PyObject *__pyx_int_48;
static PyObject *__pyx_int_49;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_51;
static PyObject *__pyx_int_52;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_56;
static PyObject *__pyx_int_60;
static PyObject *__pyx_int_61;
static PyObject *__pyx_int_62;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_66;
static PyObject *__pyx_int_67;
static PyObject *__pyx_int_68;
static PyObject *__pyx_int_69;
static PyObject *__pyx_int_70;
static PyObject *__pyx_int_71;
static PyObject *__pyx_int_76;
static PyObject *__pyx_int_78;
static PyObject *__pyx_int_80;
static PyObject *__pyx_int_81;
static PyObject *__pyx_int_96;
static PyObject *__pyx_int_97;
static PyObject *__pyx_int_98;
static PyObject *__pyx_int_99;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_112;
static PyObject *__pyx_int_113;
static PyObject *__pyx_int_114;
static PyObject *__pyx_int_115;
static PyObject *__pyx_int_117;
static PyObject *__pyx_int_118;
static PyObject *__pyx_int_119;
static PyObject *__pyx_int_120;
static PyObject *__pyx_int_121;
static PyObject *__pyx_int_122;
static PyObject *__pyx_int_123;
static PyObject *__pyx_int_124;
static PyObject *__pyx_int_125;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_129;
static PyObject *__pyx_int_130;
static PyObject *__pyx_int_131;
static PyObject *__pyx_int_132;
static PyObject *__pyx_int_133;
static PyObject *__pyx_int_134;
static PyObject *__pyx_int_135;
static PyObject *__pyx_int_136;
static PyObject *__pyx_int_137;
static PyObject *__pyx_int_138;
static PyObject *__pyx_int_139;
static PyObject *__pyx_int_140;
static PyObject *__pyx_int_141;
static PyObject *__pyx_int_142;
static PyObject *__pyx_int_143;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_145;
static PyObject *__pyx_int_146;
static PyObject *__pyx_int_147;
static PyObject *__pyx_int_148;
static PyObject *__pyx_int_149;
static PyObject *__pyx_int_150;
static PyObject *__pyx_int_151;
static PyObject *__pyx_int_152;
static PyObject *__pyx_int_153;
static PyObject *__pyx_int_154;
static PyObject *__pyx_int_155;
static PyObject *__pyx_int_156;
static PyObject *__pyx_int_157;
static PyObject *__pyx_int_158;
static PyObject *__pyx_int_239;
static PyObject *__pyx_int_240;
static PyObject *__pyx_int_255;
static PyObject *__pyx_k_12;
static PyObject *__pyx_k_13;
static PyObject *__pyx_k_35;
static PyObject *__pyx_k_tuple_31;
static PyObject *__pyx_k_tuple_33;
static PyObject *__pyx_k_tuple_47;
static PyObject *__pyx_k_tuple_49;
static PyObject *__pyx_k_tuple_50;
static PyObject *__pyx_k_tuple_52;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_55;
static PyObject *__pyx_k_tuple_56;
static PyObject *__pyx_k_tuple_58;
static PyObject *__pyx_k_tuple_59;
static PyObject *__pyx_k_tuple_61;
static PyObject *__pyx_k_tuple_62;
static PyObject *__pyx_k_tuple_64;
static PyObject *__pyx_k_tuple_65;
static PyObject *__pyx_k_tuple_67;
static PyObject *__pyx_k_tuple_68;
static PyObject *__pyx_k_tuple_70;
static PyObject *__pyx_k_tuple_71;
static PyObject *__pyx_k_tuple_73;
static PyObject *__pyx_k_tuple_74;
static PyObject *__pyx_k_tuple_76;
static PyObject *__pyx_k_tuple_77;
static PyObject *__pyx_k_tuple_79;
static PyObject *__pyx_k_tuple_80;
static PyObject *__pyx_k_tuple_82;
static PyObject *__pyx_k_tuple_83;
static PyObject *__pyx_k_tuple_85;
static PyObject *__pyx_k_tuple_86;
static PyObject *__pyx_k_tuple_88;
static PyObject *__pyx_k_tuple_89;
static PyObject *__pyx_k_tuple_91;
static PyObject *__pyx_k_tuple_92;
static PyObject *__pyx_k_tuple_94;
static PyObject *__pyx_k_tuple_95;
static PyObject *__pyx_k_tuple_97;
static PyObject *__pyx_k_tuple_98;
static PyObject *__pyx_k_tuple_100;
static PyObject *__pyx_k_tuple_101;
static PyObject *__pyx_k_tuple_103;
static PyObject *__pyx_k_tuple_104;
static PyObject *__pyx_k_tuple_106;
static PyObject *__pyx_k_tuple_107;
static PyObject *__pyx_k_tuple_109;
static PyObject *__pyx_k_tuple_111;
static PyObject *__pyx_k_tuple_113;
static PyObject *__pyx_k_tuple_114;
static PyObject *__pyx_k_tuple_116;
static PyObject *__pyx_k_tuple_117;
static PyObject *__pyx_k_tuple_119;
static PyObject *__pyx_k_tuple_120;
static PyObject *__pyx_k_tuple_122;
static PyObject *__pyx_k_tuple_124;
static PyObject *__pyx_k_tuple_126;
static PyObject *__pyx_k_tuple_127;
static PyObject *__pyx_k_tuple_129;
static PyObject *__pyx_k_tuple_130;
static PyObject *__pyx_k_tuple_132;
static PyObject *__pyx_k_tuple_133;
static PyObject *__pyx_k_tuple_135;
static PyObject *__pyx_k_tuple_136;
static PyObject *__pyx_k_tuple_138;
static PyObject *__pyx_k_tuple_139;
static PyObject *__pyx_k_tuple_141;
static PyObject *__pyx_k_tuple_142;
static PyObject *__pyx_k_tuple_144;
static PyObject *__pyx_k_tuple_145;
static PyObject *__pyx_k_tuple_147;
static PyObject *__pyx_k_tuple_148;
static PyObject *__pyx_k_tuple_150;
static PyObject *__pyx_k_tuple_151;
static PyObject *__pyx_k_tuple_153;
static PyObject *__pyx_k_tuple_154;
static PyObject *__pyx_k_tuple_156;
static PyObject *__pyx_k_tuple_157;
static PyObject *__pyx_k_tuple_159;
static PyObject *__pyx_k_tuple_160;
static PyObject *__pyx_k_tuple_162;
static PyObject *__pyx_k_tuple_163;
static PyObject *__pyx_k_tuple_165;
static PyObject *__pyx_k_tuple_166;
static PyObject *__pyx_k_tuple_168;
static PyObject *__pyx_k_tuple_169;
static PyObject *__pyx_k_tuple_171;
static PyObject *__pyx_k_tuple_172;
static PyObject *__pyx_k_tuple_174;
static PyObject *__pyx_k_tuple_175;
static PyObject *__pyx_k_tuple_177;
static PyObject *__pyx_k_tuple_178;
static PyObject *__pyx_k_tuple_180;
static PyObject *__pyx_k_tuple_181;
static PyObject *__pyx_k_tuple_183;
static PyObject *__pyx_k_tuple_184;
static PyObject *__pyx_k_tuple_186;
static PyObject *__pyx_k_tuple_187;
static PyObject *__pyx_k_tuple_189;
static PyObject *__pyx_k_tuple_190;
static PyObject *__pyx_k_tuple_192;
static PyObject *__pyx_k_tuple_193;
static PyObject *__pyx_k_tuple_195;
static PyObject *__pyx_k_tuple_196;
static PyObject *__pyx_k_tuple_198;
static PyObject *__pyx_k_tuple_199;
static PyObject *__pyx_k_tuple_201;
static PyObject *__pyx_k_tuple_202;
static PyObject *__pyx_k_tuple_204;
static PyObject *__pyx_k_tuple_205;
static PyObject *__pyx_k_tuple_207;
static PyObject *__pyx_k_tuple_208;
static PyObject *__pyx_k_tuple_210;
static PyObject *__pyx_k_tuple_211;
static PyObject *__pyx_k_tuple_213;
static PyObject *__pyx_k_tuple_214;
static PyObject *__pyx_k_tuple_216;
static PyObject *__pyx_k_tuple_217;
static PyObject *__pyx_k_tuple_219;
static PyObject *__pyx_k_tuple_220;
static PyObject *__pyx_k_tuple_222;
static PyObject *__pyx_k_tuple_223;
static PyObject *__pyx_k_tuple_225;
static PyObject *__pyx_k_tuple_226;
static PyObject *__pyx_k_tuple_228;
static PyObject *__pyx_k_tuple_229;
static PyObject *__pyx_k_tuple_230;
static PyObject *__pyx_k_tuple_231;
static PyObject *__pyx_k_tuple_232;
static PyObject *__pyx_k_tuple_233;
static PyObject *__pyx_k_tuple_235;
static PyObject *__pyx_k_tuple_236;
static PyObject *__pyx_k_tuple_237;
static PyObject *__pyx_k_tuple_238;
static PyObject *__pyx_k_tuple_240;
static PyObject *__pyx_k_tuple_241;
static PyObject *__pyx_k_tuple_243;
static PyObject *__pyx_k_tuple_244;
static PyObject *__pyx_k_tuple_246;
static PyObject *__pyx_k_tuple_247;
static PyObject *__pyx_k_tuple_249;
static PyObject *__pyx_k_tuple_250;
static PyObject *__pyx_k_tuple_251;
static PyObject *__pyx_k_tuple_252;
static PyObject *__pyx_k_tuple_254;
static PyObject *__pyx_k_tuple_255;
static PyObject *__pyx_k_tuple_256;
static PyObject *__pyx_k_tuple_257;
static PyObject *__pyx_k_tuple_259;
static PyObject *__pyx_k_tuple_260;
static PyObject *__pyx_k_tuple_262;
static PyObject *__pyx_k_tuple_263;
static PyObject *__pyx_k_tuple_265;
static PyObject *__pyx_k_tuple_267;
static PyObject *__pyx_k_tuple_269;
static PyObject *__pyx_k_tuple_270;
static PyObject *__pyx_k_tuple_272;
static PyObject *__pyx_k_tuple_273;
static PyObject *__pyx_k_tuple_275;
static PyObject *__pyx_k_tuple_276;
static PyObject *__pyx_k_tuple_278;
static PyObject *__pyx_k_tuple_279;
static PyObject *__pyx_k_tuple_281;
static PyObject *__pyx_k_tuple_282;
static PyObject *__pyx_k_tuple_284;
static PyObject *__pyx_k_tuple_286;
static PyObject *__pyx_k_tuple_288;
static PyObject *__pyx_k_tuple_290;
static PyObject *__pyx_k_tuple_292;
static PyObject *__pyx_k_tuple_293;
static PyObject *__pyx_k_tuple_295;
static PyObject *__pyx_k_tuple_297;
static PyObject *__pyx_k_tuple_299;
static PyObject *__pyx_k_tuple_300;
static PyObject *__pyx_k_tuple_302;
static PyObject *__pyx_k_tuple_303;
static PyObject *__pyx_k_tuple_305;
static PyObject *__pyx_k_tuple_306;
static PyObject *__pyx_k_tuple_308;
static PyObject *__pyx_k_tuple_309;
static PyObject *__pyx_k_tuple_311;
static PyObject *__pyx_k_tuple_312;
static PyObject *__pyx_k_tuple_314;
static PyObject *__pyx_k_tuple_315;
static PyObject *__pyx_k_tuple_317;
static PyObject *__pyx_k_tuple_318;
static PyObject *__pyx_k_tuple_320;
static PyObject *__pyx_k_tuple_439;

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":63
 * 
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         return self
 */

static PyObject *__pyx_pf_12libopenzwave_11EnumWithDoc_0setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_12libopenzwave_11EnumWithDoc_0setDoc = {__Pyx_NAMESTR("setDoc"), (PyCFunction)__pyx_pf_12libopenzwave_11EnumWithDoc_0setDoc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_12libopenzwave_11EnumWithDoc_0setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_doc = 0;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__doc,0};
  __Pyx_RefNannySetupContext("setDoc");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__doc);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setDoc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_doc = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_doc = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.EnumWithDoc.setDoc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":64
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):
 *         self.doc = doc             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__doc, __pyx_v_doc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":65
 *     def setDoc(self, doc):
 *         self.doc = doc
 *         return self             # <<<<<<<<<<<<<<
 * 
 * PyNotifications = [
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.EnumWithDoc.setDoc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":221
 * cdef map[uint64_t, ValueID] values_map
 * 
 * cdef getValueFromType(Manager *manager, valueId):             # <<<<<<<<<<<<<<
 *     """
 *     Translate a value in the right type
 */

static  PyObject *__pyx_f_12libopenzwave_getValueFromType(OpenZWave::Manager *__pyx_v_manager, PyObject *__pyx_v_valueId) {
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  PyObject *__pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("getValueFromType");
  __pyx_v_ret = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":232
 *     cdef string type_string
 *     cdef vector[string] vect
 *     ret = None             # <<<<<<<<<<<<<<
 *     if values_map.find(valueId) != values_map.end():
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF(__pyx_v_ret);
  __pyx_v_ret = Py_None;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":233
 *     cdef vector[string] vect
 *     ret = None
 *     if values_map.find(valueId) != values_map.end():             # <<<<<<<<<<<<<<
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 *         if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":234
 *     ret = None
 *     if values_map.find(valueId) != values_map.end():
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]             # <<<<<<<<<<<<<<
 *         if datatype == "Bool":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":235
 *     if values_map.find(valueId) != values_map.end():
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 *         if datatype == "Bool":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":236
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 *         if datatype == "Bool":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)             # <<<<<<<<<<<<<<
 *             ret = type_bool if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsBool(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_bool));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":237
 *         if datatype == "Bool":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Byte":
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":238
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Byte":
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":239
 *             ret = type_bool if cret else None
 *             return ret
 *         elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *             ret = type_byte if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":240
 *             return ret
 *         elif datatype == "Byte":
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)             # <<<<<<<<<<<<<<
 *             ret = type_byte if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsByte(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_byte));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":241
 *         elif datatype == "Byte":
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *             ret = type_byte if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Decimal":
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_type_byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":242
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *             ret = type_byte if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Decimal":
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":243
 *             ret = type_byte if cret else None
 *             return ret
 *         elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *             ret = type_float if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":244
 *             return ret
 *         elif datatype == "Decimal":
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)             # <<<<<<<<<<<<<<
 *             ret = type_float if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsFloat(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_float));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":245
 *         elif datatype == "Decimal":
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *             ret = type_float if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Int":
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_type_float); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":246
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *             ret = type_float if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Int":
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":247
 *             ret = type_float if cret else None
 *             return ret
 *         elif datatype == "Int":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *             ret = type_int if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":248
 *             return ret
 *         elif datatype == "Int":
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)             # <<<<<<<<<<<<<<
 *             ret = type_int if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsInt(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_int));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":249
 *         elif datatype == "Int":
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *             ret = type_int if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Short":
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = __Pyx_PyInt_to_py_int32_t(__pyx_v_type_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":250
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *             ret = type_int if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Short":
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":251
 *             ret = type_int if cret else None
 *             return ret
 *         elif datatype == "Short":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *             ret = type_short if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":252
 *             return ret
 *         elif datatype == "Short":
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)             # <<<<<<<<<<<<<<
 *             ret = type_short if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsShort(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_short));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":253
 *         elif datatype == "Short":
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *             ret = type_short if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "String":
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = __Pyx_PyInt_to_py_int16_t(__pyx_v_type_short); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":254
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *             ret = type_short if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "String":
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":255
 *             ret = type_short if cret else None
 *             return ret
 *         elif datatype == "String":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":256
 *             return ret
 *         elif datatype == "String":
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *             ret = type_string.c_str() if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsString(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":257
 *         elif datatype == "String":
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Button":
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":258
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Button":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":259
 *             ret = type_string.c_str() if cret else None
 *             return ret
 *         elif datatype == "Button":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Button), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":260
 *             return ret
 *         elif datatype == "Button":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)             # <<<<<<<<<<<<<<
 *             ret = type_bool if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsBool(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_bool));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":261
 *         elif datatype == "Button":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "List":
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":262
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "List":
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":263
 *             ret = type_bool if cret else None
 *             return ret
 *         elif datatype == "List":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__List), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":264
 *             return ret
 *         elif datatype == "List":
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *             ret = type_string.c_str() if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueListSelection(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":265
 *         elif datatype == "List":
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":266
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":268
 *             return ret
 *         else :
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *             ret = type_string.c_str() if cret else None
 *     return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsString(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":269
 *         else :
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":270
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * cdef addValueId(ValueID v, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.getValueFromType");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":272
 *     return ret
 * 
 * cdef addValueId(ValueID v, n):             # <<<<<<<<<<<<<<
 *     #cdef string value
 *     cdef string label
 */

static  PyObject *__pyx_f_12libopenzwave_addValueId(OpenZWave::ValueID __pyx_v_v, PyObject *__pyx_v_n) {
  std::string __pyx_v_label;
  std::string __pyx_v_units;
  OpenZWave::Manager *__pyx_v_manager;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("addValueId");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":276
 *     cdef string label
 *     cdef string units
 *     cdef Manager *manager = Get()             # <<<<<<<<<<<<<<
 *     #logging.debug("libopenzwave.addValueId (CMD,n)=(%s,%s)" % (PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],n))
 *     #manager.GetValueAsString(v, &value)
 */
  __pyx_v_manager = OpenZWave::Manager::Get();

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":279
 *     #logging.debug("libopenzwave.addValueId (CMD,n)=(%s,%s)" % (PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],n))
 *     #manager.GetValueAsString(v, &value)
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))             # <<<<<<<<<<<<<<
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 */
  __pyx_v_12libopenzwave_values_map.insert(((std::pair<uint64_t,OpenZWave::ValueID>)std::pair<uint64_t,OpenZWave::ValueID>(__pyx_v_v.GetId(), __pyx_v_v)));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":280
 *     #manager.GetValueAsString(v, &value)
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))
 *     label = manager.GetValueLabel(v)             # <<<<<<<<<<<<<<
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 */
  __pyx_v_label = __pyx_v_manager->GetValueLabel(__pyx_v_v);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":281
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)             # <<<<<<<<<<<<<<
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 */
  __pyx_v_units = __pyx_v_manager->GetValueUnits(__pyx_v_v);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":282
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_v.GetHomeId()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__homeId), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":283
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),             # <<<<<<<<<<<<<<
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_v.GetNodeId()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__nodeId), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":284
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],             # <<<<<<<<<<<<<<
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_PyManager)), __pyx_n_s__COMMAND_CLASS_DESC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_v.GetCommandClassId();
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_3, sizeof(uint8_t)+1, __Pyx_PyInt_to_py_uint8_t); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__commandClass), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":285
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),             # <<<<<<<<<<<<<<
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),
 */
  __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_v.GetInstance()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__instance), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":286
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),             # <<<<<<<<<<<<<<
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],
 */
  __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_v.GetIndex()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__index), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":287
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),             # <<<<<<<<<<<<<<
 *                     'genre' : PyGenres[v.GetGenre()],
 *                     'type' : PyValueTypes[v.GetType()],
 */
  __pyx_t_4 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__id), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":288
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],             # <<<<<<<<<<<<<<
 *                     'type' : PyValueTypes[v.GetType()],
 * #                    'value' : value.c_str(),
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyGenres); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetGenre()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_2); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__genre), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":289
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],
 *                     'type' : PyValueTypes[v.GetType()],             # <<<<<<<<<<<<<<
 * #                    'value' : value.c_str(),
 *                     'value' : getValueFromType(manager,v.GetId()),
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetType()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_t_2); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__type), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":291
 *                     'type' : PyValueTypes[v.GetType()],
 * #                    'value' : value.c_str(),
 *                     'value' : getValueFromType(manager,v.GetId()),             # <<<<<<<<<<<<<<
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),
 */
  __pyx_t_4 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_manager, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__value), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":292
 * #                    'value' : value.c_str(),
 *                     'value' : getValueFromType(manager,v.GetId()),
 *                     'label' : label.c_str(),             # <<<<<<<<<<<<<<
 *                     'units' : units.c_str(),
 *                     'readOnly': manager.IsValueReadOnly(v),
 */
  __pyx_t_2 = PyBytes_FromString(__pyx_v_label.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__label), ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":293
 *                     'value' : getValueFromType(manager,v.GetId()),
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),             # <<<<<<<<<<<<<<
 *                     'readOnly': manager.IsValueReadOnly(v),
 *                     }
 */
  __pyx_t_2 = PyBytes_FromString(__pyx_v_units.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__units), ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":294
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),
 *                     'readOnly': manager.IsValueReadOnly(v),             # <<<<<<<<<<<<<<
 *                     }
 * 
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_manager->IsValueReadOnly(__pyx_v_v)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__readOnly), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":282
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
  if (PyObject_SetItem(__pyx_v_n, ((PyObject *)__pyx_n_s__valueId), ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.addValueId");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":297
 *                     }
 * 
 * cdef void notif_callback(const_notification _notification, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     """
 *     Notification callback to the C++ library
 */

static  void __pyx_f_12libopenzwave_notif_callback(OpenZWave::Notification const* __pyx_v__notification, void *__pyx_v__context) {
  OpenZWave::Notification *__pyx_v_notification;
  PyObject *__pyx_v_n;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  enum OpenZWave::Notification::NotificationType __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("notif_callback");
  __pyx_v_n = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":302
 * 
 *     """
 *     cdef Notification* notification = <Notification*>_notification             # <<<<<<<<<<<<<<
 *     #logging.debug("libopenzwave.notif_callback : notification type %s" % notification.GetType())
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 */
  __pyx_v_notification = ((OpenZWave::Notification *)__pyx_v__notification);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":304
 *     cdef Notification* notification = <Notification*>_notification
 *     #logging.debug("libopenzwave.notif_callback : notification type %s" % notification.GetType())
 *     n = {'notificationType' : PyNotifications[notification.GetType()],             # <<<<<<<<<<<<<<
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyNotifications); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_notification->GetType()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__notificationType), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":305
 *     #logging.debug("libopenzwave.notif_callback : notification type %s" % notification.GetType())
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),             # <<<<<<<<<<<<<<
 *          'nodeId' : notification.GetNodeId(),
 * #         'context' : "%s" % (<object>_context),
 */
  __pyx_t_4 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_notification->GetHomeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__homeId), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":306
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),             # <<<<<<<<<<<<<<
 * #         'context' : "%s" % (<object>_context),
 *          }
 */
  __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_notification->GetNodeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__nodeId), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_n));
  __pyx_v_n = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":309
 * #         'context' : "%s" % (<object>_context),
 *          }
 *     if notification.GetType() == Type_Group:             # <<<<<<<<<<<<<<
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     elif notification.GetType() == Type_NodeEvent:
 */
  __pyx_t_5 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_Group);
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":310
 *          }
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()             # <<<<<<<<<<<<<<
 *     elif notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()
 */
    __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_notification->GetGroupIdx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__groupIdx), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":311
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     elif notification.GetType() == Type_NodeEvent:             # <<<<<<<<<<<<<<
 *         n['event'] = notification.GetEvent()
 *     elif notification.GetType() == Type_Notification:
 */
  __pyx_t_5 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_NodeEvent);
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":312
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     elif notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()             # <<<<<<<<<<<<<<
 *     elif notification.GetType() == Type_Notification:
 *         n['notificationCode'] = notification.GetNotification()
 */
    __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_notification->GetEvent()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__event), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":313
 *     elif notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()
 *     elif notification.GetType() == Type_Notification:             # <<<<<<<<<<<<<<
 *         n['notificationCode'] = notification.GetNotification()
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 */
  __pyx_t_5 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_Notification);
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":314
 *         n['event'] = notification.GetEvent()
 *     elif notification.GetType() == Type_Notification:
 *         n['notificationCode'] = notification.GetNotification()             # <<<<<<<<<<<<<<
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 *         n['buttonId'] = notification.GetButtonId()
 */
    __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_notification->GetNotification()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__notificationCode), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":315
 *     elif notification.GetType() == Type_Notification:
 *         n['notificationCode'] = notification.GetNotification()
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):             # <<<<<<<<<<<<<<
 *         n['buttonId'] = notification.GetButtonId()
 *     elif notification.GetType() == Type_SceneEvent:
 */
  __pyx_t_6 = __pyx_v_notification->GetType();
  __pyx_t_5 = (__pyx_t_6 == OpenZWave::Notification::Type_CreateButton);
  if (!__pyx_t_5) {
    __pyx_t_7 = (__pyx_t_6 == OpenZWave::Notification::Type_DeleteButton);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_5;
  }
  if (!__pyx_t_8) {
    __pyx_t_5 = (__pyx_t_6 == OpenZWave::Notification::Type_ButtonOn);
    __pyx_t_7 = __pyx_t_5;
  } else {
    __pyx_t_7 = __pyx_t_8;
  }
  if (!__pyx_t_7) {
    __pyx_t_8 = (__pyx_t_6 == OpenZWave::Notification::Type_ButtonOff);
    __pyx_t_5 = __pyx_t_8;
  } else {
    __pyx_t_5 = __pyx_t_7;
  }
  __pyx_t_7 = __pyx_t_5;
  if (__pyx_t_7) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":316
 *         n['notificationCode'] = notification.GetNotification()
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 *         n['buttonId'] = notification.GetButtonId()             # <<<<<<<<<<<<<<
 *     elif notification.GetType() == Type_SceneEvent:
 *         n['sceneId'] = notification.GetSceneId()
 */
    __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_notification->GetButtonId()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__buttonId), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":317
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 *         n['buttonId'] = notification.GetButtonId()
 *     elif notification.GetType() == Type_SceneEvent:             # <<<<<<<<<<<<<<
 *         n['sceneId'] = notification.GetSceneId()
 *     addValueId(notification.GetValueID(), n)
 */
  __pyx_t_7 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_SceneEvent);
  if (__pyx_t_7) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":318
 *         n['buttonId'] = notification.GetButtonId()
 *     elif notification.GetType() == Type_SceneEvent:
 *         n['sceneId'] = notification.GetSceneId()             # <<<<<<<<<<<<<<
 *     addValueId(notification.GetValueID(), n)
 *     #logging.debug("++++++++++++ libopenzwave.notif_callback : notification %s" % n)
 */
    __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_notification->GetSceneId()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__sceneId), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":319
 *     elif notification.GetType() == Type_SceneEvent:
 *         n['sceneId'] = notification.GetSceneId()
 *     addValueId(notification.GetValueID(), n)             # <<<<<<<<<<<<<<
 *     #logging.debug("++++++++++++ libopenzwave.notif_callback : notification %s" % n)
 *     (<object>_context)(n)
 */
  __pyx_t_1 = __pyx_f_12libopenzwave_addValueId(__pyx_v_notification->GetValueID(), ((PyObject *)__pyx_v_n)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":321
 *     addValueId(notification.GetValueID(), n)
 *     #logging.debug("++++++++++++ libopenzwave.notif_callback : notification %s" % n)
 *     (<object>_context)(n)             # <<<<<<<<<<<<<<
 * 
 * cdef void ctrl_callback(ControllerState _state, ControllerError _error, void* _context) with gil:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_n));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_n));
  __pyx_t_4 = PyObject_Call(((PyObject *)__pyx_v__context), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("libopenzwave.notif_callback");
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":323
 *     (<object>_context)(n)
 * 
 * cdef void ctrl_callback(ControllerState _state, ControllerError _error, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     """
 *     Controller callback to the C++ library
 */

static  void __pyx_f_12libopenzwave_ctrl_callback(enum OpenZWave::Driver::ControllerState __pyx_v__state, enum OpenZWave::Driver::ControllerError __pyx_v__error, void *__pyx_v__context) {
  PyObject *__pyx_v_c;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("ctrl_callback");
  __pyx_v_c = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":329
 *     """
 *     #logging.debug("libopenzwave.ctrl_callback : state %s" % _state)
 *     c = {'state' : PyControllerState[_state],             # <<<<<<<<<<<<<<
 *          'message' : PyControllerState[_state].doc,
 *          'error' : _error,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyControllerState); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v__state); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__state), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":330
 *     #logging.debug("libopenzwave.ctrl_callback : state %s" % _state)
 *     c = {'state' : PyControllerState[_state],
 *          'message' : PyControllerState[_state].doc,             # <<<<<<<<<<<<<<
 *          'error' : _error,
 *          'error_msg' : PyControllerError[_error].doc,
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyControllerState); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyInt_FromLong(__pyx_v__state); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_4, __pyx_t_3); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__doc); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__message), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":331
 *     c = {'state' : PyControllerState[_state],
 *          'message' : PyControllerState[_state].doc,
 *          'error' : _error,             # <<<<<<<<<<<<<<
 *          'error_msg' : PyControllerError[_error].doc,
 * #         'context' : "%s" % (<object>_context),
 */
  __pyx_t_3 = PyInt_FromLong(__pyx_v__error); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__error), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":332
 *          'message' : PyControllerState[_state].doc,
 *          'error' : _error,
 *          'error_msg' : PyControllerError[_error].doc,             # <<<<<<<<<<<<<<
 * #         'context' : "%s" % (<object>_context),
 *         }
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyControllerError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(__pyx_v__error); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__doc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__error_msg), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_c));
  __pyx_v_c = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":336
 *         }
 *     #logging.debug("++++++++++++ libopenzwave.ctrl_callback : notification %s" % c)
 *     (<object>_context)(c)             # <<<<<<<<<<<<<<
 * 
 * cpdef object driverData():
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_c));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
  __pyx_t_2 = PyObject_Call(((PyObject *)__pyx_v__context), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("libopenzwave.ctrl_callback");
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_c);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":338
 *     (<object>_context)(c)
 * 
 * cpdef object driverData():             # <<<<<<<<<<<<<<
 *     cdef DriverData data
 * 
 */

static PyObject *__pyx_pf_12libopenzwave_0driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_12libopenzwave_driverData(int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("driverData");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_0driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_12libopenzwave_0driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("driverData");
  __pyx_self = __pyx_self;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_driverData(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.driverData");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":341
 *     cdef DriverData data
 * 
 * def configPath():             # <<<<<<<<<<<<<<
 *     '''
 * Retrieve the config path. This directory hold the xml files.
 */

static PyObject *__pyx_pf_12libopenzwave_1configPath(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_1configPath[] = "\nRetrieve the config path. This directory hold the xml files.\n\n:return: A string containing the library config path or None.\n:rtype: str\n\n    ";
static PyMethodDef __pyx_mdef_12libopenzwave_1configPath = {__Pyx_NAMESTR("configPath"), (PyCFunction)__pyx_pf_12libopenzwave_1configPath, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_1configPath)};
static PyObject *__pyx_pf_12libopenzwave_1configPath(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_pythonpath;
  PyObject *__pyx_v_afile;
  PyObject *__pyx_v_fullpath;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("configPath");
  __pyx_self = __pyx_self;
  __pyx_v_pythonpath = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_afile = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_fullpath = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":349
 * 
 *     '''
 *     if os.path.exists(os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__exists); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":350
 *     '''
 *     if os.path.exists(os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":351
 *     if os.path.exists(os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__exists); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":352
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":353
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__exists); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":354
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":355
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 *     else:
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__exists); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":356
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     else:
 *         for pythonpath in sys.path:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":358
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 *     else:
 *         for pythonpath in sys.path:             # <<<<<<<<<<<<<<
 *             try:
 *                 for afile in os.listdir(pythonpath):
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_6 = 0; __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4);
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
      } else if (likely(PyTuple_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
      } else {
        __pyx_t_1 = PyIter_Next(__pyx_t_4);
        if (!__pyx_t_1) {
          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_DECREF(__pyx_v_pythonpath);
      __pyx_v_pythonpath = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":359
 *     else:
 *         for pythonpath in sys.path:
 *             try:             # <<<<<<<<<<<<<<
 *                 for afile in os.listdir(pythonpath):
 *                     fullpath = os.path.join(pythonpath, afile)
 */
      {
        PyObject *__pyx_save_exc_type, *__pyx_save_exc_value, *__pyx_save_exc_tb;
        __Pyx_ExceptionSave(&__pyx_save_exc_type, &__pyx_save_exc_value, &__pyx_save_exc_tb);
        __Pyx_XGOTREF(__pyx_save_exc_type);
        __Pyx_XGOTREF(__pyx_save_exc_value);
        __Pyx_XGOTREF(__pyx_save_exc_tb);
        /*try:*/ {

          /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":360
 *         for pythonpath in sys.path:
 *             try:
 *                 for afile in os.listdir(pythonpath):             # <<<<<<<<<<<<<<
 *                     fullpath = os.path.join(pythonpath, afile)
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 */
          __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__listdir); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_1));
          __Pyx_INCREF(__pyx_v_pythonpath);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pythonpath);
          __Pyx_GIVEREF(__pyx_v_pythonpath);
          __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
          if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
            __pyx_t_7 = 0; __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
          } else {
            __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_1);
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          for (;;) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++;
            } else if (likely(PyTuple_CheckExact(__pyx_t_1))) {
              if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++;
            } else {
              __pyx_t_2 = PyIter_Next(__pyx_t_1);
              if (!__pyx_t_2) {
                if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                break;
              }
              __Pyx_GOTREF(__pyx_t_2);
            }
            __Pyx_DECREF(__pyx_v_afile);
            __pyx_v_afile = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":361
 *             try:
 *                 for afile in os.listdir(pythonpath):
 *                     fullpath = os.path.join(pythonpath, afile)             # <<<<<<<<<<<<<<
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)
 */
            __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(((PyObject *)__pyx_t_3));
            __Pyx_INCREF(__pyx_v_pythonpath);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pythonpath);
            __Pyx_GIVEREF(__pyx_v_pythonpath);
            __Pyx_INCREF(__pyx_v_afile);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_afile);
            __Pyx_GIVEREF(__pyx_v_afile);
            __pyx_t_8 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_v_fullpath);
            __pyx_v_fullpath = __pyx_t_8;
            __pyx_t_8 = 0;

            /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":362
 *                 for afile in os.listdir(pythonpath):
 *                     fullpath = os.path.join(pythonpath, afile)
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)
 *             except :
 */
            __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_3 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__exists); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(((PyObject *)__pyx_t_9));
            __Pyx_INCREF(__pyx_v_fullpath);
            PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_fullpath);
            __Pyx_GIVEREF(__pyx_v_fullpath);
            PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
            __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(((PyObject *)__pyx_t_9));
            PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_2 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_5) {

              /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":363
 *                     fullpath = os.path.join(pythonpath, afile)
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *             except :
 *                 pass
 */
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_9 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_2 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(((PyObject *)__pyx_t_8));
              __Pyx_INCREF(__pyx_v_fullpath);
              PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_fullpath);
              __Pyx_GIVEREF(__pyx_v_fullpath);
              PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_9);
              __pyx_t_9 = 0;
              __pyx_t_9 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
              __pyx_r = __pyx_t_9;
              __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              goto __pyx_L12_try_return;
              goto __pyx_L18;
            }
            __pyx_L18:;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_XDECREF(__pyx_save_exc_type); __pyx_save_exc_type = 0;
        __Pyx_XDECREF(__pyx_save_exc_value); __pyx_save_exc_value = 0;
        __Pyx_XDECREF(__pyx_save_exc_tb); __pyx_save_exc_tb = 0;
        goto __pyx_L15_try_end;
        __pyx_L12_try_return:;
        __Pyx_XGIVEREF(__pyx_save_exc_type);
        __Pyx_XGIVEREF(__pyx_save_exc_value);
        __Pyx_XGIVEREF(__pyx_save_exc_tb);
        __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
        goto __pyx_L0;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":364
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)
 *             except :             # <<<<<<<<<<<<<<
 *                 pass
 *     return None
 */
        /*except:*/ {
          PyErr_Restore(0,0,0);
          goto __pyx_L9_exception_handled;
        }
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_save_exc_type);
        __Pyx_XGIVEREF(__pyx_save_exc_value);
        __Pyx_XGIVEREF(__pyx_save_exc_tb);
        __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
        __pyx_L15_try_end:;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L5:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":366
 *             except :
 *                 pass
 *     return None             # <<<<<<<<<<<<<<
 * 
 * cdef class PyOptions:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("libopenzwave.configPath");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_pythonpath);
  __Pyx_DECREF(__pyx_v_afile);
  __Pyx_DECREF(__pyx_v_fullpath);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":375
 *     cdef Options *options
 * 
 *     def create(self, char *a, char *b, char *c):             # <<<<<<<<<<<<<<
 *         """
 *         Create an option object used to start the manager
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_0create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_0create[] = "\n        Create an option object used to start the manager\n\n        :param a: The path of the config directory\n        :type a: str\n        :param b: The path of the user directory\n        :type b: str\n        :param c: The \"command line\" options of the openzwave library\n        :type c: str\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_0create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  char *__pyx_v_b;
  char *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,&__pyx_n_s__c,0};
  __Pyx_RefNannySetupContext("create");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "create") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_b) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_c) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_b) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_c) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.create");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":387
 * 
 *         """
 *         self.options = Create(string(a), string(b), string(c))             # <<<<<<<<<<<<<<
 * 
 *     def lock(self):
 */
  ((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self)->options = OpenZWave::Options::Create(std::string(__pyx_v_a), std::string(__pyx_v_b), std::string(__pyx_v_c));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":389
 *         self.options = Create(string(a), string(b), string(c))
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         """
 *         Lock the options. Needed to start the manager
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_1lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_1lock[] = "\n        Lock the options. Needed to start the manager\n\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_1lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lock");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":397
 * 
 *         """
 *         return self.options.Lock()             # <<<<<<<<<<<<<<
 * 
 *     def addOptionBool(self, char *name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self)->options->Lock()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyOptions.lock");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":399
 *         return self.options.Lock()
 * 
 *     def addOptionBool(self, char *name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Add a boolean option.
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_2addOptionBool(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_2addOptionBool[] = "\n        Add a boolean option.\n\n        :param name: The name of the option.\n        :type name: str\n        :param value: The value of the option.\n        :type value: boolean\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_2addOptionBool(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = NULL;
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("addOptionBool");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addOptionBool", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addOptionBool") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addOptionBool", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionBool");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":411
 * 
 *         """
 *         return self.options.AddOptionBool(string(name), value )             # <<<<<<<<<<<<<<
 * 
 *     def addOptionInt(self, char *name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self)->options->AddOptionBool(std::string(__pyx_v_name), __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionBool");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":413
 *         return self.options.AddOptionBool(string(name), value )
 * 
 *     def addOptionInt(self, char *name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Add an integer option.
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_3addOptionInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_3addOptionInt[] = "\n        Add an integer option.\n\n        :param name: The name of the option.\n        :type name: str\n        :param value: The value of the option.\n        :type value: boolean\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_3addOptionInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = NULL;
  int32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("addOptionInt");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addOptionInt", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addOptionInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addOptionInt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionInt");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":425
 * 
 *         """
 *         return self.options.AddOptionInt(string(name), value )             # <<<<<<<<<<<<<<
 * 
 *     def addOptionString(self, char *name, char *value, append):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_int32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self)->options->AddOptionInt(std::string(__pyx_v_name), __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionInt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":427
 *         return self.options.AddOptionInt(string(name), value )
 * 
 *     def addOptionString(self, char *name, char *value, append):             # <<<<<<<<<<<<<<
 *         """
 *         Add a string option.
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_4addOptionString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_4addOptionString[] = "\n        Add a string option.\n\n        :param name: The name of the option.  Option names are case insensitive and must be unique.\n        :type name: str\n        :param value: The value of the option.\n        :type value: str\n        :param append: Setting append to true will cause values read from the command line\n         or XML file to be concatenated into a comma delimited set.  If _append is false,\n         newer values will overwrite older ones.\n        :type append: boolean\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_4addOptionString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  char *__pyx_v_value;
  PyObject *__pyx_v_append = 0;
  PyObject *__pyx_r = NULL;
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__value,&__pyx_n_s__append,0};
  __Pyx_RefNannySetupContext("addOptionString");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addOptionString", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__append);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addOptionString", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addOptionString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_append = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_append = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addOptionString", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionString");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":443
 * 
 *         """
 *         return self.options.AddOptionString(string(name), string(value), append )             # <<<<<<<<<<<<<<
 * 
 *     def getConfigPath(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_append); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self)->options->AddOptionString(std::string(__pyx_v_name), std::string(__pyx_v_value), __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionString");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":445
 *         return self.options.AddOptionString(string(name), string(value), append )
 * 
 *     def getConfigPath(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getConfigPath:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_5getConfigPath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_5getConfigPath[] = "\n.. _getConfigPath:\n\nRetrieve the config path. This directory hold the xml files.\n\n:return: A string containing the library config path or None.\n:rtype: str\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_5getConfigPath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getConfigPath");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":455
 * 
 *         '''
 *         return configPath()             # <<<<<<<<<<<<<<
 * 
 * cdef class RetAlloc:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__configPath); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.getConfigPath");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":467
 *     cdef uint8_t* data
 * 
 *     def __cinit__(self,  uint32_t siz):             # <<<<<<<<<<<<<<
 *         self.siz = siz
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 */

static int __pyx_pf_12libopenzwave_8RetAlloc_0__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_12libopenzwave_8RetAlloc_0__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_siz;
  int __pyx_r;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__siz,0};
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__siz);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_siz = __Pyx_PyInt_from_py_uint32_t(values[0]); if (unlikely((__pyx_v_siz == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_siz = __Pyx_PyInt_from_py_uint32_t(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_siz == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.RetAlloc.__cinit__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":468
 * 
 *     def __cinit__(self,  uint32_t siz):
 *         self.siz = siz             # <<<<<<<<<<<<<<
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 * 
 */
  ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_v_self)->siz = __pyx_v_siz;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":469
 *     def __cinit__(self,  uint32_t siz):
 *         self.siz = siz
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_v_self)->data = ((uint8_t *)malloc(((sizeof(uint8_t)) * __pyx_v_siz)));

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":471
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.data)
 * 
 */

static void __pyx_pf_12libopenzwave_8RetAlloc_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_12libopenzwave_8RetAlloc_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":472
 * 
 *     def __dealloc__(self):
 *         free(self.data)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyManager:
 */
  free(((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_v_self)->data);

  __Pyx_RefNannyFinishContext();
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":624
 *     cdef object _controllerCallback
 * 
 *     def create(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _create:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_0create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_0create[] = "\n.. _create:\n\nCreates the Manager singleton object.\n\nThe Manager provides the public interface to OpenZWave, exposing all the\nfunctionality required to add Z-Wave support to an application. There can be\nonly one Manager in an OpenZWave application.  An Options object must be\ncreated and Locked first, otherwise the call to Manager::Create will fail.\nOnce the Manager has been created, call AddWatcher to install a notification\ncallback handler, and then call the AddDriver method for each attached PC\nZ-Wave controller in turn.\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_0create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("create");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":639
 * 
 *         '''
 *         self.manager = Create()             # <<<<<<<<<<<<<<
 *         PyEval_InitThreads()
 * #
 */
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager = OpenZWave::Manager::Create();

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":640
 *         '''
 *         self.manager = Create()
 *         PyEval_InitThreads()             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  PyEval_InitThreads();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":648
 * # polled every time the application starts.
 * #
 *     def writeConfig(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Saves the configuration of a PC Controller's Z-Wave network to the
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_1writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_1writeConfig[] = "\nSaves the configuration of a PC Controller's Z-Wave network to the\napplication's user data folder.\n\nThis method does not normally need to be called, since OpenZWave will save the\nstate automatically during the shutdown process.  It is provided here only as\nan aid to development. The configuration of each PC Controller's Z-Wave network\nis stored in a separate file.  The filename consists of the 8 digit hexadecimal\nversion of the controller's Home ID, prefixed with the string \"zwcfg_*\".  This\nconvention allows OpenZWave to find the correct configuration file for a\ncontroller, even if it is attached to a different serial port, USB device path,\netc.\n\n:param homeid: The Home ID of the Z-Wave controller to save.\n:type homeid: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_1writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("writeConfig");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":666
 * 
 *         '''
 *         self.manager.WriteConfig(homeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->WriteConfig(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.writeConfig");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":673
 * # Methods for adding and removing drivers and obtaining basic controller information.
 * #
 *     def addDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addDriver:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_2addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_2addDriver[] = "\n.. _addDriver:\n\nCreates a new driver for a Z-Wave controller.\n\nThis method creates a Driver object for handling communications with a single\nZ-Wave controller.  In the background, the driver first tries to read\nconfiguration data saved during a previous run.  It then queries the controller\ndirectly for any missing information, and a refresh of the set of nodes that\nit controls.  Once this information has been received, a DriverReady\nnotification callback is sent, containing the Home ID of the controller.  This\nHome ID is required by most of the OpenZWave Manager class methods.\n\n:param serialport: The string used to open the controller.  On Windows this might be something like \"\\.\\COM3\", or on Linux \"/dev/ttyUSB0\".\n:type serialport: str\n:return: True if a new driver was created\n:rtype: bool\n:see: removeDriver_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_2addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("addDriver");
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = PyBytes_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addDriver");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":694
 * 
 *         '''
 *         self.manager.AddDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def removeDriver(self, char *serialport):
 */
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddDriver(std::string(__pyx_v_serialport));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":696
 *         self.manager.AddDriver(string(serialport))
 * 
 *     def removeDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeDriver:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_3removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_3removeDriver[] = "\n.. _removeDriver:\n\nRemoves the driver for a Z-Wave controller, and closes the controller.\n\nDrivers do not need to be explicitly removed before calling Destroy - this is\nhandled automatically.\n\n:param serialport: The same string as was passed in the original call toAddDriver.\n:type serialport: str\n:return: True if the driver was removed, False if it could not be found.\n:rtype: bool\n:see: addDriver_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_3removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("removeDriver");
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = PyBytes_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeDriver");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":712
 * 
 *         '''
 *         self.manager.RemoveDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def getControllerInterfaceType(self, homeid):
 */
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveDriver(std::string(__pyx_v_serialport));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":714
 *         self.manager.RemoveDriver(string(serialport))
 * 
 *     def getControllerInterfaceType(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .._getControllerInterfaceType:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_4getControllerInterfaceType(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_4getControllerInterfaceType[] = "\n.._getControllerInterfaceType:\nRetrieve controller interface type, Unknown, Serial, Hid\n\n:param homeId: The Home ID of the Z-Wave controller.\n:return: The controller interface type\n:rtype: str\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_4getControllerInterfaceType(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_v_type;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getControllerInterfaceType");
  __pyx_v_type = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":724
 * 
 *         '''
 *         type = self.manager.GetControllerInterfaceType(homeid)             # <<<<<<<<<<<<<<
 *         return PyControllerInterface[type]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetControllerInterfaceType(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_type);
  __pyx_v_type = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":725
 *         '''
 *         type = self.manager.GetControllerInterfaceType(homeid)
 *         return PyControllerInterface[type]             # <<<<<<<<<<<<<<
 * 
 *     def getControllerPath(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_v_type); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getControllerInterfaceType");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":727
 *         return PyControllerInterface[type]
 * 
 *     def getControllerPath(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .._getControllerPath:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_5getControllerPath(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_5getControllerPath[] = "\n.._getControllerPath:\nRetrieve controller interface path, name or path used to open the controller hardware\n\n:param homeId: The Home ID of the Z-Wave controller.\n:return: The controller interface type\n:rtype: str\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_5getControllerPath(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getControllerPath");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":737
 * 
 *         '''
 *         cdef string c_string = self.manager.GetControllerPath(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetControllerPath(__pyx_t_1);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":738
 *         '''
 *         cdef string c_string = self.manager.GetControllerPath(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getControllerNodeId(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getControllerPath");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":740
 *         return c_string.c_str()
 * 
 *     def getControllerNodeId(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getControllerNodeId:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_6getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_6getControllerNodeId[] = "\n.. _getControllerNodeId:\n\nGet the node ID of the Z-Wave controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: The node ID of the Z-Wave controller\n:rtype: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_6getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getControllerNodeId");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":752
 * 
 *         '''
 *         return self.manager.GetControllerNodeId(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isPrimaryController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetControllerNodeId(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getControllerNodeId");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":754
 *         return self.manager.GetControllerNodeId(homeid)
 * 
 *     def isPrimaryController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPrimaryController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_7isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_7isPrimaryController[] = "\n.. _isPrimaryController:\n\nQuery if the controller is a primary controller.\n\nThe primary controller is the main device used to configure and control a\nZ-Wave network.  There can only be one primary controller - all other\ncontrollers are secondary controllers.\n\nThe only difference between a primary and secondary controller is that the\nprimary is the only one that can be used to add or remove other devices.  For\nthis reason, it is usually better for the promary controller to be portable,\nsince most devices must be added when installed in their final location.\n\nCalls to BeginControllerCommand will fail if the controller is not the primary.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if it is a primary controller, False if not.\n:rtype: bool\n:see: isBridgeController_, isStaticUpdateController_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_7isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isPrimaryController");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":778
 * 
 *         '''
 *         return self.manager.IsPrimaryController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isStaticUpdateController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsPrimaryController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isPrimaryController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":780
 *         return self.manager.IsPrimaryController(homeid)
 * 
 *     def isStaticUpdateController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isStaticUpdateController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_8isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_8isStaticUpdateController[] = "\n.. _isStaticUpdateController:\n\nQuery if the controller is a static update controller (SUC).\n\nA Static Update Controller (SUC) is a controller that must never be moved in\nnormal operation and which can be used by other nodes to receive information\nabout network changes.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if it is a static update controller, False if not.\n:rtype: bool\n:see: isBridgeController_, isPrimaryController_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_8isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isStaticUpdateController");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":797
 * 
 *         '''
 *         return self.manager.IsStaticUpdateController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isBridgeController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsStaticUpdateController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isStaticUpdateController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":799
 *         return self.manager.IsStaticUpdateController(homeid)
 * 
 *     def isBridgeController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isBridgeController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_9isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_9isBridgeController[] = "\n.. _isBridgeController:\n\nQuery if the controller is using the bridge controller library.\n\nA bridge controller is able to create virtual nodes that can be associated\nwith other controllers to enable events to be passed on.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if it is a bridge controller, False if not.\n:rtype: bool\n:see: isPrimaryController_, isStaticUpdateController_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_9isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isBridgeController");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":815
 * 
 *         '''
 *         return self.manager.IsBridgeController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryVersion(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsBridgeController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isBridgeController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":817
 *         return self.manager.IsBridgeController(homeid)
 * 
 *     def getLibraryVersion(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryVersion:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_10getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_10getLibraryVersion[] = "\n.. _getLibraryVersion:\n\nGet the version of the Z-Wave API library used by a controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: A string containing the library version. For example, \"Z-Wave 2.48\".\n:rtype: str\n:see: getPythonLibraryVersion_, getLibraryTypeName_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_10getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getLibraryVersion");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":830
 * 
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetLibraryVersion(__pyx_t_1);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":831
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getPythonLibraryVersion(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getLibraryVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":833
 *         return c_string.c_str()
 * 
 *     def getPythonLibraryVersion(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPythonLibraryVersion:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_11getPythonLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_11getPythonLibraryVersion[] = "\n.. _getPythonLibraryVersion:\n\nGet the version of the python library.\n\n:return: A string containing the python library version. For example, \"python-openzwave version 0.1\".\n:rtype: str\n:see: getLibraryTypeName_, getLibraryVersion_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_11getPythonLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getPythonLibraryVersion");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":844
 * 
 *         '''
 *         return "python-openzwave version %s" % PYLIBRARY             # <<<<<<<<<<<<<<
 * 
 *     def getPythonLibraryVersionNumber(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__PYLIBRARY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_9), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPythonLibraryVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":846
 *         return "python-openzwave version %s" % PYLIBRARY
 * 
 *     def getPythonLibraryVersionNumber(self):             # <<<<<<<<<<<<<<
 *         """
 * .. _getPythonLibraryVersionNumber:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_12getPythonLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_12getPythonLibraryVersionNumber[] = "\n.. _getPythonLibraryVersionNumber:\n\nGet the python library version number\n\n:return: A string containing the python library version. For example, \"0.1\".\n:rtype: str\n:see: getLibraryTypeName_, getLibraryVersion_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_12getPythonLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPythonLibraryVersionNumber");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":857
 * 
 *         """
 *         return PYLIBRARY             # <<<<<<<<<<<<<<
 * 
 *     def getOzwLibraryVersion(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__PYLIBRARY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPythonLibraryVersionNumber");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":859
 *         return PYLIBRARY
 * 
 *     def getOzwLibraryVersion(self):             # <<<<<<<<<<<<<<
 *         """
 * .. _getOzwLibraryVersion:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_13getOzwLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_13getOzwLibraryVersion[] = "\n.. _getOzwLibraryVersion:\n\nGet a string containing the openzwave library version.\n\n:return: A string containing the library type.\n:rtype: str\n:see: getLibraryVersion_, getPythonLibraryVersion_, getLibraryTypeName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_13getOzwLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getOzwLibraryVersion");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":870
 * 
 *         """
 *         return "OpenZWave version %d.%d.%d" %(ozw_vers_major, ozw_vers_minor, ozw_vers_revision)             # <<<<<<<<<<<<<<
 * 
 *     def getOzwLibraryVersionNumber(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint16_t(ozw_vers_major); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_to_py_uint16_t(ozw_vers_minor); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_to_py_uint16_t(ozw_vers_revision); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_10), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getOzwLibraryVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":872
 *         return "OpenZWave version %d.%d.%d" %(ozw_vers_major, ozw_vers_minor, ozw_vers_revision)
 * 
 *     def getOzwLibraryVersionNumber(self):             # <<<<<<<<<<<<<<
 *         '''
 * _getOzwLibraryVersionNumber: Get the openzwave library version number.
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_14getOzwLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_14getOzwLibraryVersionNumber[] = "\n_getOzwLibraryVersionNumber: Get the openzwave library version number.\n\n:return: A string containing the library type.\n:rtype: str\n:see: getLibraryVersion_, getPythonLibraryVersion_, getLibraryTypeName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_14getOzwLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getOzwLibraryVersionNumber");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":881
 * 
 *         '''
 *         return "%d.%d.%d" %(ozw_vers_major, ozw_vers_minor, ozw_vers_revision)             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryTypeName(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint16_t(ozw_vers_major); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_to_py_uint16_t(ozw_vers_minor); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_to_py_uint16_t(ozw_vers_revision); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_11), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getOzwLibraryVersionNumber");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":883
 *         return "%d.%d.%d" %(ozw_vers_major, ozw_vers_minor, ozw_vers_revision)
 * 
 *     def getLibraryTypeName(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryTypeName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_15getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_15getLibraryTypeName[] = "\n.. _getLibraryTypeName:\n\nGet a string containing the Z-Wave API library type used by a controller.\n\nThe possible library types are:\n\n    - Static Controller\n    - Controller\n    - Enhanced Slave\n    - Slave\n    - Installer\n    - Routing Slave\n    - Bridge Controller\n    - Device Under Test\n\nThe controller should never return a slave library type.  For a more efficient\ntest of whether a controller is a Bridge Controller, use the IsBridgeController\nmethod.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: A string containing the library type.\n:rtype: str\n:see: getLibraryVersion_, getPythonLibraryVersion_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_15getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getLibraryTypeName");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":911
 * 
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetLibraryTypeName(__pyx_t_1);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":912
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getSendQueueCount(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getLibraryTypeName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":914
 *         return c_string.c_str()
 * 
 *     def getSendQueueCount(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSendQueueCount:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_16getSendQueueCount(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_16getSendQueueCount[] = "\n.. _getSendQueueCount:\n\nGet count of messages in the outgoing send queue.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: Message count\n:rtype: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_16getSendQueueCount(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getSendQueueCount");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":926
 * 
 *         '''
 *         return self.manager.GetSendQueueCount(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def logDriverStatistics(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_to_py_int32_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetSendQueueCount(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSendQueueCount");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":928
 *         return self.manager.GetSendQueueCount(homeid)
 * 
 *     def logDriverStatistics(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _logDriverStatistics:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_17logDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_17logDriverStatistics[] = "\n.. _logDriverStatistics:\n\nSend current driver statistics to the log file.\n\n:param homeid: The Home ID of the Z-Wave controller.\n:type homeid: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_17logDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("logDriverStatistics");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":938
 * 
 *         '''
 *         self.manager.LogDriverStatistics(homeid)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->LogDriverStatistics(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.logDriverStatistics");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":943
 * # Statistics interface
 * #-----------------------------------------------------------------------------
 *     def getDriverStatistics(self, homeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getDriverStatistics:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_18getDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeId); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_18getDriverStatistics[] = "\n.. _getDriverStatistics:\n\nRetrieve statistics from driver.\n\nStatistics:\n\n    * SOFCnt : Number of SOF bytes received\n    * ACKWaiting : Number of unsolicited messages while waiting for an ACK\n    * readAborts : Number of times read were aborted due to timeouts\n    * badChecksum : Number of bad checksums\n    * readCnt : Number of messages successfully read\n    * writeCnt : Number of messages successfully sent\n    * CANCnt : Number of CAN bytes received\n    * NAKCnt : Number of NAK bytes received\n    * ACKCnt : Number of ACK bytes received\n    * OOFCnt : Number of bytes out of framing\n    * dropped : Number of messages dropped & not delivered\n    * retries : Number of messages retransmitted\n    * callbacks : Number of unexpected callbacks\n    * badroutes : Number of failed messages due to bad route response\n    * noack : Number of no ACK returned errors\n    * netbusy : Number of network busy/failure messages\n    * nondelivery : Number of messages not delivered to network\n    * routedbusy : Number of messages received with routed busy status\n    * broadcastReadCnt : Number of broadcasts read\n    * broadcastWriteCnt : Number of broadcasts sent\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:param data: Pointer to structure DriverData to return values\n:type data: int\n:return: A dict containing statistics of the driver.\n:rtype: dict()\n:see: getNodeStatistics_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_18getDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeId) {
  __pyx_t_6driver_DriverData_t __pyx_v_data;
  PyObject *__pyx_v_ret;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getDriverStatistics");
  __pyx_v_ret = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":982
 *        '''
 *         cdef DriverData_t data
 *         self.manager.GetDriverStatistics( homeId, &data );             # <<<<<<<<<<<<<<
 *         ret = {}
 *         ret['SOFCnt'] = data.m_SOFCnt
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetDriverStatistics(__pyx_t_1, (&__pyx_v_data));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":983
 *         cdef DriverData_t data
 *         self.manager.GetDriverStatistics( homeId, &data );
 *         ret = {}             # <<<<<<<<<<<<<<
 *         ret['SOFCnt'] = data.m_SOFCnt
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_v_ret));
  __pyx_v_ret = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":984
 *         self.manager.GetDriverStatistics( homeId, &data );
 *         ret = {}
 *         ret['SOFCnt'] = data.m_SOFCnt             # <<<<<<<<<<<<<<
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 *         ret['readAborts'] = data.m_readAborts
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_SOFCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__SOFCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":985
 *         ret = {}
 *         ret['SOFCnt'] = data.m_SOFCnt
 *         ret['ACKWaiting'] = data.m_ACKWaiting             # <<<<<<<<<<<<<<
 *         ret['readAborts'] = data.m_readAborts
 *         ret['badChecksum'] = data.m_badChecksum
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_ACKWaiting); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__ACKWaiting), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":986
 *         ret['SOFCnt'] = data.m_SOFCnt
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 *         ret['readAborts'] = data.m_readAborts             # <<<<<<<<<<<<<<
 *         ret['badChecksum'] = data.m_badChecksum
 *         ret['readCnt'] = data.m_readCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_readAborts); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__readAborts), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":987
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 *         ret['readAborts'] = data.m_readAborts
 *         ret['badChecksum'] = data.m_badChecksum             # <<<<<<<<<<<<<<
 *         ret['readCnt'] = data.m_readCnt
 *         ret['writeCnt'] = data.m_writeCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_badChecksum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__badChecksum), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":988
 *         ret['readAborts'] = data.m_readAborts
 *         ret['badChecksum'] = data.m_badChecksum
 *         ret['readCnt'] = data.m_readCnt             # <<<<<<<<<<<<<<
 *         ret['writeCnt'] = data.m_writeCnt
 *         ret['CANCnt'] = data.m_CANCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_readCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__readCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":989
 *         ret['badChecksum'] = data.m_badChecksum
 *         ret['readCnt'] = data.m_readCnt
 *         ret['writeCnt'] = data.m_writeCnt             # <<<<<<<<<<<<<<
 *         ret['CANCnt'] = data.m_CANCnt
 *         ret['NAKCnt'] = data.m_NAKCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_writeCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__writeCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":990
 *         ret['readCnt'] = data.m_readCnt
 *         ret['writeCnt'] = data.m_writeCnt
 *         ret['CANCnt'] = data.m_CANCnt             # <<<<<<<<<<<<<<
 *         ret['NAKCnt'] = data.m_NAKCnt
 *         ret['ACKCnt'] = data.m_ACKCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_CANCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__CANCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":991
 *         ret['writeCnt'] = data.m_writeCnt
 *         ret['CANCnt'] = data.m_CANCnt
 *         ret['NAKCnt'] = data.m_NAKCnt             # <<<<<<<<<<<<<<
 *         ret['ACKCnt'] = data.m_ACKCnt
 *         ret['OOFCnt'] = data.m_OOFCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_NAKCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__NAKCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":992
 *         ret['CANCnt'] = data.m_CANCnt
 *         ret['NAKCnt'] = data.m_NAKCnt
 *         ret['ACKCnt'] = data.m_ACKCnt             # <<<<<<<<<<<<<<
 *         ret['OOFCnt'] = data.m_OOFCnt
 *         ret['dropped'] = data.m_dropped
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_ACKCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__ACKCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":993
 *         ret['NAKCnt'] = data.m_NAKCnt
 *         ret['ACKCnt'] = data.m_ACKCnt
 *         ret['OOFCnt'] = data.m_OOFCnt             # <<<<<<<<<<<<<<
 *         ret['dropped'] = data.m_dropped
 *         ret['retries'] = data.m_retries
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_OOFCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__OOFCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":994
 *         ret['ACKCnt'] = data.m_ACKCnt
 *         ret['OOFCnt'] = data.m_OOFCnt
 *         ret['dropped'] = data.m_dropped             # <<<<<<<<<<<<<<
 *         ret['retries'] = data.m_retries
 *         ret['callbacks'] = data.m_callbacks
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_dropped); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__dropped), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":995
 *         ret['OOFCnt'] = data.m_OOFCnt
 *         ret['dropped'] = data.m_dropped
 *         ret['retries'] = data.m_retries             # <<<<<<<<<<<<<<
 *         ret['callbacks'] = data.m_callbacks
 *         ret['badroutes'] = data.m_badroutes
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_retries); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__retries), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":996
 *         ret['dropped'] = data.m_dropped
 *         ret['retries'] = data.m_retries
 *         ret['callbacks'] = data.m_callbacks             # <<<<<<<<<<<<<<
 *         ret['badroutes'] = data.m_badroutes
 *         ret['noack'] = data.m_noack
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_callbacks); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__callbacks), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":997
 *         ret['retries'] = data.m_retries
 *         ret['callbacks'] = data.m_callbacks
 *         ret['badroutes'] = data.m_badroutes             # <<<<<<<<<<<<<<
 *         ret['noack'] = data.m_noack
 *         ret['netbusy'] = data.m_netbusy
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_badroutes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__badroutes), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":998
 *         ret['callbacks'] = data.m_callbacks
 *         ret['badroutes'] = data.m_badroutes
 *         ret['noack'] = data.m_noack             # <<<<<<<<<<<<<<
 *         ret['netbusy'] = data.m_netbusy
 *         ret['nondelivery'] = data.m_nondelivery
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_noack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__noack), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":999
 *         ret['badroutes'] = data.m_badroutes
 *         ret['noack'] = data.m_noack
 *         ret['netbusy'] = data.m_netbusy             # <<<<<<<<<<<<<<
 *         ret['nondelivery'] = data.m_nondelivery
 *         ret['routedbusy'] = data.m_routedbusy
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_netbusy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__netbusy), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1000
 *         ret['noack'] = data.m_noack
 *         ret['netbusy'] = data.m_netbusy
 *         ret['nondelivery'] = data.m_nondelivery             # <<<<<<<<<<<<<<
 *         ret['routedbusy'] = data.m_routedbusy
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_nondelivery); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__nondelivery), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1001
 *         ret['netbusy'] = data.m_netbusy
 *         ret['nondelivery'] = data.m_nondelivery
 *         ret['routedbusy'] = data.m_routedbusy             # <<<<<<<<<<<<<<
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_routedbusy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__routedbusy), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1002
 *         ret['nondelivery'] = data.m_nondelivery
 *         ret['routedbusy'] = data.m_routedbusy
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt             # <<<<<<<<<<<<<<
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt
 *         return ret
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_broadcastReadCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__broadcastReadCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1003
 *         ret['routedbusy'] = data.m_routedbusy
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_broadcastWriteCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__broadcastWriteCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1004
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def testNetwork(self, homeid, count):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getDriverStatistics");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1006
 *         return ret
 * 
 *     def testNetwork(self, homeid, count):             # <<<<<<<<<<<<<<
 *         '''
 * .. _testNetwork:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_19testNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_19testNetwork[] = "\n.. _testNetwork:\n\nTest network.\n\nSends a series of messages to every node on the network for testing network reliability.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param count: This is the number of test messages to send.\n:type count: int\n:see: testNetworkNode_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_19testNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_count = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint32_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__count,0};
  __Pyx_RefNannySetupContext("testNetwork");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__count);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("testNetwork", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "testNetwork") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_count = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_count = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testNetwork", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetwork");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1021
 * 
 *         '''
 *         self.manager.TestNetwork(homeid, count)             # <<<<<<<<<<<<<<
 * 
 *     def healNetworkNode(self, homeid, nodeid,  upNodeRoute = False):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_count); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->TestNetwork(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetwork");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1023
 *         self.manager.TestNetwork(homeid, count)
 * 
 *     def healNetworkNode(self, homeid, nodeid,  upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetworkNode:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_20healNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_20healNetworkNode[] = "\n.. _healNetworkNode:\n\nHeal a single node in the network.\n\nTry to heal node by requesting neighbor update and optional route update.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node to query.\n:type nodeid: int\n:param upNodeRoute: Optional force update node route (default = false).\n:type upNodeRoute: bool\n:see: healNetwork_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_20healNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_upNodeRoute = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint32_t __pyx_t_2;
  bool __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__upNodeRoute,0};
  __Pyx_RefNannySetupContext("healNetworkNode");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k_12;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("healNetworkNode", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upNodeRoute);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "healNetworkNode") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_upNodeRoute = values[2];
  } else {
    __pyx_v_upNodeRoute = __pyx_k_12;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_upNodeRoute = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2:
      __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("healNetworkNode", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetworkNode");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1039
 * :see: healNetwork_
 *         '''
 *         self.manager.HealNetworkNode(homeid, nodeid,  upNodeRoute)             # <<<<<<<<<<<<<<
 * 
 *     def healNetwork(self, homeid, upNodeRoute = False):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_upNodeRoute); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->HealNetworkNode(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetworkNode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1041
 *         self.manager.HealNetworkNode(homeid, nodeid,  upNodeRoute)
 * 
 *     def healNetwork(self, homeid, upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetwork:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_21healNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_21healNetwork[] = "\n.. _healNetwork:\n\nHeal the Z-Wave network one node at a time.\n\nTry to heal all nodes (one by one) by requesting neighbor update and optional route update.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param upNodeRoute: Optional force update node route (default = false).\n:type upNodeRoute: bool\n:see: healNetworkNode_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_21healNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_upNodeRoute = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  bool __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__upNodeRoute,0};
  __Pyx_RefNannySetupContext("healNetwork");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k_13;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upNodeRoute);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "healNetwork") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_upNodeRoute = values[1];
  } else {
    __pyx_v_upNodeRoute = __pyx_k_13;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_upNodeRoute = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("healNetwork", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetwork");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1055
 * :see: healNetworkNode_
 *         '''
 *         self.manager.HealNetwork(homeid, upNodeRoute)             # <<<<<<<<<<<<<<
 * 
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_upNodeRoute); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->HealNetwork(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetwork");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1064
 * # detect status changes.
 * #
 *     def getPollInterval(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPollInterval:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_22getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_22getPollInterval[] = "\n.. _getPollInterval:\n\nGet the time period between polls of a nodes state\n\n:return: The number of milliseconds between polls\n:rtype: int\n:see: setPollInterval_, enablePoll_, isPolled_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_22getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPollInterval");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1075
 * 
 *         '''
 *         return self.manager.GetPollInterval()             # <<<<<<<<<<<<<<
 * 
 *     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint32_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetPollInterval()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPollInterval");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1077
 *         return self.manager.GetPollInterval()
 * 
 *     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollInterval:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_23setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_23setPollInterval[] = "\n.. _setPollInterval:\n\nSet the time period between polls of a nodes state.\n\nDue to patent concerns, some devices do not report state changes automatically\nto the controller.  These devices need to have their state polled at regular\nintervals.  The length of the interval is the same for all devices.  To even\nout the Z-Wave network traffic generated by polling, OpenZWave divides the\npolling interval by the number of devices that have polling enabled, and polls\neach in turn.  It is recommended that if possible, the interval should not be\nset shorter than the number of polled devices in seconds (so that the network\ndoes not have to cope with more than one poll per second).\n\n:param milliseconds: The length of the polling interval in milliseconds.\n:type milliseconds: int\n:param bIntervalBetweenPolls: If true, the library intersperses m_pollInterval between polls.\n                                               If false, the library attempts to complete all polls within m_pollInterval\n:type bIntervalBetweenPolls: bool\n:see: getPollInterval_, enablePoll_, isPolled_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_23setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_milliseconds = 0;
  PyObject *__pyx_v_bIntervalBetweenPolls = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__milliseconds,&__pyx_n_s_14,0};
  __Pyx_RefNannySetupContext("setPollInterval");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__milliseconds);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_14);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setPollInterval", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setPollInterval") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_milliseconds = values[0];
    __pyx_v_bIntervalBetweenPolls = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_milliseconds = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_bIntervalBetweenPolls = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPollInterval", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollInterval");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1100
 * 
 *         '''
 *         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)             # <<<<<<<<<<<<<<
 * 
 *     def enablePoll(self, id, intensity = 1):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_milliseconds); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetPollInterval(__pyx_t_1, __pyx_v_bIntervalBetweenPolls);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollInterval");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1102
 *         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)
 * 
 *     def enablePoll(self, id, intensity = 1):             # <<<<<<<<<<<<<<
 *         '''
 * .. _enablePoll:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_24enablePoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_24enablePoll[] = "\n.. _enablePoll:\n\nEnable the polling of a device's state.\n\n:param id: The ID of the value to start polling\n:type id: int\n:param intensity: The intensity of the poll\n:type intensity: int\n:return: True if polling was enabled.\n:rtype: bool\n:see: getPollInterval_, setPollInterval_, isPolled_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_24enablePoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_intensity = 0;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__intensity,0};
  __Pyx_RefNannySetupContext("enablePoll");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__intensity);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "enablePoll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_intensity = values[1];
  } else {
    __pyx_v_intensity = ((PyObject *)__pyx_int_1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_intensity = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enablePoll", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.enablePoll");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1117
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.EnablePoll(values_map.at(id), intensity)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1118
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.EnablePoll(values_map.at(id), intensity)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_intensity); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->EnablePoll(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1120
 *             return self.manager.EnablePoll(values_map.at(id), intensity)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def disablePoll(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.enablePoll");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1122
 *             return False
 * 
 *     def disablePoll(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _disablePoll:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_25disablePoll(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_25disablePoll[] = "\n.. _disablePoll:\n\nDisable polling of a value.\n\n:param id: The ID of the value to disable polling.\n:type id: int\n:return: True if polling was disabled.\n:rtype: bool\n:see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, setPollIntensity_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_25disablePoll(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("disablePoll");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1135
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.DisablePoll(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1136
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.DisablePoll(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->DisablePoll(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1138
 *             return self.manager.DisablePoll(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def isPolled(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.disablePoll");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1140
 *             return False
 * 
 *     def isPolled(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPolled:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_26isPolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_26isPolled[] = "\n.. _isPolled:\n\nCheck polling status of a value\n\n:param id: The ID of the value to check polling.\n:type id: int\n:return: True if polling is active.\n:rtype: bool\n:see: getPollInterval_, setPollInterval_, enablePoll_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_26isPolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isPolled");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1153
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.isPolled(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1154
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.isPolled(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->isPolled(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1156
 *             return self.manager.isPolled(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getPollIntensity(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isPolled");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1158
 *             return False
 * 
 *     def getPollIntensity(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPollIntensity:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_27getPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_27getPollIntensity[] = "\n.. _getPollIntensity:\n\nGet the intensity with which this value is polled (0=none, 1=every time through the list, 2-every other time, etc).\n:param id: The ID of a value.\n:type id: int\n:return: A integer containing the poll intensity\n:rtype: int\n:see: getPollInterval_, setPollInterval_, enablePoll_, setPollIntensity_, disablePoll_, isPolled_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_27getPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_intensity;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getPollIntensity");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1170
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             intensity = self.manager.GetPollIntensity(values_map.at(id))
 *             return intensity
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1171
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             intensity = self.manager.GetPollIntensity(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return intensity
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_intensity = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetPollIntensity(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1172
 *         if values_map.find(id) != values_map.end():
 *             intensity = self.manager.GetPollIntensity(values_map.at(id))
 *             return intensity             # <<<<<<<<<<<<<<
 *         else :
 *             return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_intensity); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1174
 *             return intensity
 *         else :
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     def setPollIntensity(self, id, intensity):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPollIntensity");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1176
 *             return 0
 * 
 *     def setPollIntensity(self, id, intensity):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollIntensity:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_28setPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_28setPollIntensity[] = "\n.. _setPollIntensity:\n\nSet the frequency of polling (0=none, 1=every time through the set, 2-every other time, etc)\n\n:param id: The ID of the value whose intensity should be set\n:type id: int\n:param intensity: the intensity of the poll\n:type intensity: int\n:see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_28setPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_intensity = 0;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__intensity,0};
  __Pyx_RefNannySetupContext("setPollIntensity");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__intensity);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setPollIntensity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setPollIntensity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_intensity = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_intensity = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPollIntensity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollIntensity");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1189
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetPollIntensity(values_map.at(id), intensity)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1190
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetPollIntensity(values_map.at(id), intensity)             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_intensity); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetPollIntensity(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3);
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollIntensity");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1199
 * #
 * 
 *     def testNetworkNode(self, homeid, nodeid, count):             # <<<<<<<<<<<<<<
 *         '''
 * .. _testNetworkNode:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_29testNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_29testNetworkNode[] = "\n.. _testNetworkNode:\n\nTest network node.\n\nSends a series of messages to a network node for testing network reliability.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node to query.\n:type nodeid: int\n:param count: This is the number of test messages to send.\n:type count: int\n:see: testNetwork_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_29testNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_count = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint32_t __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__count,0};
  __Pyx_RefNannySetupContext("testNetworkNode");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("testNetworkNode", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__count);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("testNetworkNode", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "testNetworkNode") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_count = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_count = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testNetworkNode", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetworkNode");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1216
 * 
 *         '''
 *         self.manager.TestNetworkNode(homeid, nodeid, count)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeStatistics(self, homeId, nodeId):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_count); if (unlikely((__pyx_t_3 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->TestNetworkNode(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetworkNode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1218
 *         self.manager.TestNetworkNode(homeid, nodeid, count)
 * 
 *     def getNodeStatistics(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeStatistics:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_30getNodeStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_30getNodeStatistics[] = "\n.. _getNodeStatistics:\n\nRetrieve statistics per node\n\nStatistics:\n\n    cdef struct NodeData:\n        * sentCnt                              # Number of messages sent from this node.\n        * sentFailed                           # Number of sent messages failed\n        * retries                                # Number of message retries\n        * receivedCnt                        # Number of messages received from this node.\n        * receivedDups                      # Number of duplicated messages received;\n        * receivedUnsolicited             # Number of messages received unsolicited\n        * sentTS                                # Last message sent time\n        * receivedTS                          # Last message received time\n        * lastRequestRTT                    # Last message request RTT\n        * averageRequestRTT             # Average Request Round Trip Time (ms).\n        * lastResponseRTT                  # Last message response RTT\n        * averageResponseRTT           #Average Reponse round trip time.\n        * quality                                # Node quality measure\n        * lastReceivedMessage[254]   # Place to hold last received message\n        * ccData                                # List of statistic\n              * commandClassId               # Num of commandClass id.\n              * sentCnt                             # Number of messages sent from this CommandClass.\n              * receivedCnt                       # Number of messages received from this CommandClass.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param data: Pointer to structure NodeData to return values\n:type data: int\n:return: A dict containing statistics of the node.\n:rtype: dict()\n:see: getDriverStatistics_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_30getNodeStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  __pyx_t_4node_NodeData_t __pyx_v_data;
  PyObject *__pyx_v_ret;
  long __pyx_v_i;
  PyObject *__pyx_v_listccdata;
  PyObject *__pyx_v_ccd;
  struct OpenZWave::Node::CommandClassData __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeId,&__pyx_n_s__nodeId,0};
  __Pyx_RefNannySetupContext("getNodeStatistics");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeId);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeId);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeStatistics", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeStatistics") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeId = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeId = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeStatistics", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeStatistics");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_ret = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_listccdata = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_ccd = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1259
 * 
 *         cdef NodeData_t data
 *         self.manager.GetNodeStatistics( homeId, nodeId, &data );             # <<<<<<<<<<<<<<
 *         ret = {}
 *         ret['sentCnt'] = data.m_sentCnt
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeStatistics(__pyx_t_1, __pyx_t_2, (&__pyx_v_data));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1260
 *         cdef NodeData_t data
 *         self.manager.GetNodeStatistics( homeId, nodeId, &data );
 *         ret = {}             # <<<<<<<<<<<<<<
 *         ret['sentCnt'] = data.m_sentCnt
 *         ret['sentFailed'] = data.m_sentFailed
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_v_ret));
  __pyx_v_ret = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1261
 *         self.manager.GetNodeStatistics( homeId, nodeId, &data );
 *         ret = {}
 *         ret['sentCnt'] = data.m_sentCnt             # <<<<<<<<<<<<<<
 *         ret['sentFailed'] = data.m_sentFailed
 *         ret['retries'] = data.m_retries
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_sentCnt); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__sentCnt), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1262
 *         ret = {}
 *         ret['sentCnt'] = data.m_sentCnt
 *         ret['sentFailed'] = data.m_sentFailed             # <<<<<<<<<<<<<<
 *         ret['retries'] = data.m_retries
 *         ret['receivedCnt'] = data.m_receivedCnt
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_sentFailed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__sentFailed), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1263
 *         ret['sentCnt'] = data.m_sentCnt
 *         ret['sentFailed'] = data.m_sentFailed
 *         ret['retries'] = data.m_retries             # <<<<<<<<<<<<<<
 *         ret['receivedCnt'] = data.m_receivedCnt
 *         ret['receivedDups'] = data.m_receivedDups
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_retries); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__retries), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1264
 *         ret['sentFailed'] = data.m_sentFailed
 *         ret['retries'] = data.m_retries
 *         ret['receivedCnt'] = data.m_receivedCnt             # <<<<<<<<<<<<<<
 *         ret['receivedDups'] = data.m_receivedDups
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_receivedCnt); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__receivedCnt), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1265
 *         ret['retries'] = data.m_retries
 *         ret['receivedCnt'] = data.m_receivedCnt
 *         ret['receivedDups'] = data.m_receivedDups             # <<<<<<<<<<<<<<
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 *         ret['sentTS'] = data.m_sentTS.c_str()
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_receivedDups); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__receivedDups), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1266
 *         ret['receivedCnt'] = data.m_receivedCnt
 *         ret['receivedDups'] = data.m_receivedDups
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited             # <<<<<<<<<<<<<<
 *         ret['sentTS'] = data.m_sentTS.c_str()
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_receivedUnsolicited); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__receivedUnsolicited), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1267
 *         ret['receivedDups'] = data.m_receivedDups
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 *         ret['sentTS'] = data.m_sentTS.c_str()             # <<<<<<<<<<<<<<
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 */
  __pyx_t_3 = PyBytes_FromString(__pyx_v_data.m_sentTS.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__sentTS), ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1268
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 *         ret['sentTS'] = data.m_sentTS.c_str()
 *         ret['receivedTS'] = data.m_receivedTS.c_str()             # <<<<<<<<<<<<<<
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 */
  __pyx_t_3 = PyBytes_FromString(__pyx_v_data.m_receivedTS.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__receivedTS), ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1269
 *         ret['sentTS'] = data.m_sentTS.c_str()
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT             # <<<<<<<<<<<<<<
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_lastRequestRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__lastRequestRTT), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1270
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT             # <<<<<<<<<<<<<<
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_averageRequestRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__averageRequestRTT), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1271
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT             # <<<<<<<<<<<<<<
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 *         ret['quality'] = data.m_quality
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_lastResponseRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__lastResponseRTT), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1272
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT             # <<<<<<<<<<<<<<
 *         ret['quality'] = data.m_quality
 *         ret['lastReceivedMessage'] = []
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_data.m_averageResponseRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__averageResponseRTT), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1273
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 *         ret['quality'] = data.m_quality             # <<<<<<<<<<<<<<
 *         ret['lastReceivedMessage'] = []
 *         for i in range( 0, 254) :
 */
  __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_data.m_quality); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__quality), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1274
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 *         ret['quality'] = data.m_quality
 *         ret['lastReceivedMessage'] = []             # <<<<<<<<<<<<<<
 *         for i in range( 0, 254) :
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__lastReceivedMessage), ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1275
 *         ret['quality'] = data.m_quality
 *         ret['lastReceivedMessage'] = []
 *         for i in range( 0, 254) :             # <<<<<<<<<<<<<<
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 *         listccdata =[]
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 254; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1276
 *         ret['lastReceivedMessage'] = []
 *         for i in range( 0, 254) :
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])             # <<<<<<<<<<<<<<
 *         listccdata =[]
 *         while not data.m_ccData.empty() :
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__lastReceivedMessage)); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_to_py_uint8_t((__pyx_v_data.m_lastReceivedMessage[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1277
 *         for i in range( 0, 254) :
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 *         listccdata =[]             # <<<<<<<<<<<<<<
 *         while not data.m_ccData.empty() :
 *             ccd = {}
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
  __Pyx_DECREF(((PyObject *)__pyx_v_listccdata));
  __pyx_v_listccdata = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1278
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 *         listccdata =[]
 *         while not data.m_ccData.empty() :             # <<<<<<<<<<<<<<
 *             ccd = {}
 *             temp = data.m_ccData.back()
 */
  while (1) {
    __pyx_t_7 = (!__pyx_v_data.m_ccData.empty());
    if (!__pyx_t_7) break;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1279
 *         listccdata =[]
 *         while not data.m_ccData.empty() :
 *             ccd = {}             # <<<<<<<<<<<<<<
 *             temp = data.m_ccData.back()
 *             ccd['commandClassId'] = temp.m_commandClassId
 */
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_DECREF(((PyObject *)__pyx_v_ccd));
    __pyx_v_ccd = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1280
 *         while not data.m_ccData.empty() :
 *             ccd = {}
 *             temp = data.m_ccData.back()             # <<<<<<<<<<<<<<
 *             ccd['commandClassId'] = temp.m_commandClassId
 *             ccd['sentCnt'] = temp.m_sentCnt
 */
    __pyx_v_temp = __pyx_v_data.m_ccData.back();

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1281
 *             ccd = {}
 *             temp = data.m_ccData.back()
 *             ccd['commandClassId'] = temp.m_commandClassId             # <<<<<<<<<<<<<<
 *             ccd['sentCnt'] = temp.m_sentCnt
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 */
    __pyx_t_6 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_temp.m_commandClassId); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(((PyObject *)__pyx_v_ccd), ((PyObject *)__pyx_n_s__commandClassId), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1282
 *             temp = data.m_ccData.back()
 *             ccd['commandClassId'] = temp.m_commandClassId
 *             ccd['sentCnt'] = temp.m_sentCnt             # <<<<<<<<<<<<<<
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 *             listccdata.append(ccd)
 */
    __pyx_t_6 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_temp.m_sentCnt); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(((PyObject *)__pyx_v_ccd), ((PyObject *)__pyx_n_s__sentCnt), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1283
 *             ccd['commandClassId'] = temp.m_commandClassId
 *             ccd['sentCnt'] = temp.m_sentCnt
 *             ccd['receivedCnt']  = temp.m_receivedCnt             # <<<<<<<<<<<<<<
 *             listccdata.append(ccd)
 *             data.m_ccData.pop_back();
 */
    __pyx_t_6 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_temp.m_receivedCnt); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(((PyObject *)__pyx_v_ccd), ((PyObject *)__pyx_n_s__receivedCnt), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1284
 *             ccd['sentCnt'] = temp.m_sentCnt
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 *             listccdata.append(ccd)             # <<<<<<<<<<<<<<
 *             data.m_ccData.pop_back();
 *         ret['ccData'] = listccdata
 */
    if (unlikely(__pyx_v_listccdata == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1284; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_8 = PyList_Append(__pyx_v_listccdata, ((PyObject *)__pyx_v_ccd)); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1285
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 *             listccdata.append(ccd)
 *             data.m_ccData.pop_back();             # <<<<<<<<<<<<<<
 *         ret['ccData'] = listccdata
 *         return ret
 */
    __pyx_v_data.m_ccData.pop_back();
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1286
 *             listccdata.append(ccd)
 *             data.m_ccData.pop_back();
 *         ret['ccData'] = listccdata             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__ccData), ((PyObject *)__pyx_v_listccdata)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1287
 *             data.m_ccData.pop_back();
 *         ret['ccData'] = listccdata
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def requestNodeDynamic(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeStatistics");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_DECREF(__pyx_v_listccdata);
  __Pyx_DECREF(__pyx_v_ccd);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1289
 *         return ret
 * 
 *     def requestNodeDynamic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeDynamic:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_31requestNodeDynamic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_31requestNodeDynamic[] = "\n.. _requestNodeDynamic:\n\nTrigger the fetching of fixed data about a node.\n\nCauses the nodes data to be obtained from the Z-Wave network in the same way\nas if it had just been added.  This method would normally be called\nautomatically by OpenZWave, but if you know that a node has been changed,\ncalling this method will force a refresh of the data held by the library.  This\ncan be especially useful for devices that were asleep when the application was\nfirst run.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the request was sent successfully.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_31requestNodeDynamic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestNodeDynamic");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestNodeDynamic", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestNodeDynamic") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestNodeDynamic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeDynamic");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1310
 * 
 *         '''
 *         return self.manager.RequestNodeDynamic(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def refreshNodeInfo(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestNodeDynamic(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeDynamic");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1312
 *         return self.manager.RequestNodeDynamic(homeid, nodeid)
 * 
 *     def refreshNodeInfo(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshNodeInfo:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_32refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_32refreshNodeInfo[] = "\n.. _refreshNodeInfo:\n\nTrigger the fetching of fixed data about a node.\n\nCauses the nodes data to be obtained from the Z-Wave network in the same way\nas if it had just been added.  This method would normally be called\nautomatically by OpenZWave, but if you know that a node has been changed,\ncalling this method will force a refresh of the data held by the library.  This\ncan be especially useful for devices that were asleep when the application was\nfirst run.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the request was sent successfully.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_32refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("refreshNodeInfo");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "refreshNodeInfo") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshNodeInfo");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1333
 * 
 *         '''
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def requestNodeState(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RefreshNodeInfo(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshNodeInfo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1335
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)
 * 
 *     def requestNodeState(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeState:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_33requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_33requestNodeState[] = "\n.. _requestNodeState:\n\nTrigger the fetching of just the dynamic value data for a node.\nCauses the node's values to be requested from the Z-Wave network. This is the\nsame as the query state starting from the dynamic state.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the request was sent successfully.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_33requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestNodeState");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestNodeState") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeState");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1351
 * 
 *         '''
 *         return self.manager.RequestNodeState(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeBeamingDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestNodeState(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeState");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1353
 *         return self.manager.RequestNodeState(homeid, nodeid)
 * 
 *     def isNodeBeamingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeBeamingDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_34isNodeBeamingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_34isNodeBeamingDevice[] = "\n.. _isNodeBeamingDevice:\n\nGet whether the node is a beam capable device.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node is a beaming device\n:rtype: bool\n:see: isNodeListeningDevice_, isNodeFrequentListeningDevice_, isNodeSecurityDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_34isNodeBeamingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeBeamingDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeBeamingDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeBeamingDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeBeamingDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeBeamingDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1368
 * 
 *         '''
 *         return self.manager.IsNodeBeamingDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeBeamingDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeBeamingDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1371
 * 
 * 
 *     def isNodeListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeListeningDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_35isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_35isNodeListeningDevice[] = "\n.. _isNodeListeningDevice:\n\nGet whether the node is a setening device that does not go to sleep\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if it is a setening node.\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeFrequentListeningDevice_, isNodeSecurityDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_35isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeListeningDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeListeningDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeListeningDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1386
 * 
 *         '''
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeFrequentListeningDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeListeningDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeListeningDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1388
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)
 * 
 *     def isNodeFrequentListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeFrequentListeningDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_36isNodeFrequentListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_36isNodeFrequentListeningDevice[] = "\n.. _isNodeFrequentListeningDevice:\n\nGet whether the node is a frequent setening device that goes to sleep but\ncan be woken up by a beam. Useful to determine node and controller consistency.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if it is a frequent setening node.\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeListeningDevice_, isNodeSecurityDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_36isNodeFrequentListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeFrequentListeningDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeFrequentListeningDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeFrequentListeningDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeFrequentListeningDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFrequentListeningDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1404
 * 
 *         '''
 *         return self.manager.IsNodeFrequentListeningDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeSecurityDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeFrequentListeningDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFrequentListeningDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1406
 *         return self.manager.IsNodeFrequentListeningDevice(homeid, nodeid)
 * 
 *     def isNodeSecurityDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeSecurityDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_37isNodeSecurityDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_37isNodeSecurityDevice[] = "\n.. _isNodeSecurityDevice:\n\nGet the security attribute for a node. True if node supports security features.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if security features implemented.\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeListeningDevice_, isNodeFrequentListeningDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_37isNodeSecurityDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeSecurityDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeSecurityDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeSecurityDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeSecurityDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeSecurityDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1421
 * 
 *         '''
 *         return self.manager.IsNodeSecurityDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeSecurityDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeSecurityDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1423
 *         return self.manager.IsNodeSecurityDevice(homeid, nodeid)
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeRoutingDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_38isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_38isNodeRoutingDevice[] = "\n.. _isNodeRoutingDevice:\n\nGet whether the node is a routing device that passes messages to other nodes\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node is a routing device\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeListeningDevice_, isNodeFrequentListeningDevice_, isNodeSecurityDevice_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_38isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeRoutingDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeRoutingDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeRoutingDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1438
 * 
 *         '''
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeRoutingDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeRoutingDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1440
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeMaxBaudRate:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_39getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_39getNodeMaxBaudRate[] = "\n.. _getNodeMaxBaudRate:\n\nGet the maximum baud rate of a nodes communications\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The baud rate in bits per second.\n:rtype: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_39getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeMaxBaudRate");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeMaxBaudRate") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeMaxBaudRate");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1454
 * 
 *         '''
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeVersion(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeMaxBaudRate(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeMaxBaudRate");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1456
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)
 * 
 *     def getNodeVersion(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeVersion:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_40getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_40getNodeVersion[] = "\n.. _getNodeVersion:\n\nGet the version number of a node\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node version number\n:rtype: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_40getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeVersion");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1456; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeVersion") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1456; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1456; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeVersion");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1470
 * 
 *         '''
 *         return self.manager.GetNodeVersion(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSecurity(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeVersion(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1472
 *         return self.manager.GetNodeVersion(homeid, nodeid)
 * 
 *     def getNodeSecurity(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSecurity:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_41getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_41getNodeSecurity[] = "\n.. _getNodeSecurity:\n\nGet the security byte for a node.  Bit meanings are still to be determined.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node security byte\n:rtype: int\n:see: getNodeType_, getNodeSpecific_, getNodeGeneric_, getNodeBasic_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_41getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeSecurity");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeSecurity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1472; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSecurity");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1487
 * 
 *         '''
 *         return self.manager.GetNodeSecurity(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeBasic(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeSecurity(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSecurity");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1489
 *         return self.manager.GetNodeSecurity(homeid, nodeid)
 * 
 *     def getNodeBasic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeBasic:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_42getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_42getNodeBasic[] = "\n.. _getNodeBasic:\n\nGet the basic type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node basic type.\n:rtype: int\n:see: getNodeType_, getNodeSpecific_, getNodeGeneric_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_42getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeBasic");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1489; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeBasic") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1489; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1489; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeBasic");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1504
 * 
 *         '''
 *         return self.manager.GetNodeBasic(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeGeneric(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeBasic(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeBasic");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1506
 *         return self.manager.GetNodeBasic(homeid, nodeid)
 * 
 *     def getNodeGeneric(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeGeneric:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_43getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_43getNodeGeneric[] = "\n.. _getNodeGeneric:\n\nGet the generic type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node generic type.\n:rtype: int\n:see: getNodeType_, getNodeSpecific_, getNodeBasic_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_43getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeGeneric");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeGeneric") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeGeneric");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1521
 * 
 *         '''
 *         return self.manager.GetNodeGeneric(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSpecific(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeGeneric(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeGeneric");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1523
 *         return self.manager.GetNodeGeneric(homeid, nodeid)
 * 
 *     def getNodeSpecific(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSpecific:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_44getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_44getNodeSpecific[] = "\n.. _getNodeSpecific:\n\nGet the specific type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type homeId: int\n:return: int -- The node specific type.\n:see: getNodeType_, getNodeGeneric_, getNodeBasic_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_44getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeSpecific");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeSpecific") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSpecific");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1537
 * 
 *         '''
 *         return self.manager.GetNodeSpecific(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeSpecific(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSpecific");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1539
 *         return self.manager.GetNodeSpecific(homeid, nodeid)
 * 
 *     def getNodeType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeType:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_45getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_45getNodeType[] = "\n.. _getNodeType:\n\nGet a human-readable label describing the node\n\nThe label is taken from the Z-Wave specific, generic or basic type, depending\non which of those values are specified by the node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the label text.\n:rtype: str\n:see: getNodeSpecific_, getNodeGeneric_, getNodeBasic_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_45getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeType");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeType");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1557
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeType(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1558
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeType");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1560
 *         return c_string.c_str()
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeNeighbors:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_46getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_46getNodeNeighbors[] = "\n.. _getNodeNeighbors:\n\nGet the bitmap of this node's neighbors.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A set containing neighboring node IDs\n:rtype: set()\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_46getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_data;
  uint8_t **__pyx_v_dbuf;
  uint32_t __pyx_v_count;
  struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_retuint8 = 0;
  uint8_t *__pyx_v_p;
  uint32_t __pyx_v_start;
  uint32_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  uint32_t __pyx_t_2;
  uint8_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  uint32_t __pyx_t_6;
  int __pyx_t_7;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeNeighbors");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeNeighbors") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighbors");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_data = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1574
 * 
 *         '''
 *         data = set()             # <<<<<<<<<<<<<<
 *         #Allocate memory for the c++ function
 *         #Return value is pointer to uint8_t[]
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_data));
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1577
 *         #Allocate memory for the c++ function
 *         #Return value is pointer to uint8_t[]
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*29)             # <<<<<<<<<<<<<<
 *         #Get the number of neigbors
 *         cdef uint32_t count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 */
  __pyx_v_dbuf = ((uint8_t **)malloc(((sizeof(uint8_t)) * 29)));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1579
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*29)
 *         #Get the number of neigbors
 *         cdef uint32_t count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)             # <<<<<<<<<<<<<<
 *         if count == 0:
 *             #Don't need to allocate memory.
 */
  __pyx_t_2 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeNeighbors(__pyx_t_2, __pyx_t_3, __pyx_v_dbuf);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1580
 *         #Get the number of neigbors
 *         cdef uint32_t count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 *         if count == 0:             # <<<<<<<<<<<<<<
 *             #Don't need to allocate memory.
 *             free(dbuf)
 */
  __pyx_t_4 = (__pyx_v_count == 0);
  if (__pyx_t_4) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1582
 *         if count == 0:
 *             #Don't need to allocate memory.
 *             free(dbuf)             # <<<<<<<<<<<<<<
 *             return data
 *         #Allocate memory for the returned values
 */
    free(__pyx_v_dbuf);

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1583
 *             #Don't need to allocate memory.
 *             free(dbuf)
 *             return data             # <<<<<<<<<<<<<<
 *         #Allocate memory for the returned values
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_data));
    __pyx_r = ((PyObject *)__pyx_v_data);
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1585
 *             return data
 *         #Allocate memory for the returned values
 *         cdef RetAlloc retuint8 = RetAlloc(count)             # <<<<<<<<<<<<<<
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_RetAlloc)), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __pyx_v_retuint8 = ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1587
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1588
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
  if (__pyx_v_count) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1589
 *         cdef uint32_t start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
    /*try:*/ {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1590
 *         if count:
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     #cdef uint8_t = retuint8[i]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1591
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     #cdef uint8_t = retuint8[i]
 *                     retuint8.data[i] = p[0]
 */
      __pyx_t_2 = __pyx_v_count;
      for (__pyx_t_6 = __pyx_v_start; __pyx_t_6 < __pyx_t_2; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1593
 *                 for i in range(start, count):
 *                     #cdef uint8_t = retuint8[i]
 *                     retuint8.data[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8.data[i])
 *                     p += 1
 */
        (__pyx_v_retuint8->data[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1594
 *                     #cdef uint8_t = retuint8[i]
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *             finally:
 */
        if (unlikely(__pyx_v_data == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'add'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L9;} 
        }
        __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t((__pyx_v_retuint8->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PySet_Add(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1595
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *             finally:
 *                 #Free memory
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1598
 *             finally:
 *                 #Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return data
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L10;
      __pyx_L9: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L10;
      }
      __pyx_L10:;
      free(__pyx_v_dbuf);
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1600
 *                 free(dbuf)
 *                 pass
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighbors");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_retuint8);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1602
 *         return data
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 *         .. _getNodeManufacturerName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_47getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_47getNodeManufacturerName[] = "\n        .. _getNodeManufacturerName:\n\nGet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes manufacturer name.\n:rtype: str\n:see: setNodeManufacturerName_, getNodeProductName_, setNodeProductName_,     getNodeManufacturerId_, getNodeProductId_, getNodeProductType_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_47getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_manufacturer_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeManufacturerName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1626
 * 
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return manufacturer_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_manufacturer_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeManufacturerName(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1627
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)
 *         return manufacturer_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_manufacturer_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1629
 *         return manufacturer_string.c_str()
 * 
 *     def getNodeProductName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_48getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_48getNodeProductName[] = "\n.. _getNodeProductName:\n\nGet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: str -- A string containing the nodes product name.\n:see: setNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_,     getNodeManufacturerId_, getNodeProductId_, getNodeProductType_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_48getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_productname_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1652
 * 
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return productname_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_productname_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductName(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1653
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)
 *         return productname_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_productname_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1655
 *         return productname_string.c_str()
 * 
 *     def getNodeName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_49getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_49getNodeName[] = "\n.. _getNodeName:\n\nGet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and SetNodeName, rather than reporting it\nvia a command class Value object.  The maximum length of a node name is 16\ncharacters.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: str -- A string containing the node name.\n:see: setNodeName_, getNodeLocation_, setNodeLocation_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_49getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1676
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeName(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1677
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeLocation(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1679
 *         return c_string.c_str()
 * 
 *     def getNodeLocation(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeLocation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_50getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_50getNodeLocation[] = "\n.. _getNodeLocation:\n\nGet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and SetNodeLocation, rather than\nreporting it via a command class Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: str -- A string containing the nodes location.\n:see: setNodeLocation_, getNodeName_, setNodeName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_50getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeLocation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeLocation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1699
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeLocation(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1700
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeLocation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1702
 *         return c_string.c_str()
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeManufacturerId:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_51getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_51getNodeManufacturerId[] = "\n.. _getNodeManufacturerId:\n\nGet the manufacturer ID of a device\n\nThe manufacturer ID is a four digit hex code and would normally be handled by\nthe Manufacturer-Specific commmand class, but not all devices support it.\nAlthough the value reported by this method will be an empty string if the\ncommand class is not supported and cannot be set by the user, the manufacturer\nID is still stored with the node data (rather than being reported via a command\nclass Value object) to retain a consistent approach with the other manufacturer\nspecific data.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes manufacturer ID, or an empty string if the manufactuer-specific command class is not supported by the device.\n:rtype: str\n:see: getNodeProductType_, getNodeProductId_, getNodeManufacturerName_, setNodeManufacturerName_,     getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_51getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeManufacturerId");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeManufacturerId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerId");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1726
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeManufacturerId(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1727
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerId");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1729
 *         return c_string.c_str()
 * 
 *     def getNodeProductType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductType:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_52getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_52getNodeProductType[] = "\n.. _getNodeProductType:\n\nGet the product type of a device\n\nThe product type is a four digit hex code and would normally be handled by the\nManufacturer Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product type is still\nstored with the node data (rather than being reported via a command class Value\nobject) to retain a consistent approach with the other manufacturer specific\ndata.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes product type, or an empty string if the manufactuer-specific command class is not supported by the device.\n:rtype: str\n:see: getNodeManufacturerId_, getNodeProductId_, getNodeManufacturerName_, setNodeManufacturerName_,     getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_52getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductType");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductType");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1753
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductType(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1754
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductType");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1756
 *         return c_string.c_str()
 * 
 *     def getNodeProductId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductId:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_53getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_53getNodeProductId[] = "\n.. _getNodeProductId:\n\nGet the product ID of a device\n\nThe product ID is a four digit hex code and would normally be handled by the\nManufacturer-Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product ID is still stored\nwith the node data (rather than being reported via a command class Value\nobject)  to retain a consistent approach with the other manufacturer specific\ndata.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes product ID, or an empty string if the manufactuer-specific command class is not supported by the device.\n:rtype: str\n:see: getNodeManufacturerId_, getNodeProductType_, getNodeManufacturerName_, setNodeManufacturerName_, getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_53getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductId");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductId");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1779
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductId(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1780
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductId");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1782
 *         return c_string.c_str()
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeManufacturerName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_54setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_54setNodeManufacturerName[] = "\n.. _setNodeManufacturerName:\n\nSet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param manufacturerName: A string containing the nodess manufacturer name.\n:type manufacturerName: str\n:see: getNodeManufacturerName_, getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_54setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_manufacturerName;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__manufacturerName,0};
  __Pyx_RefNannySetupContext("setNodeManufacturerName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__manufacturerName);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_manufacturerName = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_manufacturerName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_manufacturerName = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_manufacturerName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeManufacturerName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1805
 * 
 *         '''
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeManufacturerName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_manufacturerName));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeManufacturerName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1807
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeProductName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_55setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_55setNodeProductName[] = "\n.. _setNodeProductName:\n\nSet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param productName: A string containing the nodes product name.\n:type productName: str\n:see: getNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_55setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_productName;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__productName,0};
  __Pyx_RefNannySetupContext("setNodeProductName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__productName);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_productName = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_productName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_productName = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_productName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeProductName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1830
 * 
 *         '''
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeProductName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_productName));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeProductName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1832
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_56setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_56setNodeName[] = "\n.. _setNodeName:\n\nSet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and GetNodeName, rather than reporting it\nvia a command class Value object.  If the device does support the Node Naming\ncommand class, the new name will be sent to the node.  The maximum length of a\nnode name is 16 characters.\n\n:param homeI: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param nodeName: A string containing the nodes name.\n:type nodeName: str\n:see: getNodeName_, getNodeLocation_, setNodeLocation_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_56setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_name;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("setNodeName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1855
 * 
 *         '''
 *         self.manager.SetNodeName(homeid, nodeid, string(name))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_name));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1857
 *         self.manager.SetNodeName(homeid, nodeid, string(name))
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLocation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_57setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_57setNodeLocation[] = "\n.. _setNodeLocation:\n\nSet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and GetNodeLocation, rather than\nreporting it via a command class Value object.  If the device does support the\nNode Naming command class, the new location will be sent to the node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param location: A string containing the nodes location.\n:type location: int\n:see: getNodeLocation_, getNodeName_, setNodeName_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_57setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_location;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__location,0};
  __Pyx_RefNannySetupContext("setNodeLocation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__location);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_location = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_location) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_location = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_location) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLocation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1879
 * 
 *         '''
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOn(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeLocation(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_location));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLocation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1881
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))
 * 
 *     def setNodeOn(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOn:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_58setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_58setNodeOn[] = "\n.. _setNodeOn:\n\nTurns a node on\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\n255, and will generate a ValueChanged notification from that class.  This\ncommand will turn on the device at its last known level, if supported by the\ndevice, otherwise it will turn it on at 100%.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:see: setNodeOff_, setNodeLevel_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_58setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("setNodeOn");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeOn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOn");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1901
 *         '''
 * 
 *         self.manager.SetNodeOn(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOff(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeOn(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1903
 *         self.manager.SetNodeOn(homeid, nodeid)
 * 
 *     def setNodeOff(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOff:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_59setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_59setNodeOff[] = "\n.. _setNodeOff:\n\nTurns a node off\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\nzero, and will generate a ValueChanged notification from that class.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:see: setNodeOn_, setNodeLevel_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_59setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("setNodeOff");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeOff") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOff");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1920
 * 
 *         '''
 *         self.manager.SetNodeOff(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeOff(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOff");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1922
 *         self.manager.SetNodeOff(homeid, nodeid)
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLevel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_60setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_60setNodeLevel[] = "\n.. _setNodeLevel:\n\nSets the basic level of a node\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the value reported by the nodes Basic command class\nand will generate a ValueChanged notification from that class.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:param level: The level to set the node.  Valid values are 0-99 and 255.  Zero is off and 99 is fully on.  255 will turn on the device at its last known level (if supported).\n:type level: int\n:see: setNodeOn_, setNodeOff_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_60setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_level = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__level,0};
  __Pyx_RefNannySetupContext("setNodeLevel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__level);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeLevel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_level = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_level = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLevel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1941
 * 
 *         '''
 *         self.manager.SetNodeLevel(homeid, nodeid, level)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_level); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeLevel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLevel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1943
 *         self.manager.SetNodeLevel(homeid, nodeid, level)
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeInfoReceived:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_61isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_61isNodeInfoReceived[] = "\n.. _isNodeInfoReceived:\n\nGet whether the node information has been received\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: bool -- True if the node information has been received yet\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_61isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeInfoReceived");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeInfoReceived") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeInfoReceived");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1956
 * 
 *         '''
 *         return self.manager.IsNodeInfoReceived(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeInfoReceived(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeInfoReceived");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1959
 * 
 * 
 *     def getNodeClassInformation(self, homeid, nodeid, commandClassId, className = None, classVersion = None):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeClassInformation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_62getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_62getNodeClassInformation[] = "\n.. _getNodeClassInformation:\n\nHelper method to return whether a particular class is available in a node\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param commandClassId: control class to query\n:type commandClassId: int\n:param className: (optional, default=None) specific name of class to query\n:type className: str\n:param classVersion: (optional, default=None) specific class version\n:type classVersion: int\n:return: True if the node does have the class instantiated, will return name & version\n:rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_62getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_commandClassId = 0;
  PyObject *__pyx_v_className = 0;
  PyObject *__pyx_v_classVersion = 0;
  std::string __pyx_v_oclassName;
  uint8_t __pyx_v_oclassVersion;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__commandClassId,&__pyx_n_s__className,&__pyx_n_s__classVersion,0};
  __Pyx_RefNannySetupContext("getNodeClassInformation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__commandClassId);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__className);
        if (value) { values[3] = value; kw_args--; }
      }
      case  4:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__classVersion);
        if (value) { values[4] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeClassInformation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_commandClassId = values[2];
    __pyx_v_className = values[3];
    __pyx_v_classVersion = values[4];
  } else {
    __pyx_v_className = ((PyObject *)Py_None);
    __pyx_v_classVersion = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5:
      __pyx_v_classVersion = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4:
      __pyx_v_className = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3:
      __pyx_v_commandClassId = PyTuple_GET_ITEM(__pyx_args, 2);
      __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeClassInformation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_className);
  __Pyx_INCREF(__pyx_v_classVersion);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1981
 *         cdef string oclassName
 *         cdef uint8_t oclassVersion
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId, &oclassName, &oclassVersion)             # <<<<<<<<<<<<<<
 *         if ret :
 *             className = oclassName.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_commandClassId); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeClassInformation(__pyx_t_1, __pyx_t_2, __pyx_t_3, (&__pyx_v_oclassName), (&__pyx_v_oclassVersion));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1982
 *         cdef uint8_t oclassVersion
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId, &oclassName, &oclassVersion)
 *         if ret :             # <<<<<<<<<<<<<<
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion
 */
  if (__pyx_v_ret) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1983
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId, &oclassName, &oclassVersion)
 *         if ret :
 *             className = oclassName.c_str()             # <<<<<<<<<<<<<<
 *             classVersion = oclassVersion
 *             return ret
 */
    __pyx_t_4 = PyBytes_FromString(__pyx_v_oclassName.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_DECREF(__pyx_v_className);
    __pyx_v_className = ((PyObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1984
 *         if ret :
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
    __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_oclassVersion); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_classVersion);
    __pyx_v_classVersion = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1985
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1987
 *             return ret
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeClassInformation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_className);
  __Pyx_DECREF(__pyx_v_classVersion);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1990
 * 
 * 
 *     def isNodeAwake(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeAwake: Get whether the node is awake or asleep
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_63isNodeAwake(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_63isNodeAwake[] = "\n.. _isNodeAwake: Get whether the node is awake or asleep\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node is awake.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_63isNodeAwake(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeId,&__pyx_n_s__nodeId,0};
  __Pyx_RefNannySetupContext("isNodeAwake");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeId);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeId);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeAwake", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1990; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeAwake") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1990; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeId = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeId = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeAwake", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1990; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeAwake");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2002
 * 
 *         '''
 *         return self.manager.IsNodeAwake(homeId, nodeId)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeAwake(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeAwake");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2005
 * 
 * 
 *     def isNodeFailed(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. isNodeFailed: Get whether the node is working or has failed
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_64isNodeFailed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_64isNodeFailed[] = "\n.. isNodeFailed: Get whether the node is working or has failed\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node has failed and is no longer part of the network.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_64isNodeFailed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeId,&__pyx_n_s__nodeId,0};
  __Pyx_RefNannySetupContext("isNodeFailed");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeId);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeId);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeFailed", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2005; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeFailed") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2005; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeId = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeId = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeFailed", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2005; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFailed");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2017
 * 
 *         '''
 *         return self.manager.IsNodeFailed(homeId, nodeId)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeFailed(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFailed");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2020
 * 
 * 
 *     def getNodeQueryStage(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. getNodeQueryStage: Get whether the node's query stage as a string
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_65getNodeQueryStage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_65getNodeQueryStage[] = "\n.. getNodeQueryStage: Get whether the node's query stage as a string\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: name of current query stage as a string.\n:rtype: str\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_65getNodeQueryStage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeId,&__pyx_n_s__nodeId,0};
  __Pyx_RefNannySetupContext("getNodeQueryStage");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeId);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeId);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeQueryStage", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeQueryStage") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeId = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeId = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeQueryStage", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeQueryStage");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2032
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeQueryStage(homeId, nodeId)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeQueryStage(__pyx_t_1, __pyx_t_2);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2033
 *         '''
 *         cdef string c_string = self.manager.GetNodeQueryStage(homeId, nodeId)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeQueryStage");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2036
 * 
 * 
 *     def getNodeQueryStageCode(self, queryStage):             # <<<<<<<<<<<<<<
 *         '''
 * .. getNodeQueryStageCode: Get code value from a query stage description
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_66getNodeQueryStageCode(PyObject *__pyx_v_self, PyObject *__pyx_v_queryStage); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_66getNodeQueryStageCode[] = "\n.. getNodeQueryStageCode: Get code value from a query stage description\n\n:param queryStage: The query stage description.\n:type queryStage: str\n:return: code value.\n:rtype: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_66getNodeQueryStageCode(PyObject *__pyx_v_self, PyObject *__pyx_v_queryStage) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("getNodeQueryStageCode");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2046
 * 
 *         '''
 *         if queryStage == "ProtocolInfo":             # <<<<<<<<<<<<<<
 *             # Retrieve protocol information
 *             # QueryStage_ProtocolInfo
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__ProtocolInfo), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2049
 *             # Retrieve protocol information
 *             # QueryStage_ProtocolInfo
 *             return 0             # <<<<<<<<<<<<<<
 *         elif queryStage == "Probe":
 *             # Ping device to see if alive
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2050
 *             # QueryStage_ProtocolInfo
 *             return 0
 *         elif queryStage == "Probe":             # <<<<<<<<<<<<<<
 *             # Ping device to see if alive
 *             # QueryStage_Probe
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Probe), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2053
 *             # Ping device to see if alive
 *             # QueryStage_Probe
 *             return 1             # <<<<<<<<<<<<<<
 *         elif queryStage == "WakeUp":
 *             # Start wake up process if a sleeping node
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2054
 *             # QueryStage_Probe
 *             return 1
 *         elif queryStage == "WakeUp":             # <<<<<<<<<<<<<<
 *             # Start wake up process if a sleeping node
 *             # QueryStage_WakeUp
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__WakeUp), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2057
 *             # Start wake up process if a sleeping node
 *             # QueryStage_WakeUp
 *             return 2             # <<<<<<<<<<<<<<
 *         elif queryStage == "ManufacturerSpecific1":
 *             # Retrieve manufacturer name and product ids if ProtocolInfo lets us
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_2);
    __pyx_r = __pyx_int_2;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2058
 *             # QueryStage_WakeUp
 *             return 2
 *         elif queryStage == "ManufacturerSpecific1":             # <<<<<<<<<<<<<<
 *             # Retrieve manufacturer name and product ids if ProtocolInfo lets us
 *             # QueryStage_ManufacturerSpecific1
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s_25), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2061
 *             # Retrieve manufacturer name and product ids if ProtocolInfo lets us
 *             # QueryStage_ManufacturerSpecific1
 *             return 3             # <<<<<<<<<<<<<<
 *         elif queryStage == "NodeInfo":
 *             # Retrieve info about supported, controlled command classes
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_3);
    __pyx_r = __pyx_int_3;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2062
 *             # QueryStage_ManufacturerSpecific1
 *             return 3
 *         elif queryStage == "NodeInfo":             # <<<<<<<<<<<<<<
 *             # Retrieve info about supported, controlled command classes
 *             # QueryStage_NodeInfo
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__NodeInfo), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2065
 *             # Retrieve info about supported, controlled command classes
 *             # QueryStage_NodeInfo
 *             return 4             # <<<<<<<<<<<<<<
 *         elif queryStage == "ManufacturerSpecific2":
 *             # Retrieve manufacturer name and product ids
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_4);
    __pyx_r = __pyx_int_4;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2066
 *             # QueryStage_NodeInfo
 *             return 4
 *         elif queryStage == "ManufacturerSpecific2":             # <<<<<<<<<<<<<<
 *             # Retrieve manufacturer name and product ids
 *             # QueryStage_ManufacturerSpecific2
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s_26), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2069
 *             # Retrieve manufacturer name and product ids
 *             # QueryStage_ManufacturerSpecific2
 *             return 5             # <<<<<<<<<<<<<<
 *         elif queryStage == "Versions":
 *             # Retrieve version information
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_5);
    __pyx_r = __pyx_int_5;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2070
 *             # QueryStage_ManufacturerSpecific2
 *             return 5
 *         elif queryStage == "Versions":             # <<<<<<<<<<<<<<
 *             # Retrieve version information
 *             # QueryStage_Versions
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Versions), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2073
 *             # Retrieve version information
 *             # QueryStage_Versions
 *             return 6             # <<<<<<<<<<<<<<
 *         elif queryStage == "Instances":
 *             # Retrieve information about multiple command class instances
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_6);
    __pyx_r = __pyx_int_6;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2074
 *             # QueryStage_Versions
 *             return 6
 *         elif queryStage == "Instances":             # <<<<<<<<<<<<<<
 *             # Retrieve information about multiple command class instances
 *             # QueryStage_Instances
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Instances), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2077
 *             # Retrieve information about multiple command class instances
 *             # QueryStage_Instances
 *             return 7             # <<<<<<<<<<<<<<
 *         elif queryStage == "Static":
 *             # Retrieve static information (doesn't change)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_7);
    __pyx_r = __pyx_int_7;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2078
 *             # QueryStage_Instances
 *             return 7
 *         elif queryStage == "Static":             # <<<<<<<<<<<<<<
 *             # Retrieve static information (doesn't change)
 *             # QueryStage_Static
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Static), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2081
 *             # Retrieve static information (doesn't change)
 *             # QueryStage_Static
 *             return 8             # <<<<<<<<<<<<<<
 *         elif queryStage == "Probe1":
 *             # Ping a device upon starting with configuration
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_8);
    __pyx_r = __pyx_int_8;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2082
 *             # QueryStage_Static
 *             return 8
 *         elif queryStage == "Probe1":             # <<<<<<<<<<<<<<
 *             # Ping a device upon starting with configuration
 *             # QueryStage_Probe1
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Probe1), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2085
 *             # Ping a device upon starting with configuration
 *             # QueryStage_Probe1
 *             return 9             # <<<<<<<<<<<<<<
 *         elif queryStage == "Associations":
 *             # Retrieve information about associations
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_9);
    __pyx_r = __pyx_int_9;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2086
 *             # QueryStage_Probe1
 *             return 9
 *         elif queryStage == "Associations":             # <<<<<<<<<<<<<<
 *             # Retrieve information about associations
 *             # QueryStage_Associations
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Associations), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2089
 *             # Retrieve information about associations
 *             # QueryStage_Associations
 *             return 10             # <<<<<<<<<<<<<<
 *         elif queryStage == "Neighbors":
 *             # Retrieve node neighbor list
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_10);
    __pyx_r = __pyx_int_10;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2090
 *             # QueryStage_Associations
 *             return 10
 *         elif queryStage == "Neighbors":             # <<<<<<<<<<<<<<
 *             # Retrieve node neighbor list
 *             # QueryStage_Neighbors
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Neighbors), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2093
 *             # Retrieve node neighbor list
 *             # QueryStage_Neighbors
 *             return 11             # <<<<<<<<<<<<<<
 *         elif queryStage == "Session":
 *             # Retrieve session information (changes infrequently)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_11);
    __pyx_r = __pyx_int_11;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2094
 *             # QueryStage_Neighbors
 *             return 11
 *         elif queryStage == "Session":             # <<<<<<<<<<<<<<
 *             # Retrieve session information (changes infrequently)
 *             # QueryStage_Session
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Session), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2097
 *             # Retrieve session information (changes infrequently)
 *             # QueryStage_Session
 *             return 12             # <<<<<<<<<<<<<<
 *         elif queryStage == "Dynamic":
 *             # Retrieve dynamic information (changes frequently)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_12);
    __pyx_r = __pyx_int_12;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2098
 *             # QueryStage_Session
 *             return 12
 *         elif queryStage == "Dynamic":             # <<<<<<<<<<<<<<
 *             # Retrieve dynamic information (changes frequently)
 *             # QueryStage_Dynamic
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Dynamic), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2101
 *             # Retrieve dynamic information (changes frequently)
 *             # QueryStage_Dynamic
 *             return 13             # <<<<<<<<<<<<<<
 *         elif queryStage == "Configuration":
 *             # Retrieve configurable parameter information (only done on request)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_13);
    __pyx_r = __pyx_int_13;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2102
 *             # QueryStage_Dynamic
 *             return 13
 *         elif queryStage == "Configuration":             # <<<<<<<<<<<<<<
 *             # Retrieve configurable parameter information (only done on request)
 *             # QueryStage_Configuration
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Configuration), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2105
 *             # Retrieve configurable parameter information (only done on request)
 *             # QueryStage_Configuration
 *             return 14             # <<<<<<<<<<<<<<
 *         elif queryStage == "Complete":
 *             # Query process is completed for this node
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_14);
    __pyx_r = __pyx_int_14;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2106
 *             # QueryStage_Configuration
 *             return 14
 *         elif queryStage == "Complete":             # <<<<<<<<<<<<<<
 *             # Query process is completed for this node
 *             # QueryStage_Complete
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__Complete), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2109
 *             # Query process is completed for this node
 *             # QueryStage_Complete
 *             return 15             # <<<<<<<<<<<<<<
 *         elif queryStage == "None":
 *             # Query process hasn't started for this node
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_15);
    __pyx_r = __pyx_int_15;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2110
 *             # QueryStage_Complete
 *             return 15
 *         elif queryStage == "None":             # <<<<<<<<<<<<<<
 *             # Query process hasn't started for this node
 *             # QueryStage_None
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_queryStage, ((PyObject *)__pyx_n_s__None), Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2113
 *             # Query process hasn't started for this node
 *             # QueryStage_None
 *             return 16             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_16);
    __pyx_r = __pyx_int_16;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2114
 *             # QueryStage_None
 *             return 16
 *         return None             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeQueryStageCode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2129
 * #        bool SetValueListSelection(ValueID& valueid, string selecteditem)
 * 
 *     def setValue(self, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_67setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_67setValue[] = "\n.. _setValue:\n\nSets the value of a device valueid.\nDue to the possibility of a device being asleep, the command is assumed to suceeed, and the value\nheld by the node is updated directly.  This will be reverted by a future status message from the device\nif the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.\n\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set.\n:type value: int\n:return: An integer representing the result of the operation  0 : The C method fails, 1 : The C method succeed, 2 : Can't find id in the map\n:rtype: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_67setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  uint8_t __pyx_t_8;
  float __pyx_t_9;
  int32_t __pyx_t_10;
  int16_t __pyx_t_11;
  char *__pyx_t_12;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setValue");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_value = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValue");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2152
 *         cdef int16_t type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2153
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2154
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2155
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2156
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2157
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2158
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2159
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2160
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_value); if (unlikely((__pyx_t_8 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2161
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2162
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2163
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2164
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2165
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2166
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2167
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2168
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_from_py_int32_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2169
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2170
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2171
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2172
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_from_py_int16_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (int16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2173
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2174
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2175
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2176
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2177
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2178
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Button":
 *                 type_bool = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2179
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Button), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2180
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2181
 *             elif datatype == "Button":
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2182
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "List":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2183
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 #logging.debug("SetValueListSelection %s" % value)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__List), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2184
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 #logging.debug("SetValueListSelection %s" % value)
 *                 cret = self.manager.SetValueListSelection(values_map.at(id), type_string)
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2186
 *                 type_string = string(value)
 *                 #logging.debug("SetValueListSelection %s" % value)
 *                 cret = self.manager.SetValueListSelection(values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 #logging.debug("SetValueListSelection %s" % cret)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValueListSelection(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2188
 *                 cret = self.manager.SetValueListSelection(values_map.at(id), type_string)
 *                 #logging.debug("SetValueListSelection %s" % cret)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2189
 *                 #logging.debug("SetValueListSelection %s" % cret)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def refreshValue(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2191
 *         return ret
 * 
 *     def refreshValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_68refreshValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_68refreshValue[] = "\n.. _refreshValue:\n\nRefreshes the specified value from the Z-Wave network.\nA call to this function causes the library to send a message to the network to retrieve the current value\nof the specified ValueID (just like a poll, except only one-time, not recurring).\n\n:param id: The unique identifier of the value to be refreshed.\n:type id: int\n:return: bool -- True if the driver and node were found; false otherwise\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_68refreshValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("refreshValue");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2204
 * 
 *         '''
 *         return self.manager.RefreshValue(values_map.at(id))             # <<<<<<<<<<<<<<
 * 
 *     def getValueLabel(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RefreshValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2206
 *         return self.manager.RefreshValue(values_map.at(id))
 * 
 *     def getValueLabel(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_69getValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_69getValueLabel[] = "\n.. _getValueLabel:\n\nGets the user-friendly label for the value\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the user-friendly label of the value\n:rtype: str\n:see: setValueLabel_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_69getValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueLabel");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2220
 *        '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueLabel(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2221
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueLabel(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueLabel(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2222
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueLabel(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_r = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2224
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueLabel(self, id, char *label):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2226
 *             return None
 * 
 *     def setValueLabel(self, id, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_70setValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_70setValueLabel[] = "\n.. _setValueLabel:\n\nSets the user-friendly label for the value\n\n:param id: The ID of a value.\n:type id: int\n:param label: The label of the value.\n:type label: str\n:see: getValueLabel_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_70setValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_label;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__label,0};
  __Pyx_RefNannySetupContext("setValueLabel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__label);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValueLabel", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValueLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_label = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_label = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueLabel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueLabel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2239
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueLabel(values_map.at(id), string(label))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2240
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueLabel(values_map.at(id), string(label))             # <<<<<<<<<<<<<<
 * 
 *     def getValueUnits(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValueLabel(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_label));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2242
 *             self.manager.SetValueLabel(values_map.at(id), string(label))
 * 
 *     def getValueUnits(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueUnits:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_71getValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_71getValueUnits[] = "\n.. _getValueUnits:\n\nGets the units that the value is measured in.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the value of the units.\n:rtype: str\n:see: setValueUnits_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_71getValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueUnits");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2256
 *         '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueUnits(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2257
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueUnits(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueUnits(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2258
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueUnits(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_r = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2260
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueUnits(self, id, char *unit):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueUnits");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2262
 *             return None
 * 
 *     def setValueUnits(self, id, char *unit):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueUnits:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_72setValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_72setValueUnits[] = "\n.. _setValueUnits:\n\nSets the units that the value is measured in.\n\n:param id: The ID of a value.\n:type id: int\n:param label: The new value of the units.\n:type label: str\n:see: getValueUnits_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_72setValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_unit;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__unit,0};
  __Pyx_RefNannySetupContext("setValueUnits");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unit);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValueUnits", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValueUnits") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_unit = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_unit) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_unit = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_unit) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueUnits", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueUnits");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2275
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2276
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))             # <<<<<<<<<<<<<<
 * 
 *     def getValueHelp(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValueUnits(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_unit));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueUnits");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2278
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))
 * 
 *     def getValueHelp(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueHelp:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_73getValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_73getValueHelp[] = "\n.. _getValueHelp:\n\nGets a help string describing the value's purpose and usage.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the value help text.\n:rtype: str\n:see: setValueHelp_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_73getValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueHelp");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2292
 *         '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueHelp(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2293
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueHelp(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueHelp(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2294
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueHelp(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_r = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2296
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueHelp(self, id, char *help):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueHelp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2298
 *             return None
 * 
 *     def setValueHelp(self, id, char *help):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueHelp:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_74setValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_74setValueHelp[] = "\n.. _setValueHelp:\n\nSets a help string describing the value's purpose and usage.\n\n:param id: the ID of a value.\n:type id: int\n:param help: The new value of the help text.\n:type help: str\n:see: getValueHelp_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_74setValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_help;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__help,0};
  __Pyx_RefNannySetupContext("setValueHelp");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__help);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValueHelp", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValueHelp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_help = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_help) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_help = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_help) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueHelp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueHelp");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2311
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueHelp(values_map.at(id), string(help))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2312
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueHelp(values_map.at(id), string(help))             # <<<<<<<<<<<<<<
 * 
 *     def getValueMin(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValueHelp(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_help));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueHelp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2314
 *             self.manager.SetValueHelp(values_map.at(id), string(help))
 * 
 *     def getValueMin(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMin:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_75getValueMin(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_75getValueMin[] = "\n.. _getValueMin:\n\nGets the minimum that this value may contain.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value minimum.\n:rtype: int\n:see: getValueMax_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_75getValueMin(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueMin");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2327
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetValueMin(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2328
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetValueMin(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueMin(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2330
 *             return self.manager.GetValueMin(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueMax(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueMin");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2332
 *             return None
 * 
 *     def getValueMax(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMax:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_76getValueMax(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_76getValueMax[] = "\n.. _getValueMax:\n\nGets the maximum that this value may contain.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value maximum.\n:rtype: int\n:see: getValueMin_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_76getValueMax(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueMax");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2345
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetValueMax(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2346
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetValueMax(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_to_py_uint32_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueMax(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2348
 *             return self.manager.GetValueMax(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueReadOnly(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueMax");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2350
 *             return None
 * 
 *     def isValueReadOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueReadOnly:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_77isValueReadOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_77isValueReadOnly[] = "\n.. _isValueReadOnly:\n\nTest whether the value is read-only.\n\n:param id: The ID of a value.\n:type id: int\n:return: True if the value cannot be changed by the user.\n:rtype: bool\n:see: isValueWriteOnly_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_77isValueReadOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isValueReadOnly");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2363
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueReadOnly(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2364
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueReadOnly(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsValueReadOnly(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2366
 *             return self.manager.IsValueReadOnly(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueWriteOnly(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueReadOnly");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2368
 *             return None
 * 
 *     def isValueWriteOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueWriteOnly:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_78isValueWriteOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_78isValueWriteOnly[] = "\n.. _isValueWriteOnly:\n\nTest whether the value is write-only.\n\n:param id: The ID of a value.\n:type id: int\n:return: True if the value can only be written to and not read.\n:rtype: bool\n:see: isValueReadOnly_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_78isValueWriteOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isValueWriteOnly");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2381
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueWriteOnly(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2382
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueWriteOnly(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsValueWriteOnly(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2384
 *             return self.manager.IsValueWriteOnly(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueSet(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueWriteOnly");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2386
 *             return None
 * 
 *     def isValueSet(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueSet:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_79isValueSet(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_79isValueSet[] = "\n.. _isValueSet:\n\nTest whether the value has been set.\n\n:param id: the ID of a value.\n:type id: int\n:return: True if the value has actually been set by a status message from the device, rather than simply being the default.\n:rtype: bool\n:see: getValue_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_79isValueSet(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isValueSet");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2401
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueSet(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2402
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueSet(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsValueSet(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2404
 *             return self.manager.IsValueSet(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueGenre(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueSet");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2406
 *             return None
 * 
 *     def getValueGenre(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueGenre:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_80getValueGenre(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_80getValueGenre[] = "\n.. _getValueGenre:\n\nGet the genre of the value.  The genre classifies a value to enable\nlow-level system or configuration parameters to be filtered out\nby the application\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueCommandClass_getValueAsString_, getValue_, getValueType_, getValueInstance_, getValueIndex_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_80getValueGenre(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_v_genre;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("getValueGenre");
  __pyx_v_genre = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2424
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             genre = PyGenres[values_map.at(id).GetGenre()]
 *             return genre
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2425
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             genre = PyGenres[values_map.at(id).GetGenre()]             # <<<<<<<<<<<<<<
 *             return genre
 *         else :
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyGenres); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetGenre()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_genre);
    __pyx_v_genre = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2426
 *         if values_map.find(id) != values_map.end():
 *             genre = PyGenres[values_map.at(id).GetGenre()]
 *             return genre             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_genre);
    __pyx_r = __pyx_v_genre;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2428
 *             return genre
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueCommandClass(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueGenre");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_genre);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2430
 *             return None
 * 
 *     def getValueCommandClass(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueCommandClass:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_81getValueCommandClass(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_81getValueCommandClass[] = "\n.. _getValueCommandClass:\n\nGet the command class instance of this value.  It is possible for there to be\nmultiple instances of a command class, although currently it appears that\nonly the SensorMultilevel command class ever does this.  Knowledge of\ninstances and command classes is not required to use OpenZWave, but this\ninformation is exposed in case it is of interest.\n\n\n:param id: The ID of a value.\n:type id: int\n:return: The command class of the value\n:rtype: int\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueGenre_, getValueAsString_, getValue_, getValueType_, getValueInstance_, getValueIndex_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_81getValueCommandClass(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_cmd_cls;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueCommandClass");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2451
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             cmd_cls = values_map.at(id).GetCommandClassId()
 *             return cmd_cls
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2452
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             cmd_cls = values_map.at(id).GetCommandClassId()             # <<<<<<<<<<<<<<
 *             return cmd_cls
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_cmd_cls = __pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetCommandClassId();

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2453
 *         if values_map.find(id) != values_map.end():
 *             cmd_cls = values_map.at(id).GetCommandClassId()
 *             return cmd_cls             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_cmd_cls); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2455
 *             return cmd_cls
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueInstance(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueCommandClass");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2457
 *             return None
 * 
 *     def getValueInstance(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueInstance:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_82getValueInstance(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_82getValueInstance[] = "\n.. _getValueInstance:\n\nGet the command class instance of this value.  It is possible for there to be\nmultiple instances of a command class, although currently it appears that\nonly the SensorMultilevel command class ever does this.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueCommandClass_, getValueAsString_, getValue_, getValueType_, getValueIndex_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_82getValueInstance(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_genre;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueInstance");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2475
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             genre = values_map.at(id).GetInstance()
 *             return genre
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2476
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetInstance()             # <<<<<<<<<<<<<<
 *             return genre
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_genre = __pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetInstance();

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2477
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetInstance()
 *             return genre             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_genre); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2479
 *             return genre
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueIndex(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueInstance");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2481
 *             return None
 * 
 *     def getValueIndex(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueIndex:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_83getValueIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_83getValueIndex[] = "\n.. _getValueIndex:\n\nGet the value index.  The index is used to identify one of multiple\nvalues created and managed by a command class.  In the case of configurable\nparameters (handled by the configuration command class), the index is the\nsame as the parameter ID.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueCommandClass_, getValueAsString_, getValue_, getValueType_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_83getValueIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_genre;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueIndex");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2500
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             genre = values_map.at(id).GetIndex()
 *             return genre
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2501
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetIndex()             # <<<<<<<<<<<<<<
 *             return genre
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_genre = __pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetIndex();

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2502
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetIndex()
 *             return genre             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_genre); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2504
 *             return genre
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueType(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueIndex");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2506
 *             return None
 * 
 *     def getValueType(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueType:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_84getValueType(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_84getValueType[] = "\n.. _getValueType:\n\nGets the type of the value\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValue_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_84getValueType(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_v_datatype;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("getValueType");
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2522
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             return datatype
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2523
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             return datatype
 *         else :
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2524
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             return datatype             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_datatype);
    __pyx_r = __pyx_v_datatype;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2526
 *             return datatype
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValue(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueType");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2528
 *             return None
 * 
 *     def getValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_85getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_85getValue[] = "\n.. _getValue:\n\nGets a value.\n\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set.\n:type value: int\n:return: Depending of the type of the valueId, None otherwise\n:rtype: variable\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_85getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValue");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2546
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsBool(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2548
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsBool(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsBool:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_86getValueAsBool(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_86getValueAsBool[] = "\n.. _getValueAsBool:\n\nGets a value as a bool.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: bool\n:see: isValueSet_, getValue_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_86getValueAsBool(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueAsBool");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2564
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsByte(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsBool");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2566
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsByte(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsByte:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_87getValueAsByte(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_87getValueAsByte[] = "\n.. _getValueAsByte:\n\nGets a value as an 8-bit unsigned integer.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_87getValueAsByte(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueAsByte");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2582
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsFloat(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsByte");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2584
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsFloat(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsFloat:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_88getValueAsFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_88getValueAsFloat[] = "\n.. _getValueAsFloat:\n\nGets a value as a float.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: float\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_88getValueAsFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueAsFloat");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2600
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsShort(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsFloat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2602
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsShort(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsShort:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_89getValueAsShort(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_89getValueAsShort[] = "\n.. _getValueAsShort:\n\nGets a value as a 16-bit signed integer.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsInt_, getValueAsString_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_89getValueAsShort(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueAsShort");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2618
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsInt(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsShort");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2620
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsInt(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsInt:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_90getValueAsInt(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_90getValueAsInt[] = "\n.. _getValueAsInt:\n\nGets a value as a 32-bit signed integer.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsString_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_90getValueAsInt(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueAsInt");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2636
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsString(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsInt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2638
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsString(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsString:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_91getValueAsString(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_91getValueAsString[] = "\n.. _getValueAsString:\n\nGets a value as a string.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: str\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_91getValueAsString(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueAsString");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2654
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueListSelectionStr(self,  id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsString");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2656
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueListSelectionStr(self,  id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListSelectionStr:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_92getValueListSelectionStr(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_92getValueListSelectionStr[] = "\n.. _getValueListSelectionStr:\n\nGets value of items from a list value\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: str\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionNum_, getValueListItems_,getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n    ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_92getValueListSelectionStr(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValueListSelectionStr");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2671
 * getValueType_, getValueInstance_, getValueIndex_
 *     '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueListSelectionNum(self,  id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueListSelectionStr");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2673
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueListSelectionNum(self,  id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListSelectionNum:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_93getValueListSelectionNum(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_93getValueListSelectionNum[] = "\n.. _getValueListSelectionNum:\n\nGets value of items from a list value\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_, getValueListItems_,getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n    ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_93getValueListSelectionNum(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  int32_t __pyx_v_type_int;
  long __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueListSelectionNum");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2689
 *     '''
 *         cdef int32_t type_int
 *         ret=-1             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):
 */
  __pyx_v_ret = -1;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2690
 *         cdef int32_t type_int
 *         ret=-1
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):
 *                 ret = type_int
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2691
 *         ret=-1
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):             # <<<<<<<<<<<<<<
 *                 ret = type_int
 *         #print "//////// Value Num list item : " ,  ret
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueListSelection(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_int));
    if (__pyx_t_3) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2692
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):
 *                 ret = type_int             # <<<<<<<<<<<<<<
 *         #print "//////// Value Num list item : " ,  ret
 *         return ret
 */
      __pyx_v_ret = __pyx_v_type_int;
      goto __pyx_L6;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2694
 *                 ret = type_int
 *         #print "//////// Value Num list item : " ,  ret
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def getValueListItems(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueListSelectionNum");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2696
 *         return ret
 * 
 *     def getValueListItems(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListItems:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_94getValueListItems(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_94getValueListItems[] = "\n.. _getValueListItems:\n\nGets the list of items from a list value\n\n:param id: The ID of a value.\n:type id: int\n:return: The list of possible values\n:rtype: set()\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_ getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_94getValueListItems(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::vector<std::string> __pyx_v_vect;
  PyObject *__pyx_v_ret;
  std::string __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  int __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("getValueListItems");
  __pyx_v_ret = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2714
 *         #print "**** libopenzwave.GetValueListItems ******"
 *         cdef vector[string] vect
 *         ret = set()             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_ret));
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2715
 *         cdef vector[string] vect
 *         ret = set()
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 *                 while not vect.empty() :
 */
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_2) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_3) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2716
 *         ret = set()
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):             # <<<<<<<<<<<<<<
 *                 while not vect.empty() :
 *                     temp = vect.back()
 */
    __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueListItems(__pyx_v_12libopenzwave_values_map.at(__pyx_t_2), (&__pyx_v_vect));
    if (__pyx_t_4) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2717
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 *                 while not vect.empty() :             # <<<<<<<<<<<<<<
 *                     temp = vect.back()
 *                     ret.add(temp.c_str())
 */
      while (1) {
        __pyx_t_3 = (!__pyx_v_vect.empty());
        if (!__pyx_t_3) break;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2718
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 *                 while not vect.empty() :
 *                     temp = vect.back()             # <<<<<<<<<<<<<<
 *                     ret.add(temp.c_str())
 *                     vect.pop_back();
 */
        __pyx_v_temp = __pyx_v_vect.back();

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2719
 *                 while not vect.empty() :
 *                     temp = vect.back()
 *                     ret.add(temp.c_str())             # <<<<<<<<<<<<<<
 *                     vect.pop_back();
 *             #print "++++ list des items : " ,  ret
 */
        if (unlikely(__pyx_v_ret == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'add'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
        }
        __pyx_t_1 = PyBytes_FromString(__pyx_v_temp.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
        __pyx_t_5 = PySet_Add(__pyx_v_ret, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2720
 *                     temp = vect.back()
 *                     ret.add(temp.c_str())
 *                     vect.pop_back();             # <<<<<<<<<<<<<<
 *             #print "++++ list des items : " ,  ret
 *         return ret
 */
        __pyx_v_vect.pop_back();
      }
      goto __pyx_L6;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2722
 *                     vect.pop_back();
 *             #print "++++ list des items : " ,  ret
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def pressButton(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueListItems");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2724
 *         return ret
 * 
 *     def pressButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _pressButton:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_95pressButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_95pressButton[] = "\n.. _pressButton:\n\nStarts an activity in a device.\nSince buttons are write-only values that do not report a state,\nno notification callbacks are sent.\n\n:param id: The ID of an integer value.\n:type id: int\n:return: True if the activity was started. Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.\n:rtype: bool\n:see: releaseButton_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_95pressButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pressButton");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2739
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.PressButton(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2740
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.PressButton(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->PressButton(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2742
 *             return self.manager.PressButton(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def releaseButton(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.pressButton");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2744
 *             return False
 * 
 *     def releaseButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _releaseButton:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_96releaseButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_96releaseButton[] = "\n.. _releaseButton:\n\nStops an activity in a device.\nSince buttons are write-only values that do not report a state,\nno notification callbacks are sent.\n\n:param id: the ID of an integer value.\n:type id: int\n:return: True if the activity was stopped. Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.\n:rtype: bool\n:see: pressButton_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_96releaseButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("releaseButton");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2759
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.ReleaseButton(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2760
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.ReleaseButton(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ReleaseButton(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2762
 *             return self.manager.ReleaseButton(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.releaseButton");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2765
 * 
 * 
 *     def getValueFloatPrecision(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueFloatPrecision: Gets a float value's precision
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_97getValueFloatPrecision(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_97getValueFloatPrecision[] = "\n.. _getValueFloatPrecision: Gets a float value's precision\n\n:param id: The unique identifier of the value.\n:type id: int\n:return:  a float value's precision.\n:rtype: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_97getValueFloatPrecision(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_precision;
  bool __pyx_v_success;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueFloatPrecision");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2776
 *         '''
 *         cdef uint8_t precision
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)
 *             return precision if success else None
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2777
 *         cdef uint8_t precision
 *         if values_map.find(id) != values_map.end():
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)             # <<<<<<<<<<<<<<
 *             return precision if success else None
 *         return None
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_success = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueFloatPrecision(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_precision));

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2778
 *         if values_map.find(id) != values_map.end():
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)
 *             return precision if success else None             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if (__pyx_v_success) {
      __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_precision); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2779
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)
 *             return precision if success else None
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueFloatPrecision");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2797
 * # have been made, they are sent to the device by calling SetSchedule.
 * #
 *     def setSwitchPoint(self, id, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSwitchPoint:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_98setSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_98setSwitchPoint[] = "\n.. _setSwitchPoint:\n\nSet a switch point in the schedule.\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param hours: The hours part of the time when the switch point will trigger. The time is set using the 24-hour clock, so this value must be between 0 and 23.\n:type hours: int\n:param minutes: The minutes part of the time when the switch point will trigger.  This value must be between 0 and 59.\n:type minutes: int\n:param setback: The setback in tenths of a degree Celsius.  The setback value can range from -128 (-12.8C) to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and 122 is used to set Energy Saving mode.\n:type setback: int\n:return: True if the switch point is set.\n:rtype: bool\n:see: removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_98setSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  PyObject *__pyx_v_setback = 0;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  uint8_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__hours,&__pyx_n_s__minutes,&__pyx_n_s__setback,0};
  __Pyx_RefNannySetupContext("setSwitchPoint");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hours);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minutes);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__setback);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_hours = values[1];
    __pyx_v_minutes = values[2];
    __pyx_v_setback = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_hours = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_minutes = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_setback = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSwitchPoint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2816
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2817
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_hours); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_minutes); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_setback); if (unlikely((__pyx_t_5 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, __pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2819
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def removeSwitchPoint(self, id, hours, minutes):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.setSwitchPoint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2821
 *             return False
 * 
 *     def removeSwitchPoint(self, id, hours, minutes):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeSwitchPoint:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_99removeSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_99removeSwitchPoint[] = "\n.. _removeSwitchPoint:\n\nRemove a switch point from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param hours: The hours part of the time when the switch point will trigger.  The time is set using the 24-hour clock, so this value must be between 0 and 23.\n:type hours: int\n:param minutes: The minutes part of the time when the switch point will trigger.  This value must be between 0 and 59.\n:type minutes: int\n:return: True if the switch point is removed.\n:rtype: bool\n:see: setSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_99removeSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__hours,&__pyx_n_s__minutes,0};
  __Pyx_RefNannySetupContext("removeSwitchPoint");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hours);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minutes);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "removeSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_hours = values[1];
    __pyx_v_minutes = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_hours = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_minutes = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2821; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSwitchPoint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2838
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2839
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_hours); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_minutes); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, __pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2841
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def clearSwitchPoints(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSwitchPoint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2843
 *             return False
 * 
 *     def clearSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _clearSwitchPoints:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_100clearSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_100clearSwitchPoints[] = "\n.. _clearSwitchPoints:\n\nClears all switch points from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:return: True if all switch points are clear.\n:rtype: bool\n:see: setSwitchPoint_, removeSwitchPoint_, getSwitchPoint_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_100clearSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("clearSwitchPoints");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2856
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.ClearSwitchPoints(values_map.at(id))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2857
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.ClearSwitchPoints(values_map.at(id))             # <<<<<<<<<<<<<<
 * 
 *     def getSwitchPoint(self, id, idx, hours, minutes, setback):
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ClearSwitchPoints(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.clearSwitchPoints");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2859
 *             self.manager.ClearSwitchPoints(values_map.at(id))
 * 
 *     def getSwitchPoint(self, id, idx, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSwitchPoint:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_101getSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_101getSwitchPoint[] = "\n.. _getSwitchPoint:\n\nGets switch point data from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param idx: The index of the switch point, between zero and one less than the value returned by GetNumSwitchPoints.\n:type idx: int\n:param hours: An integer that will be filled with the hours part of the switch point data.\n:type hours: int\n:param minutes: An integer that will be filled with the minutes part of the switch point data.\n:type minutes: int\n:param setback: An integer that will be filled with the setback value.  This can range from -128 (-12.8C)to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and 122 is used to set Energy Saving mode.\n:type setback: int\n:return: True if successful.  Returns False if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.\n:rtype: bool\n:see: setSwitchPoint_, removeSwitchPoint_, clearSwitchPoints_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_101getSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_idx = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  PyObject *__pyx_v_setback = 0;
  uint8_t __pyx_v_ohours;
  uint8_t __pyx_v_ominutes;
  int8_t __pyx_v_osetback;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__idx,&__pyx_n_s__hours,&__pyx_n_s__minutes,&__pyx_n_s__setback,0};
  __Pyx_RefNannySetupContext("getSwitchPoint");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__idx);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hours);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minutes);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__setback);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_idx = values[1];
    __pyx_v_hours = values[2];
    __pyx_v_minutes = values[3];
    __pyx_v_setback = values[4];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_idx = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_hours = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_minutes = PyTuple_GET_ITEM(__pyx_args, 3);
    __pyx_v_setback = PyTuple_GET_ITEM(__pyx_args, 4);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getSwitchPoint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_hours);
  __Pyx_INCREF(__pyx_v_minutes);
  __Pyx_INCREF(__pyx_v_setback);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2883
 *         cdef uint8_t ominutes
 *         cdef int8_t osetback
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2884
 *         cdef int8_t osetback
 *         if values_map.find(id) != values_map.end():
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \             # <<<<<<<<<<<<<<
 *                 &ohours, &ominutes, &osetback)
 *             if ret :
 */
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_idx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2885
 *         if values_map.find(id) != values_map.end():
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)             # <<<<<<<<<<<<<<
 *             if ret :
 *                 hours = ohours
 */
    __pyx_v_ret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, (&__pyx_v_ohours), (&__pyx_v_ominutes), (&__pyx_v_osetback));

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2886
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)
 *             if ret :             # <<<<<<<<<<<<<<
 *                 hours = ohours
 *                 minutes = ominutes
 */
    if (__pyx_v_ret) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2887
 *                 &ohours, &ominutes, &osetback)
 *             if ret :
 *                 hours = ohours             # <<<<<<<<<<<<<<
 *                 minutes = ominutes
 *                 setback = osetback
 */
      __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_ohours); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_v_hours);
      __pyx_v_hours = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2888
 *             if ret :
 *                 hours = ohours
 *                 minutes = ominutes             # <<<<<<<<<<<<<<
 *                 setback = osetback
 *             return ret
 */
      __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_ominutes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_v_minutes);
      __pyx_v_minutes = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2889
 *                 hours = ohours
 *                 minutes = ominutes
 *                 setback = osetback             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
      __pyx_t_4 = __Pyx_PyInt_to_py_int8_t(__pyx_v_osetback); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_v_setback);
      __pyx_v_setback = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2890
 *                 minutes = ominutes
 *                 setback = osetback
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2892
 *             return ret
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * #        return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSwitchPoint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_hours);
  __Pyx_DECREF(__pyx_v_minutes);
  __Pyx_DECREF(__pyx_v_setback);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2895
 * #        return False
 * 
 *     def getNumSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumSwitchPoints:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_102getNumSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_102getNumSwitchPoints[] = "\n.. _getNumSwitchPoints:\n\nGet the number of switch points defined in a schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:return: The number of switch points defined in this schedule.  Returns zero if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.\n:rtype: int\n:see: setSwitchPoint_, removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_102getNumSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getNumSwitchPoints");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2908
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2909
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumSwitchPoints(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2911
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))
 *         else :
 *             return 0             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumSwitchPoints");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2922
 * # not routed, the message might not otherwise reach all the nodes).
 * #
 *     def switchAllOn(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOn:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_103switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_103switchAllOn[] = "\n.. _switchAllOn:\n\nSwitch all devices on.  All devices that support the SwitchAll command class\nwill be turned on.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:see: switchAllOff_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_103switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("switchAllOn");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2934
 * 
 *         '''
 *         self.manager.SwitchAllOn(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def switchAllOff(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SwitchAllOn(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.switchAllOn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2936
 *         self.manager.SwitchAllOn(homeid)
 * 
 *     def switchAllOff(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOff:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_104switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_104switchAllOff[] = "\n.. _switchAllOff:\n\nSwitch all devices off.  All devices that support the SwitchAll command class\nwill be turned off.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:see: switchAllOn_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_104switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("switchAllOff");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2948
 * 
 *         '''
 *         self.manager.SwitchAllOff(homeid)             # <<<<<<<<<<<<<<
 * 
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SwitchAllOff(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.switchAllOff");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2961
 * # parameters for every Z-Wave.  See the config folder in the project source code for examples.
 * #
 *     def setConfigParam(self, homeid, nodeid, param, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setConfigParam:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_105setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_105setConfigParam[] = "\n.. _setConfigParam:\n\nSet the value of a configurable parameter in a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method returns\nimmediately, without waiting for confirmation from the device that the change\nhas been made.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:param param: The index of the parameter.\n:type param: int\n:param value: The value to which the parameter should be set.\n:type value: int\n:return: True if the message setting the value was sent to the device.\n:rtype: bool\n:see: requestConfigParam_, requestAllConfigParams_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_105setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint32_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__param,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setConfigParam");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__param);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
    __pyx_v_value = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_param = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2961; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setConfigParam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2986
 * 
 *         '''
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value, 2)             # <<<<<<<<<<<<<<
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_param); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_4 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, 2)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setConfigParam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":2988
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value, 2)
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestConfigParam:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_106requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_106requestConfigParam[] = "\n.. _requestConfigParam:\n\nRequest the value of a configurable parameter from a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method requests\nthe value of a parameter from the device, and then returns immediately,\nwithout waiting for a response.  If the parameter index is valid for this\ndevice, and the device is awake, the value will eventually be reported via a\nValueChanged notification callback.  The ValueID reported in the callback will\nhave an index set the same as _param and a command class set to the same value\nas returned by a call to Configuration::StaticGetCommandClassId.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:param param: The index of the parameter.\n:type param: int\n:see: requestAllConfigParams_, setConfigParam_, valueID_, notification_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_106requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__param,0};
  __Pyx_RefNannySetupContext("requestConfigParam");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__param);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_param = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestConfigParam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3013
 * 
 *         '''
 *         self.manager.RequestConfigParam(homeid, nodeid, param)             # <<<<<<<<<<<<<<
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_param); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestConfigParam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3015
 *         self.manager.RequestConfigParam(homeid, nodeid, param)
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestAllConfigParams:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_107requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_107requestAllConfigParams[] = "\n.. _requestAllConfigParams:\n\nRequest the values of all known configurable parameters from a device.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:see: requestConfigParam_, setConfigParam_, valueID_, notification_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_107requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestAllConfigParams");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3015; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestAllConfigParams") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3015; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3015; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestAllConfigParams");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3028
 * 
 *         '''
 *         self.manager.RequestAllConfigParams(homeid, nodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestAllConfigParams(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestAllConfigParams");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3035
 * # Methods for accessing device association groups.
 * #
 *     def getNumGroups(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumGroups:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_108getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_108getNumGroups[] = "\n.. _getNumGroups:\n\nGets the number of association groups reported by this node\n\nIn Z-Wave, groups are numbered starting from one.  For example, if a call to\nGetNumGroups returns 4, the _groupIdx value to use in calls to GetAssociations\nAddAssociation and RemoveAssociation will be a number between 1 and 4.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose groups we are interested in.\n:type nodeId: int\n:return: The number of groups.\n:rtype: int\n:see: getAssociations_, getMaxAssociations_, addAssociation_, removeAssociation_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_108getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNumGroups");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNumGroups") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumGroups");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3054
 * 
 *         '''
 *         return self.manager.GetNumGroups(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumGroups(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumGroups");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3056
 *         return self.manager.GetNumGroups(homeid, nodeid)
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAssociations:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_109getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_109getAssociations[] = "\n.. _getAssociations:\n\nGets the associations for a group\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations we are interested in.\n:type nodeId: int\n:param groupIdx: one-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:return: A set containing IDs of members of the group\n:rtype: set()\n:see: getNumGroups_, addAssociation_, removeAssociation_, getMaxAssociations_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_109getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_data;
  uint32_t __pyx_v_size;
  uint8_t **__pyx_v_dbuf;
  uint32_t __pyx_v_count;
  struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_retuint8 = 0;
  uint8_t *__pyx_v_p;
  uint32_t __pyx_v_start;
  uint32_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  uint32_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  uint32_t __pyx_t_7;
  int __pyx_t_8;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getAssociations");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3056; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3056; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3056; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3056; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getAssociations");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_data = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3073
 * 
 *         '''
 *         data = set()             # <<<<<<<<<<<<<<
 *         cdef uint32_t size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 *         #Allocate memory
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_data));
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3074
 *         '''
 *         data = set()
 *         cdef uint32_t size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 *         #Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t) * size)
 */
  __pyx_t_2 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetMaxAssociations(__pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3076
 *         cdef uint32_t size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 *         #Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t) * size)             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 */
  __pyx_v_dbuf = ((uint8_t **)malloc(((sizeof(uint8_t)) * __pyx_v_size)));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3078
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t) * size)
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)             # <<<<<<<<<<<<<<
 *         if count == 0:
 *             #Don't need to allocate memory.
 */
  __pyx_t_2 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetAssociations(__pyx_t_2, __pyx_t_4, __pyx_t_3, __pyx_v_dbuf);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3079
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 *         if count == 0:             # <<<<<<<<<<<<<<
 *             #Don't need to allocate memory.
 *             free(dbuf)
 */
  __pyx_t_5 = (__pyx_v_count == 0);
  if (__pyx_t_5) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3081
 *         if count == 0:
 *             #Don't need to allocate memory.
 *             free(dbuf)             # <<<<<<<<<<<<<<
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 */
    free(__pyx_v_dbuf);

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3082
 *             #Don't need to allocate memory.
 *             free(dbuf)
 *             return data             # <<<<<<<<<<<<<<
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_data));
    __pyx_r = ((PyObject *)__pyx_v_data);
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3083
 *             free(dbuf)
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)             # <<<<<<<<<<<<<<
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_RetAlloc)), ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __pyx_v_retuint8 = ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3085
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3086
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
  if (__pyx_v_count) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3087
 *         cdef uint32_t start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
    /*try:*/ {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3088
 *         if count:
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3089
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 */
      __pyx_t_2 = __pyx_v_count;
      for (__pyx_t_7 = __pyx_v_start; __pyx_t_7 < __pyx_t_2; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3090
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8.data[i])
 *                     p += 1
 */
        (__pyx_v_retuint8->data[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3091
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *             finally:
 */
        if (unlikely(__pyx_v_data == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'add'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3091; __pyx_clineno = __LINE__; goto __pyx_L9;} 
        }
        __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t((__pyx_v_retuint8->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3091; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = PySet_Add(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3091; __pyx_clineno = __LINE__; goto __pyx_L9;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3092
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *             finally:
 *                 # Free memory
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3095
 *             finally:
 *                 # Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return data
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L10;
      __pyx_L9: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L10;
      }
      __pyx_L10:;
      free(__pyx_v_dbuf);
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3097
 *                 free(dbuf)
 *                 pass
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.getAssociations");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_retuint8);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3099
 *         return data
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getMaxAssociations:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_110getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_110getMaxAssociations[] = "\n.. _getMaxAssociations:\n\nGets the maximum number of associations for a group.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node whose associations we are interested in.\n:type nodeid: int\n:param groupidx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupidx: int\n:return: The maximum number of nodes that can be associated into the group.\n:rtype: int\n:see: getNumGroups_, addAssociation_, removeAssociation_, getAssociations_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_110getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getMaxAssociations");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getMaxAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getMaxAssociations");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3116
 * 
 *         '''
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetMaxAssociations(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getMaxAssociations");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3118
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * Returns a label for the particular group of a node.
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_111getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_111getGroupLabel[] = "\nReturns a label for the particular group of a node.\n\n.. _getGroupLabel:\n\nThis label is populated by the device specific configuration files.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node whose associations are to be changed.\n:type nodeid: int\n:param groupidx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupidx: int\n:return: The label for the particular group of a node.\n:rtype: str\n:see: getNumGroups_, getAssociations_, getMaxAssociations_, addAssociation_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_111getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getGroupLabel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getGroupLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getGroupLabel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3137
 * 
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetGroupLabel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3138
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getGroupLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3140
 *         return c_string.c_str()
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addAssociation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_112addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_112addAssociation[] = "\n.. _addAssociation:\n\nAdds a node to an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsuceeed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.  Notification callbacks will be sent in\nboth cases.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations are to be changed.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:param targetNodeId: Identifier for the node that will be added to the association group.\n:type targetNodeId: int\n:see: getNumGroups_, getAssociations_, getMaxAssociations_, removeAssociation_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_112addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,&__pyx_n_s__targetnodeid,0};
  __Pyx_RefNannySetupContext("addAssociation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__targetnodeid);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_targetnodeid = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addAssociation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3163
 * 
 *         '''
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addAssociation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3165
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeAssociation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_113removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_113removeAssociation[] = "\n.. _removeAssociation:\n\nRemoves a node from an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsucceed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.   Notification callbacks will be sent\nin both cases.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations are to be changed.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:param targetNodeId: Identifier for the node that will be removed from the association group.\n:type targetNodeId: int\n:see: getNumGroups_, getAssociations_, getMaxAssociations_, addAssociation_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_113removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,&__pyx_n_s__targetnodeid,0};
  __Pyx_RefNannySetupContext("removeAssociation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__targetnodeid);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "removeAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_targetnodeid = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAssociation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3188
 * 
 *         '''
 *         self.manager.RemoveAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAssociation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3195
 * # For notification of changes to the Z-Wave network or device values and associations.
 * #
 *     def addWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addWatcher:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_114addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_114addWatcher[] = "\n.. _addWatcher:\n\nAdd a notification watcher.\n\nIn OpenZWave, all feedback from the Z-Wave network is sent to the application\nvia callbacks.  This method allows the application to add a notification\ncallback handler, known as a \"watcher\" to OpenZWave.  An application needs only\nadd a single watcher - all notifications will be reported to it.\n\n:param pythonfunc: Watcher pointer to a function that will be called by the notification system.\n:type pythonfunc: callback\n:see: removeWatcher_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_114addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("addWatcher");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3211
 * 
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this             # <<<<<<<<<<<<<<
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")
 */
  __Pyx_INCREF(__pyx_v_pythonfunc);
  __Pyx_GIVEREF(__pyx_v_pythonfunc);
  __Pyx_GOTREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback);
  __Pyx_DECREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback);
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback = __pyx_v_pythonfunc;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3212
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):             # <<<<<<<<<<<<<<
 *             raise ValueError("call to AddWatcher failed")
 * 
 */
  __pyx_t_1 = (!((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddWatcher(__pyx_f_12libopenzwave_notif_callback, ((void *)__pyx_v_pythonfunc)));
  if (__pyx_t_1) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3213
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * 
 *     def removeWatcher(self, pythonfunc):
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_31), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.addWatcher");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3215
 *             raise ValueError("call to AddWatcher failed")
 * 
 *     def removeWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeWatcher:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_115removeWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_115removeWatcher[] = "\n.. _removeWatcher:\n\nRemove a notification watcher.\n\n:param pythonfunc: Watcher pointer to a function\n:type pythonfunc: callback\n:see: addWatcher_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_115removeWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("removeWatcher");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3226
 * 
 *         '''
 *         if not self.manager.RemoveWatcher(notif_callback, <void*>self._watcherCallback):             # <<<<<<<<<<<<<<
 *             raise ValueError("call to RemoveWatcher failed")
 *         else:
 */
  __pyx_t_1 = (!((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveWatcher(__pyx_f_12libopenzwave_notif_callback, ((void *)((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback)));
  if (__pyx_t_1) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3227
 *         '''
 *         if not self.manager.RemoveWatcher(notif_callback, <void*>self._watcherCallback):
 *             raise ValueError("call to RemoveWatcher failed")             # <<<<<<<<<<<<<<
 *         else:
 *             self._watcherCallback = None
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_33), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3229
 *             raise ValueError("call to RemoveWatcher failed")
 *         else:
 *             self._watcherCallback = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback);
    __Pyx_DECREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback);
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback = Py_None;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeWatcher");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3238
 * # Commands for Z-Wave network management using the PC Controller.
 * #
 *     def resetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _resetController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_116resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_116resetController[] = "\n.. _resetController:\n\nHard Reset a PC Z-Wave Controller.\n\nResets a controller and erases its network configuration settings.  The\ncontroller becomes a primary controller ready to add devices to a new network.\n\n:param homeId: The Home ID of the Z-Wave controller to be reset.\n:type homeId: int\n:see: softResetController_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_116resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("resetController");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3252
 * 
 *         '''
 *         values_map.clear()             # <<<<<<<<<<<<<<
 *         self.manager.ResetController(homeid)
 * 
 */
  __pyx_v_12libopenzwave_values_map.clear();

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3253
 *         '''
 *         values_map.clear()
 *         self.manager.ResetController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def softResetController(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ResetController(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.resetController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3255
 *         self.manager.ResetController(homeid)
 * 
 *     def softResetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _softResetController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_117softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_117softResetController[] = "\n.. _softResetController:\n\nSoft Reset a PC Z-Wave Controller.\n\nResets a controller without erasing its network configuration settings.\n\n:param homeId: The Home ID of the Z-Wave controller to be reset.\n:type homeId: int\n:see: resetController_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_117softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("softResetController");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3268
 * 
 *         '''
 *         self.manager.SoftReset(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def cancelControllerCommand(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SoftReset(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.softResetController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3270
 *         self.manager.SoftReset(homeid)
 * 
 *     def cancelControllerCommand(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _cancelControllerCommand:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_118cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_118cancelControllerCommand[] = "\n.. _cancelControllerCommand:\n\nCancels any in-progress command running on a controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if a command was running and was cancelled.\n:rtype: bool\n:see: beginControllerCommand_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_118cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cancelControllerCommand");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3283
 * 
 *         '''
 *         return self.manager.CancelControllerCommand(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->CancelControllerCommand(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.cancelControllerCommand");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3285
 *         return self.manager.CancelControllerCommand(homeid)
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\             # <<<<<<<<<<<<<<
 *             highPower=False, nodeId=0xff, arg=0):
 * 
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_119beginControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_119beginControllerCommand[] = "\n\n.. _beginControllerCommand:\n\nStart a controller command process.\n\nCommands :\n\n     - Driver::ControllerCommand_AddDevice - Add a new device or controller to the Z-Wave network.\n     - Driver::ControllerCommand_CreateNewPrimary - Create a new primary controller when old primary fails. Requires SUC.\n     - Driver::ControllerCommand_ReceiveConfiguration - Receive network configuration information from primary controller. Requires secondary.\n     - Driver::ControllerCommand_RemoveDevice - Remove a device or controller from the Z-Wave network.\n     - Driver::ControllerCommand_RemoveFailedNode - Remove a node from the network. The node must not be responding\n     and be on the controller's failed node list.\n     - Driver::ControllerCommand_HasNodeFailed - Check whether a node is in the controller's failed nodes list.\n     - Driver::ControllerCommand_ReplaceFailedNode - Replace a failed device with another. If the node is not in\n     the controller's failed nodes list, or the node responds, this command will fail.\n     - Driver:: ControllerCommand_TransferPrimaryRole - Add a new controller to the network and\n     make it the primary.  The existing primary will become a secondary controller.\n     - Driver::ControllerCommand_RequestNetworkUpdate - Update the controller with network information from the SUC/SIS.\n     - Driver::ControllerCommand_RequestNodeNeighborUpdate - Get a node to rebuild its neighbour list.  This method also does RequestNodeNeighbors afterwards.\n     - Driver::ControllerCommand_AssignReturnRoute - Assign a network return route to a device.\n     - Driver::ControllerCommand_DeleteAllReturnRoutes - Delete all network return routes from a device.\n     - Driver::ControllerCommand_SendNodeInformation - Send a node information frame.\n     - Driver::ControllerCommand_ReplicationSend - Send information from primary to secondary\n     - Driver::ControllerCommand_CreateButton - Create a handheld button id.\n     - Driver::ControllerComman""d_DeleteButton - Delete a handheld button id.\n\nCallbacks :\n\n    - Driver::ControllerState_Waiting, the controller is waiting for a user action.  A notice should be displayed to the user at this point, telling them what to do next. For the add, remove, replace and transfer primary role commands, the user needs to be told to press the inclusion button on the device that  is going to be added or removed.  For ControllerCommand_ReceiveConfiguration, they must set their other controller to send its data, and for ControllerCommand_CreateNewPrimary, set the other controller to learn new data.\n    - Driver::ControllerState_InProgress - the controller is in the process of adding or removing the chosen node.  It is now too late to cancel the command.\n    - Driver::ControllerState_Complete - the controller has finished adding or removing the node, and the command is complete.\n    - Driver::ControllerState_Failed - will be sent if the command fails for any reason.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:param command: The command to be sent to the controller.\n:type command: ControllerCommand\n:param callback: Pointer to a function that will be called at various stages during the command process to notify the user of progress or to request actions on the user's part.  Defaults to NULL.\n:type callback: pfnControllerCallback_t\n:param context: Pointer to user defined data that will be passed into to the callback function.  Defaults to NULL.\n:type context:\n:param highPower: Used only with the AddDevice, AddController, RemoveDevice and RemoveController commands. Usually when adding or removing devices, the controller operates at low power so that the controller must be physically close to the device for security reasons.  If _highPower is true, the controller will operate at normal power levels instead.  Defaults to false.\n:type highPower: bool\n:param nodeId: Used only with the ReplaceFailedNode command, to specify the node that is g""oing to be replaced.\n:type nodeId: int\n:param arg:\n:type arg: int\n:return: True if the command was accepted and has started.\n:rtype: bool\n:see: cancelControllerCommand_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_119beginControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_command = 0;
  PyObject *__pyx_v_pythonfunc = 0;
  PyObject *__pyx_v_highPower = 0;
  PyObject *__pyx_v_nodeId = 0;
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  enum OpenZWave::Driver::ControllerCommand __pyx_t_2;
  bool __pyx_t_3;
  uint8_t __pyx_t_4;
  uint8_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeId,&__pyx_n_s__command,&__pyx_n_s__pythonfunc,&__pyx_n_s__highPower,&__pyx_n_s__nodeId,&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("beginControllerCommand");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = __pyx_k_35;
    values[4] = ((PyObject *)__pyx_int_255);
    values[5] = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeId);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__command);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("beginControllerCommand", 0, 3, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pythonfunc);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("beginControllerCommand", 0, 3, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__highPower);
        if (value) { values[3] = value; kw_args--; }
      }
      case  4:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeId);
        if (value) { values[4] = value; kw_args--; }
      }
      case  5:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (value) { values[5] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "beginControllerCommand") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeId = values[0];
    __pyx_v_command = values[1];
    __pyx_v_pythonfunc = values[2];
    __pyx_v_highPower = values[3];
    __pyx_v_nodeId = values[4];
    __pyx_v_arg = values[5];
  } else {
    __pyx_v_highPower = __pyx_k_35;
    __pyx_v_nodeId = ((PyObject *)__pyx_int_255);
    __pyx_v_arg = ((PyObject *)__pyx_int_0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  6:
      __pyx_v_arg = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5:
      __pyx_v_nodeId = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4:
      __pyx_v_highPower = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3:
      __pyx_v_pythonfunc = PyTuple_GET_ITEM(__pyx_args, 2);
      __pyx_v_command = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_homeId = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("beginControllerCommand", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.beginControllerCommand");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3351
 *         '''
 * 
 *         self._controllerCallback = pythonfunc # need to keep a reference to this             # <<<<<<<<<<<<<<
 *         return self.manager.BeginControllerCommand(homeId, command, \
 *                  ctrl_callback, <void*>pythonfunc, highPower, nodeId, arg)
 */
  __Pyx_INCREF(__pyx_v_pythonfunc);
  __Pyx_GIVEREF(__pyx_v_pythonfunc);
  __Pyx_GOTREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_controllerCallback);
  __Pyx_DECREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_controllerCallback);
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_controllerCallback = __pyx_v_pythonfunc;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3352
 * 
 *         self._controllerCallback = pythonfunc # need to keep a reference to this
 *         return self.manager.BeginControllerCommand(homeId, command, \             # <<<<<<<<<<<<<<
 *                  ctrl_callback, <void*>pythonfunc, highPower, nodeId, arg)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((enum OpenZWave::Driver::ControllerCommand)PyInt_AsLong(__pyx_v_command)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3353
 *         self._controllerCallback = pythonfunc # need to keep a reference to this
 *         return self.manager.BeginControllerCommand(homeId, command, \
 *                  ctrl_callback, <void*>pythonfunc, highPower, nodeId, arg)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_highPower); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_arg); if (unlikely((__pyx_t_5 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->BeginControllerCommand(__pyx_t_1, __pyx_t_2, __pyx_f_12libopenzwave_ctrl_callback, ((void *)__pyx_v_pythonfunc), __pyx_t_3, __pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.beginControllerCommand");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3359
 * #-----------------------------------------------------------------------------
 * 
 *     def getNumScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumScenes:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_120getNumScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_120getNumScenes[] = "\n.. _getNumScenes:\n\nGets the number of scenes that have been defined\n\n:return: The number of scenes.\n:rtype: int\n:see: getAllScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_120getNumScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumScenes");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3374
 * 
 *        '''
 *         return self.manager.GetNumScenes()             # <<<<<<<<<<<<<<
 * 
 *     def getAllScenes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumScenes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumScenes");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3376
 *         return self.manager.GetNumScenes()
 * 
 *     def getAllScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAllScenes:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_121getAllScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_121getAllScenes[] = "\n.. _getAllScenes:\n\nGets a set of all the SceneIds\n\n:return: A set() containing neighboring scene IDs\n:rtype: set()\n:see: getNumScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_121getAllScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_data;
  uint32_t __pyx_v_size;
  uint8_t **__pyx_v_dbuf;
  uint32_t __pyx_v_count;
  struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_retuint8 = 0;
  uint8_t *__pyx_v_p;
  uint32_t __pyx_v_start;
  uint32_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  uint32_t __pyx_t_4;
  uint32_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("getAllScenes");
  __pyx_v_data = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3391
 * 
 *         '''
 *         data = set()             # <<<<<<<<<<<<<<
 *         cdef uint32_t size = self.manager.GetNumScenes()
 *         # Allocate memory
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_data));
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3392
 *         '''
 *         data = set()
 *         cdef uint32_t size = self.manager.GetNumScenes()             # <<<<<<<<<<<<<<
 *         # Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*size)
 */
  __pyx_v_size = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumScenes();

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3394
 *         cdef uint32_t size = self.manager.GetNumScenes()
 *         # Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*size)             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAllScenes(dbuf)
 */
  __pyx_v_dbuf = ((uint8_t **)malloc(((sizeof(uint8_t)) * __pyx_v_size)));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3396
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*size)
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAllScenes(dbuf)             # <<<<<<<<<<<<<<
 *         if count == 0:
 *             #Don't need to allocate memory.
 */
  __pyx_v_count = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetAllScenes(__pyx_v_dbuf);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3397
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAllScenes(dbuf)
 *         if count == 0:             # <<<<<<<<<<<<<<
 *             #Don't need to allocate memory.
 *             free(dbuf)
 */
  __pyx_t_2 = (__pyx_v_count == 0);
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3399
 *         if count == 0:
 *             #Don't need to allocate memory.
 *             free(dbuf)             # <<<<<<<<<<<<<<
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 */
    free(__pyx_v_dbuf);

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3400
 *             #Don't need to allocate memory.
 *             free(dbuf)
 *             return data             # <<<<<<<<<<<<<<
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_data));
    __pyx_r = ((PyObject *)__pyx_v_data);
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3401
 *             free(dbuf)
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)             # <<<<<<<<<<<<<<
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_uint32_t(__pyx_v_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_RetAlloc)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_retuint8 = ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3403
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3404
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
  if (__pyx_v_count) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3405
 *         cdef uint32_t start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
    /*try:*/ {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3406
 *         if count:
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3407
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 */
      __pyx_t_4 = __pyx_v_count;
      for (__pyx_t_5 = __pyx_v_start; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3408
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8.data[i])
 *                     p += 1
 */
        (__pyx_v_retuint8->data[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3409
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *             finally:
 */
        if (unlikely(__pyx_v_data == Py_None)) {
          PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'add'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3409; __pyx_clineno = __LINE__; goto __pyx_L8;} 
        }
        __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t((__pyx_v_retuint8->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3409; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PySet_Add(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3409; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3410
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *             finally:
 *                 # Free memory
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3413
 *             finally:
 *                 # Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return data
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L9;
      __pyx_L8: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L9;
      }
      __pyx_L9:;
      free(__pyx_v_dbuf);
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3415
 *                 free(dbuf)
 *                 pass
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def removeAllScenes(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getAllScenes");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_retuint8);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3417
 *         return data
 * 
 *     def removeAllScenes(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeAllScenes:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_122removeAllScenes(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_122removeAllScenes[] = "\n.. _removeAllScenes:\n\nDelete all scenes.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_122removeAllScenes(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  uint32_t __pyx_t_1;
  __Pyx_RefNannySetupContext("removeAllScenes");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3431
 * 
 *        '''
 *         self.manager.RemoveAllScenes(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def removeScene(self, sceneId):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveAllScenes(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAllScenes");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3433
 *         self.manager.RemoveAllScenes(homeid)
 * 
 *     def removeScene(self, sceneId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeScene:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_123removeScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneId); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_123removeScene[] = "\n.. _removeScene:\n\nRemove an existing Scene.\n\n:param sceneId: The unique Scene ID to be removed.\n:type sceneId: int\n:return: True if scene was removed.\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_123removeScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneId) {
  PyObject *__pyx_r = NULL;
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("removeScene");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3449
 * 
 *         '''
 *         return self.manager.RemoveScene(sceneId)             # <<<<<<<<<<<<<<
 * 
 *     def createScene(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_sceneId); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveScene(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeScene");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3451
 *         return self.manager.RemoveScene(sceneId)
 * 
 *     def createScene(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _createScene:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_124createScene(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_124createScene[] = "\n.. _createScene:\n\nCreate a Scene.\n\n:return: Scene ID used to reference the scene. 0 is failure result.\n:rtype: id\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_124createScene(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("createScene");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3465
 * 
 *         '''
 *         return self.manager.CreateScene()             # <<<<<<<<<<<<<<
 * 
 *     def sceneGetValues(self, uint8_t id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint8_t(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->CreateScene()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.createScene");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3467
 *         return self.manager.CreateScene()
 * 
 *     def sceneGetValues(self, uint8_t id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _sceneGetValues:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_125sceneGetValues(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_125sceneGetValues[] = "\n.. _sceneGetValues:\n\nRetrieve the list of values from a scene.\n\n:param id: The ID of a scene.\n:type id: int\n:rtype: dict()\n:return: A dict containing : {valueid : value, ...}\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, removeScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_125sceneGetValues(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  uint8_t __pyx_v_id;
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  OpenZWave::ValueID *__pyx_v_cvalueID;
  std::vector<OpenZWave::ValueID> __pyx_v_vect;
  PyObject *__pyx_v_ret;
  PyObject *__pyx_v_datatype;
  PyObject *__pyx_v_value_data;
  uint64_t __pyx_v_value_id;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("sceneGetValues");
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_from_py_uint8_t(__pyx_arg_id); if (unlikely((__pyx_v_id == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.sceneGetValues");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_ret = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_value_data = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3491
 *         cdef ValueID* cvalueID
 *         cdef vector[ValueID] vect
 *         ret = dict()             # <<<<<<<<<<<<<<
 *         if self.manager.SceneGetValues(id, &vect):
 *             while not vect.empty() :
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_ret));
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3492
 *         cdef vector[ValueID] vect
 *         ret = dict()
 *         if self.manager.SceneGetValues(id, &vect):             # <<<<<<<<<<<<<<
 *             while not vect.empty() :
 *                 cvalueID = &vect.back()
 */
  __pyx_t_2 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValues(__pyx_v_id, (&__pyx_v_vect));
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3493
 *         ret = dict()
 *         if self.manager.SceneGetValues(id, &vect):
 *             while not vect.empty() :             # <<<<<<<<<<<<<<
 *                 cvalueID = &vect.back()
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 */
    while (1) {
      __pyx_t_3 = (!__pyx_v_vect.empty());
      if (!__pyx_t_3) break;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3494
 *         if self.manager.SceneGetValues(id, &vect):
 *             while not vect.empty() :
 *                 cvalueID = &vect.back()             # <<<<<<<<<<<<<<
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 *                 value_data = None
 */
      __pyx_v_cvalueID = (&__pyx_v_vect.back());

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3495
 *             while not vect.empty() :
 *                 cvalueID = &vect.back()
 *                 datatype = PyValueTypes[cvalueID.GetType()]             # <<<<<<<<<<<<<<
 *                 value_data = None
 *                 value_id = cvalueID.GetId()
 */
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_cvalueID->GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_GetItem(__pyx_t_1, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_v_datatype);
      __pyx_v_datatype = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3496
 *                 cvalueID = &vect.back()
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 *                 value_data = None             # <<<<<<<<<<<<<<
 *                 value_id = cvalueID.GetId()
 *                 if datatype == "Bool":
 */
      __Pyx_INCREF(Py_None);
      __Pyx_DECREF(__pyx_v_value_data);
      __pyx_v_value_data = Py_None;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3497
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 *                 value_data = None
 *                 value_id = cvalueID.GetId()             # <<<<<<<<<<<<<<
 *                 if datatype == "Bool":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 */
      __pyx_v_value_id = __pyx_v_cvalueID->GetId();

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3498
 *                 value_data = None
 *                 value_id = cvalueID.GetId()
 *                 if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3499
 *                 value_id = cvalueID.GetId()
 *                 if datatype == "Bool":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)             # <<<<<<<<<<<<<<
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "Byte":
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsBool(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_bool));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3500
 *                 if datatype == "Bool":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Byte":
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3501
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 *                     value_data = type_byte if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3502
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "Byte":
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)             # <<<<<<<<<<<<<<
 *                     value_data = type_byte if cret else None
 *                 elif datatype == "Decimal":
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsByte(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_byte));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3503
 *                 elif datatype == "Byte":
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 *                     value_data = type_byte if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Decimal":
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = __Pyx_PyInt_to_py_uint8_t(__pyx_v_type_byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3504
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 *                     value_data = type_byte if cret else None
 *                 elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 *                     value_data = type_float if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3505
 *                     value_data = type_byte if cret else None
 *                 elif datatype == "Decimal":
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)             # <<<<<<<<<<<<<<
 *                     value_data = type_float if cret else None
 *                 elif datatype == "Int":
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsFloat(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_float));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3506
 *                 elif datatype == "Decimal":
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 *                     value_data = type_float if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Int":
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_type_float); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3507
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 *                     value_data = type_float if cret else None
 *                 elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 *                     value_data = type_int if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3508
 *                     value_data = type_float if cret else None
 *                 elif datatype == "Int":
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)             # <<<<<<<<<<<<<<
 *                     value_data = type_int if cret else None
 *                 elif datatype == "Short":
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsInt(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_int));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3509
 *                 elif datatype == "Int":
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 *                     value_data = type_int if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Short":
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = __Pyx_PyInt_to_py_int32_t(__pyx_v_type_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3510
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 *                     value_data = type_int if cret else None
 *                 elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 *                     value_data = type_short if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3511
 *                     value_data = type_int if cret else None
 *                 elif datatype == "Short":
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)             # <<<<<<<<<<<<<<
 *                     value_data = type_short if cret else None
 *                 elif datatype == "String":
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsShort(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_short));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3512
 *                 elif datatype == "Short":
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 *                     value_data = type_short if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "String":
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = __Pyx_PyInt_to_py_int16_t(__pyx_v_type_short); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3513
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 *                     value_data = type_short if cret else None
 *                 elif datatype == "String":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3514
 *                     value_data = type_short if cret else None
 *                 elif datatype == "String":
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)             # <<<<<<<<<<<<<<
 *                     value_data = type_string.c_str() if cret else None
 *                 elif datatype == "Button":
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsString(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_string));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3515
 *                 elif datatype == "String":
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Button":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_4));
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3516
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 *                 elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Button), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3517
 *                     value_data = type_string.c_str() if cret else None
 *                 elif datatype == "Button":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)             # <<<<<<<<<<<<<<
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "List":
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsBool(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_bool));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3518
 *                 elif datatype == "Button":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "List":
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3519
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "List":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__List), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_3) {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3520
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "List":
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)             # <<<<<<<<<<<<<<
 *                     value_data = type_string.c_str() if cret else None
 *                 else :
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueListSelection(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_string));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3521
 *                 elif datatype == "List":
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *                 else :
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_4));
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8;
      }
      /*else*/ {

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3523
 *                     value_data = type_string.c_str() if cret else None
 *                 else :
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)             # <<<<<<<<<<<<<<
 *                     value_data = type_string.c_str() if cret else None
 *                 ret[value_id] = value_data
 */
        __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneGetValueAsString(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_string));

        /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3524
 *                 else :
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *                 ret[value_id] = value_data
 *                 vect.pop_back();
 */
        if (__pyx_v_cret) {
          __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_4));
          __pyx_t_5 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_5 = Py_None;
        }
        __Pyx_DECREF(__pyx_v_value_data);
        __pyx_v_value_data = __pyx_t_5;
        __pyx_t_5 = 0;
      }
      __pyx_L8:;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3525
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 *                 ret[value_id] = value_data             # <<<<<<<<<<<<<<
 *                 vect.pop_back();
 *         return ret
 */
      if (__Pyx_SetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_value_id, __pyx_v_value_data, sizeof(uint64_t)+1, __Pyx_PyInt_to_py_uint64_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3526
 *                     value_data = type_string.c_str() if cret else None
 *                 ret[value_id] = value_data
 *                 vect.pop_back();             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      __pyx_v_vect.pop_back();
    }
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3527
 *                 ret[value_id] = value_data
 *                 vect.pop_back();
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.sceneGetValues");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_DECREF(__pyx_v_value_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3530
 * 
 * 
 *     def addSceneValue(self, uint8_t sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addSceneValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_126addSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_126addSceneValue[] = "\n.. _addSceneValue:\n\nAdd a ValueID of value to an existing scene.\n\nActually I don't know how to use it :)\n\n:param sceneid: The ID of a scene.\n:type sceneid: int\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set\n:type value: bool, int, float, string\n:return: An integer representing the result of the operation\n    0 : The C method fails\n    1 : The C method succeed\n    2 : Can't find id in the map\n:rtype: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_126addSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint8_t __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  uint8_t __pyx_t_8;
  float __pyx_t_9;
  int32_t __pyx_t_10;
  int16_t __pyx_t_11;
  char *__pyx_t_12;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sceneid,&__pyx_n_s__id,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("addSceneValue");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sceneid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3530; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3530; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3530; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sceneid = __Pyx_PyInt_from_py_uint8_t(values[0]); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3530; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
    __pyx_v_value = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sceneid = __Pyx_PyInt_from_py_uint8_t(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3530; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3530; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addSceneValue");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3560
 *         cdef int16_t type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3561
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3562
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3563
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3564
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3565
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3566
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3567
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3568
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_value); if (unlikely((__pyx_t_8 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3569
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3570
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3571
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3572
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3573
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3574
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3575
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3576
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_from_py_int32_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3577
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3578
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3579
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3580
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_from_py_int16_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (int16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3581
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3582
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3583
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3584
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3585
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3586
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Button":
 *                 type_bool = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3587
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Button), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3588
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3589
 *             elif datatype == "Button":
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3590
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "List":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3591
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__List), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3592
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3593
 *             elif datatype == "List":
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *         return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValueListSelection(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3594
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3595
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def removeSceneValue(self, uint8_t sceneid, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.addSceneValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3597
 *         return ret
 * 
 *     def removeSceneValue(self, uint8_t sceneid, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeSceneValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_127removeSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_127removeSceneValue[] = "\n.. _removeSceneValue:\n\nRemove the Value ID from an existing scene.\n\n:param sceneid: The ID of a scene.\n:type sceneid: int\n:param id: The ID of a value.\n:type id: int\n:return: True if succee. False otherwise\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_127removeSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint8_t __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sceneid,&__pyx_n_s__id,0};
  __Pyx_RefNannySetupContext("removeSceneValue");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sceneid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeSceneValue", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "removeSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sceneid = __Pyx_PyInt_from_py_uint8_t(values[0]); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sceneid = __Pyx_PyInt_from_py_uint8_t(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeSceneValue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSceneValue");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3615
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.RemoveSceneValue(sceneid, values_map.at(id))
 *         return False
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3616
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.RemoveSceneValue(sceneid, values_map.at(id))             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3617
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.RemoveSceneValue(sceneid, values_map.at(id))
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def setSceneValue(self, uint8_t sceneid, id, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSceneValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3619
 *         return False
 * 
 *     def setSceneValue(self, uint8_t sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_128setSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_128setSceneValue[] = "\n.. _setSceneValue:\n\nSet a value to an existing scene's ValueID.\n\n:param sceneid: The ID of a scene.\n:type sceneid: int\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set\n:type value: bool, int, float, string\n:return: An integer representing the result of the operation\n    0 : The C method fails\n    1 : The C method succeed\n    2 : Can't find id in the map\n:rtype: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_128setSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint8_t __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  uint8_t __pyx_t_8;
  float __pyx_t_9;
  int32_t __pyx_t_10;
  int16_t __pyx_t_11;
  char *__pyx_t_12;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sceneid,&__pyx_n_s__id,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setSceneValue");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sceneid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3619; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3619; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3619; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sceneid = __Pyx_PyInt_from_py_uint8_t(values[0]); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3619; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
    __pyx_v_value = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sceneid = __Pyx_PyInt_from_py_uint8_t(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3619; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3619; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneValue");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3648
 *         cdef int16_t type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3649
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3650
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3651
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3652
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3653
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3654
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3655
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3656
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_value); if (unlikely((__pyx_t_8 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3657
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3658
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3659
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3660
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3661
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3662
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3663
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3664
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_from_py_int32_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3665
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3666
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3667
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3668
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_from_py_int16_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (int16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3669
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3670
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3671
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3672
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3673
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3674
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Button":
 *                 type_bool = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3675
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Button), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3676
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3677
 *             elif datatype == "Button":
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3678
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "List":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3679
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__List), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3680
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3681
 *             elif datatype == "List":
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *         return ret
 */
      __pyx_t_1 = __Pyx_PyInt_from_py_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValueListSelection(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3682
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3683
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def getSceneLabel(self, sceneid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3685
 *         return ret
 * 
 *     def getSceneLabel(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSceneLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_129getSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_129getSceneLabel[] = "\n.. _getSceneLabel:\n\nReturns a label for the particular scene.\n\n:param sceneId: The ID of a scene.\n:type sceneId: int\n:param value: The value to set\n:type value: int\n:return: The label string.\n:rtype: str\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_129getSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getSceneLabel");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3703
 * 
 *         '''
 *         cdef string c_string = self.manager.GetSceneLabel(sceneid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetSceneLabel(__pyx_t_1);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3704
 *         '''
 *         cdef string c_string = self.manager.GetSceneLabel(sceneid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def setSceneLabel(self, sceneid, char *label):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSceneLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3706
 *         return c_string.c_str()
 * 
 *     def setSceneLabel(self, sceneid, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_130setSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_130setSceneLabel[] = "\n.. _setSceneLabel:\n\nSets a label for the particular scene.\n\n:param sceneId: The ID of the scene.\n:type sceneId: int\n:param value: The new value of the label.\n:type value: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_130setSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sceneid = 0;
  char *__pyx_v_label;
  PyObject *__pyx_r = NULL;
  uint8_t __pyx_t_1;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sceneid,&__pyx_n_s__label,0};
  __Pyx_RefNannySetupContext("setSceneLabel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sceneid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__label);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSceneLabel", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setSceneLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sceneid = values[0];
    __pyx_v_label = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sceneid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_label = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSceneLabel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneLabel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3722
 * 
 *         '''
 *         self.manager.SetSceneLabel(sceneid, string(label))             # <<<<<<<<<<<<<<
 * 
 *     def sceneExists(self, sceneid):
 */
  __pyx_t_1 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneLabel(__pyx_t_1, std::string(__pyx_v_label));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3724
 *         self.manager.SetSceneLabel(sceneid, string(label))
 * 
 *     def sceneExists(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _sceneExists:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_131sceneExists(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_131sceneExists[] = "\n.. _sceneExists:\n\nCheck if a Scene ID is defined.\n\n:param sceneId: The ID of the scene to check.\n:type sceneId: int\n:return: True if Scene ID exists.\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_131sceneExists(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = NULL;
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sceneExists");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3740
 * 
 *         '''
 *         return self.manager.SceneExists(sceneid)             # <<<<<<<<<<<<<<
 * 
 *     def activateScene(self, sceneid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneExists(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.sceneExists");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3742
 *         return self.manager.SceneExists(sceneid)
 * 
 *     def activateScene(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _activateScene:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_132activateScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_132activateScene[] = "\n.. _activateScene:\n\nActivate given scene to perform all its actions.\n\n:param sceneId: The ID of the scene to activate.\n:type sceneId: int\n:return: True if it is successful.\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_132activateScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = NULL;
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("activateScene");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3758
 * 
 *         '''
 *         return self.manager.ActivateScene(sceneid)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_from_py_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ActivateScene(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.activateScene");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_12libopenzwave_PyOptions(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_PyOptions(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12libopenzwave_PyOptions[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_0create, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_0create)},
  {__Pyx_NAMESTR("lock"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_1lock, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_1lock)},
  {__Pyx_NAMESTR("addOptionBool"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_2addOptionBool, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_2addOptionBool)},
  {__Pyx_NAMESTR("addOptionInt"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_3addOptionInt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_3addOptionInt)},
  {__Pyx_NAMESTR("addOptionString"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_4addOptionString, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_4addOptionString)},
  {__Pyx_NAMESTR("getConfigPath"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_5getConfigPath, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_5getConfigPath)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyOptions = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyOptions = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyOptions = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyOptions = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_12libopenzwave_PyOptions = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.PyOptions"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_PyOptions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_PyOptions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyOptions, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyOptions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyOptions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyOptions, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    Manage options manager\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_PyOptions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_PyOptions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_12libopenzwave_RetAlloc(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_12libopenzwave_8RetAlloc_0__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_RetAlloc(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_12libopenzwave_8RetAlloc_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12libopenzwave_RetAlloc[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_RetAlloc = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_RetAlloc = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RetAlloc = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_RetAlloc = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_12libopenzwave_RetAlloc = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.RetAlloc"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_RetAlloc), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_RetAlloc, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_RetAlloc, /*tp_as_number*/
  &__pyx_tp_as_sequence_RetAlloc, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RetAlloc, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_RetAlloc, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    Map an array of uint8_t used when retrieving sets.\n    Allocate memory at init and free it when no more reference to it exist.\n    Give it to lion as Nico0084 says : http://blog.naviso.fr/wordpress/wp-sphinxdoc/uploads/2011/11/MemoryLeaks3.jpg\n\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_RetAlloc, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_RetAlloc, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_12libopenzwave_PyManager(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_12libopenzwave_PyManager *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_12libopenzwave_PyManager *)o);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  p->_controllerCallback = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_PyManager(PyObject *o) {
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  Py_XDECREF(p->_watcherCallback);
  Py_XDECREF(p->_controllerCallback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_12libopenzwave_PyManager(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  if (p->_watcherCallback) {
    e = (*v)(p->_watcherCallback, a); if (e) return e;
  }
  if (p->_controllerCallback) {
    e = (*v)(p->_controllerCallback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12libopenzwave_PyManager(PyObject *o) {
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_watcherCallback);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_controllerCallback);
  p->_controllerCallback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_12libopenzwave_PyManager[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_0create, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_0create)},
  {__Pyx_NAMESTR("writeConfig"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_1writeConfig, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_1writeConfig)},
  {__Pyx_NAMESTR("addDriver"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_2addDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_2addDriver)},
  {__Pyx_NAMESTR("removeDriver"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_3removeDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_3removeDriver)},
  {__Pyx_NAMESTR("getControllerInterfaceType"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_4getControllerInterfaceType, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_4getControllerInterfaceType)},
  {__Pyx_NAMESTR("getControllerPath"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_5getControllerPath, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_5getControllerPath)},
  {__Pyx_NAMESTR("getControllerNodeId"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_6getControllerNodeId, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_6getControllerNodeId)},
  {__Pyx_NAMESTR("isPrimaryController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_7isPrimaryController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_7isPrimaryController)},
  {__Pyx_NAMESTR("isStaticUpdateController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_8isStaticUpdateController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_8isStaticUpdateController)},
  {__Pyx_NAMESTR("isBridgeController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_9isBridgeController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_9isBridgeController)},
  {__Pyx_NAMESTR("getLibraryVersion"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_10getLibraryVersion, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_10getLibraryVersion)},
  {__Pyx_NAMESTR("getPythonLibraryVersion"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_11getPythonLibraryVersion, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_11getPythonLibraryVersion)},
  {__Pyx_NAMESTR("getPythonLibraryVersionNumber"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_12getPythonLibraryVersionNumber, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_12getPythonLibraryVersionNumber)},
  {__Pyx_NAMESTR("getOzwLibraryVersion"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_13getOzwLibraryVersion, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_13getOzwLibraryVersion)},
  {__Pyx_NAMESTR("getOzwLibraryVersionNumber"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_14getOzwLibraryVersionNumber, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_14getOzwLibraryVersionNumber)},
  {__Pyx_NAMESTR("getLibraryTypeName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_15getLibraryTypeName, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_15getLibraryTypeName)},
  {__Pyx_NAMESTR("getSendQueueCount"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_16getSendQueueCount, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_16getSendQueueCount)},
  {__Pyx_NAMESTR("logDriverStatistics"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_17logDriverStatistics, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_17logDriverStatistics)},
  {__Pyx_NAMESTR("getDriverStatistics"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_18getDriverStatistics, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_18getDriverStatistics)},
  {__Pyx_NAMESTR("testNetwork"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_19testNetwork, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_19testNetwork)},
  {__Pyx_NAMESTR("healNetworkNode"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_20healNetworkNode, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_20healNetworkNode)},
  {__Pyx_NAMESTR("healNetwork"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_21healNetwork, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_21healNetwork)},
  {__Pyx_NAMESTR("getPollInterval"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_22getPollInterval, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_22getPollInterval)},
  {__Pyx_NAMESTR("setPollInterval"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_23setPollInterval, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_23setPollInterval)},
  {__Pyx_NAMESTR("enablePoll"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_24enablePoll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_24enablePoll)},
  {__Pyx_NAMESTR("disablePoll"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_25disablePoll, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_25disablePoll)},
  {__Pyx_NAMESTR("isPolled"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_26isPolled, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_26isPolled)},
  {__Pyx_NAMESTR("getPollIntensity"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_27getPollIntensity, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_27getPollIntensity)},
  {__Pyx_NAMESTR("setPollIntensity"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_28setPollIntensity, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_28setPollIntensity)},
  {__Pyx_NAMESTR("testNetworkNode"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_29testNetworkNode, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_29testNetworkNode)},
  {__Pyx_NAMESTR("getNodeStatistics"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_30getNodeStatistics, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_30getNodeStatistics)},
  {__Pyx_NAMESTR("requestNodeDynamic"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_31requestNodeDynamic, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_31requestNodeDynamic)},
  {__Pyx_NAMESTR("refreshNodeInfo"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_32refreshNodeInfo, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_32refreshNodeInfo)},
  {__Pyx_NAMESTR("requestNodeState"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_33requestNodeState, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_33requestNodeState)},
  {__Pyx_NAMESTR("isNodeBeamingDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_34isNodeBeamingDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_34isNodeBeamingDevice)},
  {__Pyx_NAMESTR("isNodeListeningDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_35isNodeListeningDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_35isNodeListeningDevice)},
  {__Pyx_NAMESTR("isNodeFrequentListeningDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_36isNodeFrequentListeningDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_36isNodeFrequentListeningDevice)},
  {__Pyx_NAMESTR("isNodeSecurityDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_37isNodeSecurityDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_37isNodeSecurityDevice)},
  {__Pyx_NAMESTR("isNodeRoutingDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_38isNodeRoutingDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_38isNodeRoutingDevice)},
  {__Pyx_NAMESTR("getNodeMaxBaudRate"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_39getNodeMaxBaudRate, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_39getNodeMaxBaudRate)},
  {__Pyx_NAMESTR("getNodeVersion"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_40getNodeVersion, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_40getNodeVersion)},
  {__Pyx_NAMESTR("getNodeSecurity"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_41getNodeSecurity, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_41getNodeSecurity)},
  {__Pyx_NAMESTR("getNodeBasic"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_42getNodeBasic, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_42getNodeBasic)},
  {__Pyx_NAMESTR("getNodeGeneric"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_43getNodeGeneric, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_43getNodeGeneric)},
  {__Pyx_NAMESTR("getNodeSpecific"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_44getNodeSpecific, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_44getNodeSpecific)},
  {__Pyx_NAMESTR("getNodeType"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_45getNodeType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_45getNodeType)},
  {__Pyx_NAMESTR("getNodeNeighbors"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_46getNodeNeighbors, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_46getNodeNeighbors)},
  {__Pyx_NAMESTR("getNodeManufacturerName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_47getNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_47getNodeManufacturerName)},
  {__Pyx_NAMESTR("getNodeProductName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_48getNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_48getNodeProductName)},
  {__Pyx_NAMESTR("getNodeName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_49getNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_49getNodeName)},
  {__Pyx_NAMESTR("getNodeLocation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_50getNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_50getNodeLocation)},
  {__Pyx_NAMESTR("getNodeManufacturerId"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_51getNodeManufacturerId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_51getNodeManufacturerId)},
  {__Pyx_NAMESTR("getNodeProductType"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_52getNodeProductType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_52getNodeProductType)},
  {__Pyx_NAMESTR("getNodeProductId"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_53getNodeProductId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_53getNodeProductId)},
  {__Pyx_NAMESTR("setNodeManufacturerName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_54setNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_54setNodeManufacturerName)},
  {__Pyx_NAMESTR("setNodeProductName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_55setNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_55setNodeProductName)},
  {__Pyx_NAMESTR("setNodeName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_56setNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_56setNodeName)},
  {__Pyx_NAMESTR("setNodeLocation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_57setNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_57setNodeLocation)},
  {__Pyx_NAMESTR("setNodeOn"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_58setNodeOn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_58setNodeOn)},
  {__Pyx_NAMESTR("setNodeOff"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_59setNodeOff, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_59setNodeOff)},
  {__Pyx_NAMESTR("setNodeLevel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_60setNodeLevel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_60setNodeLevel)},
  {__Pyx_NAMESTR("isNodeInfoReceived"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_61isNodeInfoReceived, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_61isNodeInfoReceived)},
  {__Pyx_NAMESTR("getNodeClassInformation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_62getNodeClassInformation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_62getNodeClassInformation)},
  {__Pyx_NAMESTR("isNodeAwake"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_63isNodeAwake, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_63isNodeAwake)},
  {__Pyx_NAMESTR("isNodeFailed"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_64isNodeFailed, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_64isNodeFailed)},
  {__Pyx_NAMESTR("getNodeQueryStage"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_65getNodeQueryStage, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_65getNodeQueryStage)},
  {__Pyx_NAMESTR("getNodeQueryStageCode"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_66getNodeQueryStageCode, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_66getNodeQueryStageCode)},
  {__Pyx_NAMESTR("setValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_67setValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_67setValue)},
  {__Pyx_NAMESTR("refreshValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_68refreshValue, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_68refreshValue)},
  {__Pyx_NAMESTR("getValueLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_69getValueLabel, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_69getValueLabel)},
  {__Pyx_NAMESTR("setValueLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_70setValueLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_70setValueLabel)},
  {__Pyx_NAMESTR("getValueUnits"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_71getValueUnits, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_71getValueUnits)},
  {__Pyx_NAMESTR("setValueUnits"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_72setValueUnits, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_72setValueUnits)},
  {__Pyx_NAMESTR("getValueHelp"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_73getValueHelp, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_73getValueHelp)},
  {__Pyx_NAMESTR("setValueHelp"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_74setValueHelp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_74setValueHelp)},
  {__Pyx_NAMESTR("getValueMin"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_75getValueMin, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_75getValueMin)},
  {__Pyx_NAMESTR("getValueMax"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_76getValueMax, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_76getValueMax)},
  {__Pyx_NAMESTR("isValueReadOnly"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_77isValueReadOnly, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_77isValueReadOnly)},
  {__Pyx_NAMESTR("isValueWriteOnly"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_78isValueWriteOnly, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_78isValueWriteOnly)},
  {__Pyx_NAMESTR("isValueSet"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_79isValueSet, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_79isValueSet)},
  {__Pyx_NAMESTR("getValueGenre"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_80getValueGenre, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_80getValueGenre)},
  {__Pyx_NAMESTR("getValueCommandClass"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_81getValueCommandClass, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_81getValueCommandClass)},
  {__Pyx_NAMESTR("getValueInstance"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_82getValueInstance, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_82getValueInstance)},
  {__Pyx_NAMESTR("getValueIndex"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_83getValueIndex, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_83getValueIndex)},
  {__Pyx_NAMESTR("getValueType"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_84getValueType, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_84getValueType)},
  {__Pyx_NAMESTR("getValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_85getValue, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_85getValue)},
  {__Pyx_NAMESTR("getValueAsBool"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_86getValueAsBool, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_86getValueAsBool)},
  {__Pyx_NAMESTR("getValueAsByte"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_87getValueAsByte, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_87getValueAsByte)},
  {__Pyx_NAMESTR("getValueAsFloat"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_88getValueAsFloat, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_88getValueAsFloat)},
  {__Pyx_NAMESTR("getValueAsShort"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_89getValueAsShort, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_89getValueAsShort)},
  {__Pyx_NAMESTR("getValueAsInt"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_90getValueAsInt, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_90getValueAsInt)},
  {__Pyx_NAMESTR("getValueAsString"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_91getValueAsString, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_91getValueAsString)},
  {__Pyx_NAMESTR("getValueListSelectionStr"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_92getValueListSelectionStr, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_92getValueListSelectionStr)},
  {__Pyx_NAMESTR("getValueListSelectionNum"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_93getValueListSelectionNum, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_93getValueListSelectionNum)},
  {__Pyx_NAMESTR("getValueListItems"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_94getValueListItems, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_94getValueListItems)},
  {__Pyx_NAMESTR("pressButton"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_95pressButton, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_95pressButton)},
  {__Pyx_NAMESTR("releaseButton"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_96releaseButton, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_96releaseButton)},
  {__Pyx_NAMESTR("getValueFloatPrecision"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_97getValueFloatPrecision, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_97getValueFloatPrecision)},
  {__Pyx_NAMESTR("setSwitchPoint"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_98setSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_98setSwitchPoint)},
  {__Pyx_NAMESTR("removeSwitchPoint"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_99removeSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_99removeSwitchPoint)},
  {__Pyx_NAMESTR("clearSwitchPoints"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_100clearSwitchPoints, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_100clearSwitchPoints)},
  {__Pyx_NAMESTR("getSwitchPoint"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_101getSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_101getSwitchPoint)},
  {__Pyx_NAMESTR("getNumSwitchPoints"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_102getNumSwitchPoints, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_102getNumSwitchPoints)},
  {__Pyx_NAMESTR("switchAllOn"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_103switchAllOn, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_103switchAllOn)},
  {__Pyx_NAMESTR("switchAllOff"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_104switchAllOff, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_104switchAllOff)},
  {__Pyx_NAMESTR("setConfigParam"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_105setConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_105setConfigParam)},
  {__Pyx_NAMESTR("requestConfigParam"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_106requestConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_106requestConfigParam)},
  {__Pyx_NAMESTR("requestAllConfigParams"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_107requestAllConfigParams, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_107requestAllConfigParams)},
  {__Pyx_NAMESTR("getNumGroups"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_108getNumGroups, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_108getNumGroups)},
  {__Pyx_NAMESTR("getAssociations"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_109getAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_109getAssociations)},
  {__Pyx_NAMESTR("getMaxAssociations"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_110getMaxAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_110getMaxAssociations)},
  {__Pyx_NAMESTR("getGroupLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_111getGroupLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_111getGroupLabel)},
  {__Pyx_NAMESTR("addAssociation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_112addAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_112addAssociation)},
  {__Pyx_NAMESTR("removeAssociation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_113removeAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_113removeAssociation)},
  {__Pyx_NAMESTR("addWatcher"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_114addWatcher, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_114addWatcher)},
  {__Pyx_NAMESTR("removeWatcher"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_115removeWatcher, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_115removeWatcher)},
  {__Pyx_NAMESTR("resetController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_116resetController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_116resetController)},
  {__Pyx_NAMESTR("softResetController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_117softResetController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_117softResetController)},
  {__Pyx_NAMESTR("cancelControllerCommand"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_118cancelControllerCommand, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_118cancelControllerCommand)},
  {__Pyx_NAMESTR("beginControllerCommand"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_119beginControllerCommand, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_119beginControllerCommand)},
  {__Pyx_NAMESTR("getNumScenes"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_120getNumScenes, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_120getNumScenes)},
  {__Pyx_NAMESTR("getAllScenes"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_121getAllScenes, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_121getAllScenes)},
  {__Pyx_NAMESTR("removeAllScenes"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_122removeAllScenes, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_122removeAllScenes)},
  {__Pyx_NAMESTR("removeScene"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_123removeScene, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_123removeScene)},
  {__Pyx_NAMESTR("createScene"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_124createScene, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_124createScene)},
  {__Pyx_NAMESTR("sceneGetValues"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_125sceneGetValues, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_125sceneGetValues)},
  {__Pyx_NAMESTR("addSceneValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_126addSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_126addSceneValue)},
  {__Pyx_NAMESTR("removeSceneValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_127removeSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_127removeSceneValue)},
  {__Pyx_NAMESTR("setSceneValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_128setSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_128setSceneValue)},
  {__Pyx_NAMESTR("getSceneLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_129getSceneLabel, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_129getSceneLabel)},
  {__Pyx_NAMESTR("setSceneLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_130setSceneLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_130setSceneLabel)},
  {__Pyx_NAMESTR("sceneExists"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_131sceneExists, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_131sceneExists)},
  {__Pyx_NAMESTR("activateScene"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_132activateScene, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_132activateScene)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyManager = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyManager = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyManager = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyManager = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_12libopenzwave_PyManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.PyManager"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_PyManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_PyManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyManager, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyManager, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyManager, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyManager, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\nThe main public interface to OpenZWave.\n\nA singleton class providing the main public interface to OpenZWave.  The\nManager class exposes all the functionality required to add Z-Wave support to\nan application.  It handles the sending and receiving of Z-Wave messages as\nwell as the configuration of a Z-Wave network and its devices, freeing the\nlibrary user from the burden of learning the low-level details of the Z-Wave\nprotocol.\n\nAll Z-Wave functionality is accessed via the Manager class.  While this does\nnot make for the most efficient code structure, it does enable the library to\nhandle potentially complex and hard-to-debug issues such as multi-threading and\nobject lifespans behind the scenes. Application development is therefore\nsimplified and less prone to bugs.\n\nThere can be only one instance of the Manager class, and all applications will\nstart by calling Manager::Create static method to create that instance.  From\nthen on, a call to the Manager::Get static method will return the pointer to\nthe Manager object.  On application exit, Manager::Destroy should be called to\nallow OpenZWave to clean up and delete any other objects it has created.\n\nOnce the Manager has been created, a call should be made to Manager::AddWatcher\nto install a notification callback handler.  This handler will receive\nnotifications of Z-Wave network changes and updates to device values, and is an\nessential element of OpenZWave.\n\nNext, a call should be made to Manager::AddDriver for each Z-Wave controller\nattached to the PC.  Each Driver will handle the sending and receiving of\nmessages for all the devices in its controller's Z-Wave network.  The Driver\nwill read any previously saved configuration and then query the Z-Wave\ncontroller for any missing information.  Once that process is complete, a\nDriverReady notification callback will be sent containing the Home ID of the\ncontroller, which is required by most of the other Manager class methods.\n\nAfter the DriverReady notification is sent, the Driver will poll each node on\nthe network to update information about each node.  After all \"awake\" nodes\nhave been polled, an \"AllAwakeNodesQueried\" notification is sent.  This is when\na client application can expect all of the node information (both static\ninformation, like the physical device's capabilities, session information (like\n[associations and/or names] and dynamic information (like temperature or on/off\nstate) to be available.  Finally, after all nodes (whether setening or\nsleeping) have been polled, an \"AllNodesQueried\" notification is sent.\n    "), /*tp_doc*/
  __pyx_tp_traverse_12libopenzwave_PyManager, /*tp_traverse*/
  __pyx_tp_clear_12libopenzwave_PyManager, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_PyManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_PyManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("driverData"), (PyCFunction)__pyx_pf_12libopenzwave_0driverData, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("libopenzwave"),
    __Pyx_DOCSTR(__pyx_k_43), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_102, __pyx_k_102, sizeof(__pyx_k_102), 0, 0, 1, 0},
  {&__pyx_kp_s_105, __pyx_k_105, sizeof(__pyx_k_105), 0, 0, 1, 0},
  {&__pyx_kp_s_108, __pyx_k_108, sizeof(__pyx_k_108), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_n_s_110, __pyx_k_110, sizeof(__pyx_k_110), 0, 0, 1, 1},
  {&__pyx_kp_s_112, __pyx_k_112, sizeof(__pyx_k_112), 0, 0, 1, 0},
  {&__pyx_kp_s_115, __pyx_k_115, sizeof(__pyx_k_115), 0, 0, 1, 0},
  {&__pyx_kp_s_118, __pyx_k_118, sizeof(__pyx_k_118), 0, 0, 1, 0},
  {&__pyx_kp_s_121, __pyx_k_121, sizeof(__pyx_k_121), 0, 0, 1, 0},
  {&__pyx_n_s_123, __pyx_k_123, sizeof(__pyx_k_123), 0, 0, 1, 1},
  {&__pyx_kp_s_125, __pyx_k_125, sizeof(__pyx_k_125), 0, 0, 1, 0},
  {&__pyx_kp_s_128, __pyx_k_128, sizeof(__pyx_k_128), 0, 0, 1, 0},
  {&__pyx_kp_s_131, __pyx_k_131, sizeof(__pyx_k_131), 0, 0, 1, 0},
  {&__pyx_kp_s_134, __pyx_k_134, sizeof(__pyx_k_134), 0, 0, 1, 0},
  {&__pyx_kp_s_137, __pyx_k_137, sizeof(__pyx_k_137), 0, 0, 1, 0},
  {&__pyx_n_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 1},
  {&__pyx_kp_s_140, __pyx_k_140, sizeof(__pyx_k_140), 0, 0, 1, 0},
  {&__pyx_kp_s_143, __pyx_k_143, sizeof(__pyx_k_143), 0, 0, 1, 0},
  {&__pyx_kp_s_146, __pyx_k_146, sizeof(__pyx_k_146), 0, 0, 1, 0},
  {&__pyx_kp_s_149, __pyx_k_149, sizeof(__pyx_k_149), 0, 0, 1, 0},
  {&__pyx_n_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 1},
  {&__pyx_kp_s_152, __pyx_k_152, sizeof(__pyx_k_152), 0, 0, 1, 0},
  {&__pyx_kp_s_155, __pyx_k_155, sizeof(__pyx_k_155), 0, 0, 1, 0},
  {&__pyx_kp_s_158, __pyx_k_158, sizeof(__pyx_k_158), 0, 0, 1, 0},
  {&__pyx_n_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 1},
  {&__pyx_kp_s_161, __pyx_k_161, sizeof(__pyx_k_161), 0, 0, 1, 0},
  {&__pyx_kp_s_164, __pyx_k_164, sizeof(__pyx_k_164), 0, 0, 1, 0},
  {&__pyx_kp_s_167, __pyx_k_167, sizeof(__pyx_k_167), 0, 0, 1, 0},
  {&__pyx_n_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 1},
  {&__pyx_kp_s_170, __pyx_k_170, sizeof(__pyx_k_170), 0, 0, 1, 0},
  {&__pyx_kp_s_173, __pyx_k_173, sizeof(__pyx_k_173), 0, 0, 1, 0},
  {&__pyx_kp_s_176, __pyx_k_176, sizeof(__pyx_k_176), 0, 0, 1, 0},
  {&__pyx_kp_s_179, __pyx_k_179, sizeof(__pyx_k_179), 0, 0, 1, 0},
  {&__pyx_n_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 1},
  {&__pyx_kp_s_182, __pyx_k_182, sizeof(__pyx_k_182), 0, 0, 1, 0},
  {&__pyx_kp_s_185, __pyx_k_185, sizeof(__pyx_k_185), 0, 0, 1, 0},
  {&__pyx_kp_s_188, __pyx_k_188, sizeof(__pyx_k_188), 0, 0, 1, 0},
  {&__pyx_n_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 1},
  {&__pyx_kp_s_191, __pyx_k_191, sizeof(__pyx_k_191), 0, 0, 1, 0},
  {&__pyx_kp_s_194, __pyx_k_194, sizeof(__pyx_k_194), 0, 0, 1, 0},
  {&__pyx_kp_s_197, __pyx_k_197, sizeof(__pyx_k_197), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_n_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 1},
  {&__pyx_kp_s_200, __pyx_k_200, sizeof(__pyx_k_200), 0, 0, 1, 0},
  {&__pyx_kp_s_203, __pyx_k_203, sizeof(__pyx_k_203), 0, 0, 1, 0},
  {&__pyx_kp_s_206, __pyx_k_206, sizeof(__pyx_k_206), 0, 0, 1, 0},
  {&__pyx_kp_s_209, __pyx_k_209, sizeof(__pyx_k_209), 0, 0, 1, 0},
  {&__pyx_n_s_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 1, 1},
  {&__pyx_kp_s_212, __pyx_k_212, sizeof(__pyx_k_212), 0, 0, 1, 0},
  {&__pyx_kp_s_215, __pyx_k_215, sizeof(__pyx_k_215), 0, 0, 1, 0},
  {&__pyx_kp_s_218, __pyx_k_218, sizeof(__pyx_k_218), 0, 0, 1, 0},
  {&__pyx_n_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 1},
  {&__pyx_kp_s_221, __pyx_k_221, sizeof(__pyx_k_221), 0, 0, 1, 0},
  {&__pyx_kp_s_224, __pyx_k_224, sizeof(__pyx_k_224), 0, 0, 1, 0},
  {&__pyx_kp_s_227, __pyx_k_227, sizeof(__pyx_k_227), 0, 0, 1, 0},
  {&__pyx_n_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 1},
  {&__pyx_kp_s_234, __pyx_k_234, sizeof(__pyx_k_234), 0, 0, 1, 0},
  {&__pyx_kp_s_239, __pyx_k_239, sizeof(__pyx_k_239), 0, 0, 1, 0},
  {&__pyx_n_s_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 0, 1, 1},
  {&__pyx_kp_s_242, __pyx_k_242, sizeof(__pyx_k_242), 0, 0, 1, 0},
  {&__pyx_kp_s_245, __pyx_k_245, sizeof(__pyx_k_245), 0, 0, 1, 0},
  {&__pyx_kp_s_248, __pyx_k_248, sizeof(__pyx_k_248), 0, 0, 1, 0},
  {&__pyx_n_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 1},
  {&__pyx_kp_s_253, __pyx_k_253, sizeof(__pyx_k_253), 0, 0, 1, 0},
  {&__pyx_kp_s_258, __pyx_k_258, sizeof(__pyx_k_258), 0, 0, 1, 0},
  {&__pyx_n_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 1},
  {&__pyx_kp_s_261, __pyx_k_261, sizeof(__pyx_k_261), 0, 0, 1, 0},
  {&__pyx_kp_s_264, __pyx_k_264, sizeof(__pyx_k_264), 0, 0, 1, 0},
  {&__pyx_n_s_266, __pyx_k_266, sizeof(__pyx_k_266), 0, 0, 1, 1},
  {&__pyx_kp_s_268, __pyx_k_268, sizeof(__pyx_k_268), 0, 0, 1, 0},
  {&__pyx_n_s_27, __pyx_k_27, sizeof(__pyx_k_27), 0, 0, 1, 1},
  {&__pyx_kp_s_271, __pyx_k_271, sizeof(__pyx_k_271), 0, 0, 1, 0},
  {&__pyx_kp_s_274, __pyx_k_274, sizeof(__pyx_k_274), 0, 0, 1, 0},
  {&__pyx_kp_s_277, __pyx_k_277, sizeof(__pyx_k_277), 0, 0, 1, 0},
  {&__pyx_n_s_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 1, 1},
  {&__pyx_kp_s_280, __pyx_k_280, sizeof(__pyx_k_280), 0, 0, 1, 0},
  {&__pyx_kp_s_283, __pyx_k_283, sizeof(__pyx_k_283), 0, 0, 1, 0},
  {&__pyx_n_s_285, __pyx_k_285, sizeof(__pyx_k_285), 0, 0, 1, 1},
  {&__pyx_kp_s_287, __pyx_k_287, sizeof(__pyx_k_287), 0, 0, 1, 0},
  {&__pyx_n_s_289, __pyx_k_289, sizeof(__pyx_k_289), 0, 0, 1, 1},
  {&__pyx_n_s_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 1, 1},
  {&__pyx_kp_s_291, __pyx_k_291, sizeof(__pyx_k_291), 0, 0, 1, 0},
  {&__pyx_kp_s_294, __pyx_k_294, sizeof(__pyx_k_294), 0, 0, 1, 0},
  {&__pyx_n_s_296, __pyx_k_296, sizeof(__pyx_k_296), 0, 0, 1, 1},
  {&__pyx_kp_s_298, __pyx_k_298, sizeof(__pyx_k_298), 0, 0, 1, 0},
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_kp_s_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 1, 0},
  {&__pyx_kp_s_301, __pyx_k_301, sizeof(__pyx_k_301), 0, 0, 1, 0},
  {&__pyx_kp_s_304, __pyx_k_304, sizeof(__pyx_k_304), 0, 0, 1, 0},
  {&__pyx_kp_s_307, __pyx_k_307, sizeof(__pyx_k_307), 0, 0, 1, 0},
  {&__pyx_kp_s_310, __pyx_k_310, sizeof(__pyx_k_310), 0, 0, 1, 0},
  {&__pyx_kp_s_313, __pyx_k_313, sizeof(__pyx_k_313), 0, 0, 1, 0},
  {&__pyx_kp_s_316, __pyx_k_316, sizeof(__pyx_k_316), 0, 0, 1, 0},
  {&__pyx_kp_s_319, __pyx_k_319, sizeof(__pyx_k_319), 0, 0, 1, 0},
  {&__pyx_kp_s_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 0, 1, 0},
  {&__pyx_kp_s_321, __pyx_k_321, sizeof(__pyx_k_321), 0, 0, 1, 0},
  {&__pyx_kp_s_322, __pyx_k_322, sizeof(__pyx_k_322), 0, 0, 1, 0},
  {&__pyx_kp_s_323, __pyx_k_323, sizeof(__pyx_k_323), 0, 0, 1, 0},
  {&__pyx_kp_s_324, __pyx_k_324, sizeof(__pyx_k_324), 0, 0, 1, 0},
  {&__pyx_kp_s_325, __pyx_k_325, sizeof(__pyx_k_325), 0, 0, 1, 0},
  {&__pyx_kp_s_326, __pyx_k_326, sizeof(__pyx_k_326), 0, 0, 1, 0},
  {&__pyx_kp_s_327, __pyx_k_327, sizeof(__pyx_k_327), 0, 0, 1, 0},
  {&__pyx_kp_s_328, __pyx_k_328, sizeof(__pyx_k_328), 0, 0, 1, 0},
  {&__pyx_kp_s_329, __pyx_k_329, sizeof(__pyx_k_329), 0, 0, 1, 0},
  {&__pyx_kp_s_330, __pyx_k_330, sizeof(__pyx_k_330), 0, 0, 1, 0},
  {&__pyx_kp_s_331, __pyx_k_331, sizeof(__pyx_k_331), 0, 0, 1, 0},
  {&__pyx_kp_s_332, __pyx_k_332, sizeof(__pyx_k_332), 0, 0, 1, 0},
  {&__pyx_kp_s_333, __pyx_k_333, sizeof(__pyx_k_333), 0, 0, 1, 0},
  {&__pyx_kp_s_334, __pyx_k_334, sizeof(__pyx_k_334), 0, 0, 1, 0},
  {&__pyx_kp_s_335, __pyx_k_335, sizeof(__pyx_k_335), 0, 0, 1, 0},
  {&__pyx_kp_s_336, __pyx_k_336, sizeof(__pyx_k_336), 0, 0, 1, 0},
  {&__pyx_kp_s_337, __pyx_k_337, sizeof(__pyx_k_337), 0, 0, 1, 0},
  {&__pyx_kp_s_338, __pyx_k_338, sizeof(__pyx_k_338), 0, 0, 1, 0},
  {&__pyx_kp_s_339, __pyx_k_339, sizeof(__pyx_k_339), 0, 0, 1, 0},
  {&__pyx_n_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 1},
  {&__pyx_kp_s_340, __pyx_k_340, sizeof(__pyx_k_340), 0, 0, 1, 0},
  {&__pyx_n_s_341, __pyx_k_341, sizeof(__pyx_k_341), 0, 0, 1, 1},
  {&__pyx_n_s_342, __pyx_k_342, sizeof(__pyx_k_342), 0, 0, 1, 1},
  {&__pyx_n_s_343, __pyx_k_343, sizeof(__pyx_k_343), 0, 0, 1, 1},
  {&__pyx_n_s_344, __pyx_k_344, sizeof(__pyx_k_344), 0, 0, 1, 1},
  {&__pyx_n_s_345, __pyx_k_345, sizeof(__pyx_k_345), 0, 0, 1, 1},
  {&__pyx_n_s_346, __pyx_k_346, sizeof(__pyx_k_346), 0, 0, 1, 1},
  {&__pyx_n_s_347, __pyx_k_347, sizeof(__pyx_k_347), 0, 0, 1, 1},
  {&__pyx_n_s_348, __pyx_k_348, sizeof(__pyx_k_348), 0, 0, 1, 1},
  {&__pyx_n_s_349, __pyx_k_349, sizeof(__pyx_k_349), 0, 0, 1, 1},
  {&__pyx_n_s_350, __pyx_k_350, sizeof(__pyx_k_350), 0, 0, 1, 1},
  {&__pyx_n_s_351, __pyx_k_351, sizeof(__pyx_k_351), 0, 0, 1, 1},
  {&__pyx_n_s_352, __pyx_k_352, sizeof(__pyx_k_352), 0, 0, 1, 1},
  {&__pyx_n_s_353, __pyx_k_353, sizeof(__pyx_k_353), 0, 0, 1, 1},
  {&__pyx_n_s_354, __pyx_k_354, sizeof(__pyx_k_354), 0, 0, 1, 1},
  {&__pyx_n_s_355, __pyx_k_355, sizeof(__pyx_k_355), 0, 0, 1, 1},
  {&__pyx_n_s_356, __pyx_k_356, sizeof(__pyx_k_356), 0, 0, 1, 1},
  {&__pyx_n_s_357, __pyx_k_357, sizeof(__pyx_k_357), 0, 0, 1, 1},
  {&__pyx_n_s_358, __pyx_k_358, sizeof(__pyx_k_358), 0, 0, 1, 1},
  {&__pyx_n_s_359, __pyx_k_359, sizeof(__pyx_k_359), 0, 0, 1, 1},
  {&__pyx_n_s_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 0, 1, 1},
  {&__pyx_n_s_360, __pyx_k_360, sizeof(__pyx_k_360), 0, 0, 1, 1},
  {&__pyx_n_s_361, __pyx_k_361, sizeof(__pyx_k_361), 0, 0, 1, 1},
  {&__pyx_n_s_362, __pyx_k_362, sizeof(__pyx_k_362), 0, 0, 1, 1},
  {&__pyx_n_s_363, __pyx_k_363, sizeof(__pyx_k_363), 0, 0, 1, 1},
  {&__pyx_n_s_364, __pyx_k_364, sizeof(__pyx_k_364), 0, 0, 1, 1},
  {&__pyx_n_s_365, __pyx_k_365, sizeof(__pyx_k_365), 0, 0, 1, 1},
  {&__pyx_n_s_366, __pyx_k_366, sizeof(__pyx_k_366), 0, 0, 1, 1},
  {&__pyx_n_s_367, __pyx_k_367, sizeof(__pyx_k_367), 0, 0, 1, 1},
  {&__pyx_n_s_368, __pyx_k_368, sizeof(__pyx_k_368), 0, 0, 1, 1},
  {&__pyx_n_s_369, __pyx_k_369, sizeof(__pyx_k_369), 0, 0, 1, 1},
  {&__pyx_n_s_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 0, 1, 1},
  {&__pyx_n_s_370, __pyx_k_370, sizeof(__pyx_k_370), 0, 0, 1, 1},
  {&__pyx_n_s_371, __pyx_k_371, sizeof(__pyx_k_371), 0, 0, 1, 1},
  {&__pyx_n_s_372, __pyx_k_372, sizeof(__pyx_k_372), 0, 0, 1, 1},
  {&__pyx_n_s_373, __pyx_k_373, sizeof(__pyx_k_373), 0, 0, 1, 1},
  {&__pyx_n_s_374, __pyx_k_374, sizeof(__pyx_k_374), 0, 0, 1, 1},
  {&__pyx_n_s_375, __pyx_k_375, sizeof(__pyx_k_375), 0, 0, 1, 1},
  {&__pyx_n_s_376, __pyx_k_376, sizeof(__pyx_k_376), 0, 0, 1, 1},
  {&__pyx_n_s_377, __pyx_k_377, sizeof(__pyx_k_377), 0, 0, 1, 1},
  {&__pyx_n_s_378, __pyx_k_378, sizeof(__pyx_k_378), 0, 0, 1, 1},
  {&__pyx_n_s_379, __pyx_k_379, sizeof(__pyx_k_379), 0, 0, 1, 1},
  {&__pyx_n_s_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 0, 1, 1},
  {&__pyx_n_s_380, __pyx_k_380, sizeof(__pyx_k_380), 0, 0, 1, 1},
  {&__pyx_n_s_381, __pyx_k_381, sizeof(__pyx_k_381), 0, 0, 1, 1},
  {&__pyx_n_s_382, __pyx_k_382, sizeof(__pyx_k_382), 0, 0, 1, 1},
  {&__pyx_n_s_383, __pyx_k_383, sizeof(__pyx_k_383), 0, 0, 1, 1},
  {&__pyx_n_s_384, __pyx_k_384, sizeof(__pyx_k_384), 0, 0, 1, 1},
  {&__pyx_n_s_385, __pyx_k_385, sizeof(__pyx_k_385), 0, 0, 1, 1},
  {&__pyx_n_s_386, __pyx_k_386, sizeof(__pyx_k_386), 0, 0, 1, 1},
  {&__pyx_n_s_387, __pyx_k_387, sizeof(__pyx_k_387), 0, 0, 1, 1},
  {&__pyx_n_s_388, __pyx_k_388, sizeof(__pyx_k_388), 0, 0, 1, 1},
  {&__pyx_n_s_389, __pyx_k_389, sizeof(__pyx_k_389), 0, 0, 1, 1},
  {&__pyx_n_s_39, __pyx_k_39, sizeof(__pyx_k_39), 0, 0, 1, 1},
  {&__pyx_n_s_390, __pyx_k_390, sizeof(__pyx_k_390), 0, 0, 1, 1},
  {&__pyx_n_s_391, __pyx_k_391, sizeof(__pyx_k_391), 0, 0, 1, 1},
  {&__pyx_n_s_392, __pyx_k_392, sizeof(__pyx_k_392), 0, 0, 1, 1},
  {&__pyx_n_s_393, __pyx_k_393, sizeof(__pyx_k_393), 0, 0, 1, 1},
  {&__pyx_n_s_394, __pyx_k_394, sizeof(__pyx_k_394), 0, 0, 1, 1},
  {&__pyx_n_s_395, __pyx_k_395, sizeof(__pyx_k_395), 0, 0, 1, 1},
  {&__pyx_n_s_396, __pyx_k_396, sizeof(__pyx_k_396), 0, 0, 1, 1},
  {&__pyx_n_s_397, __pyx_k_397, sizeof(__pyx_k_397), 0, 0, 1, 1},
  {&__pyx_n_s_398, __pyx_k_398, sizeof(__pyx_k_398), 0, 0, 1, 1},
  {&__pyx_n_s_399, __pyx_k_399, sizeof(__pyx_k_399), 0, 0, 1, 1},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_n_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 1},
  {&__pyx_n_s_400, __pyx_k_400, sizeof(__pyx_k_400), 0, 0, 1, 1},
  {&__pyx_n_s_401, __pyx_k_401, sizeof(__pyx_k_401), 0, 0, 1, 1},
  {&__pyx_n_s_402, __pyx_k_402, sizeof(__pyx_k_402), 0, 0, 1, 1},
  {&__pyx_n_s_403, __pyx_k_403, sizeof(__pyx_k_403), 0, 0, 1, 1},
  {&__pyx_n_s_404, __pyx_k_404, sizeof(__pyx_k_404), 0, 0, 1, 1},
  {&__pyx_n_s_405, __pyx_k_405, sizeof(__pyx_k_405), 0, 0, 1, 1},
  {&__pyx_n_s_406, __pyx_k_406, sizeof(__pyx_k_406), 0, 0, 1, 1},
  {&__pyx_n_s_407, __pyx_k_407, sizeof(__pyx_k_407), 0, 0, 1, 1},
  {&__pyx_n_s_408, __pyx_k_408, sizeof(__pyx_k_408), 0, 0, 1, 1},
  {&__pyx_n_s_409, __pyx_k_409, sizeof(__pyx_k_409), 0, 0, 1, 1},
  {&__pyx_n_s_41, __pyx_k_41, sizeof(__pyx_k_41), 0, 0, 1, 1},
  {&__pyx_n_s_410, __pyx_k_410, sizeof(__pyx_k_410), 0, 0, 1, 1},
  {&__pyx_n_s_411, __pyx_k_411, sizeof(__pyx_k_411), 0, 0, 1, 1},
  {&__pyx_n_s_412, __pyx_k_412, sizeof(__pyx_k_412), 0, 0, 1, 1},
  {&__pyx_n_s_413, __pyx_k_413, sizeof(__pyx_k_413), 0, 0, 1, 1},
  {&__pyx_n_s_414, __pyx_k_414, sizeof(__pyx_k_414), 0, 0, 1, 1},
  {&__pyx_n_s_415, __pyx_k_415, sizeof(__pyx_k_415), 0, 0, 1, 1},
  {&__pyx_n_s_416, __pyx_k_416, sizeof(__pyx_k_416), 0, 0, 1, 1},
  {&__pyx_n_s_417, __pyx_k_417, sizeof(__pyx_k_417), 0, 0, 1, 1},
  {&__pyx_n_s_418, __pyx_k_418, sizeof(__pyx_k_418), 0, 0, 1, 1},
  {&__pyx_n_s_419, __pyx_k_419, sizeof(__pyx_k_419), 0, 0, 1, 1},
  {&__pyx_n_s_42, __pyx_k_42, sizeof(__pyx_k_42), 0, 0, 1, 1},
  {&__pyx_n_s_420, __pyx_k_420, sizeof(__pyx_k_420), 0, 0, 1, 1},
  {&__pyx_kp_s_421, __pyx_k_421, sizeof(__pyx_k_421), 0, 0, 1, 0},
  {&__pyx_kp_s_422, __pyx_k_422, sizeof(__pyx_k_422), 0, 0, 1, 0},
  {&__pyx_kp_s_423, __pyx_k_423, sizeof(__pyx_k_423), 0, 0, 1, 0},
  {&__pyx_kp_s_424, __pyx_k_424, sizeof(__pyx_k_424), 0, 0, 1, 0},
  {&__pyx_kp_s_425, __pyx_k_425, sizeof(__pyx_k_425), 0, 0, 1, 0},
  {&__pyx_kp_s_426, __pyx_k_426, sizeof(__pyx_k_426), 0, 0, 1, 0},
  {&__pyx_kp_s_427, __pyx_k_427, sizeof(__pyx_k_427), 0, 0, 1, 0},
  {&__pyx_kp_s_428, __pyx_k_428, sizeof(__pyx_k_428), 0, 0, 1, 0},
  {&__pyx_kp_s_429, __pyx_k_429, sizeof(__pyx_k_429), 0, 0, 1, 0},
  {&__pyx_kp_s_430, __pyx_k_430, sizeof(__pyx_k_430), 0, 0, 1, 0},
  {&__pyx_kp_s_431, __pyx_k_431, sizeof(__pyx_k_431), 0, 0, 1, 0},
  {&__pyx_kp_s_432, __pyx_k_432, sizeof(__pyx_k_432), 0, 0, 1, 0},
  {&__pyx_kp_s_433, __pyx_k_433, sizeof(__pyx_k_433), 0, 0, 1, 0},
  {&__pyx_kp_s_434, __pyx_k_434, sizeof(__pyx_k_434), 0, 0, 1, 0},
  {&__pyx_kp_s_435, __pyx_k_435, sizeof(__pyx_k_435), 0, 0, 1, 0},
  {&__pyx_kp_s_436, __pyx_k_436, sizeof(__pyx_k_436), 0, 0, 1, 0},
  {&__pyx_kp_s_437, __pyx_k_437, sizeof(__pyx_k_437), 0, 0, 1, 0},
  {&__pyx_kp_s_438, __pyx_k_438, sizeof(__pyx_k_438), 0, 0, 1, 0},
  {&__pyx_kp_s_44, __pyx_k_44, sizeof(__pyx_k_44), 0, 0, 1, 0},
  {&__pyx_kp_s_45, __pyx_k_45, sizeof(__pyx_k_45), 0, 0, 1, 0},
  {&__pyx_kp_s_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 1, 0},
  {&__pyx_kp_s_48, __pyx_k_48, sizeof(__pyx_k_48), 0, 0, 1, 0},
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_kp_s_51, __pyx_k_51, sizeof(__pyx_k_51), 0, 0, 1, 0},
  {&__pyx_kp_s_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 0, 1, 0},
  {&__pyx_kp_s_57, __pyx_k_57, sizeof(__pyx_k_57), 0, 0, 1, 0},
  {&__pyx_n_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 1},
  {&__pyx_kp_s_60, __pyx_k_60, sizeof(__pyx_k_60), 0, 0, 1, 0},
  {&__pyx_kp_s_63, __pyx_k_63, sizeof(__pyx_k_63), 0, 0, 1, 0},
  {&__pyx_kp_s_66, __pyx_k_66, sizeof(__pyx_k_66), 0, 0, 1, 0},
  {&__pyx_kp_s_69, __pyx_k_69, sizeof(__pyx_k_69), 0, 0, 1, 0},
  {&__pyx_n_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 1},
  {&__pyx_kp_s_72, __pyx_k_72, sizeof(__pyx_k_72), 0, 0, 1, 0},
  {&__pyx_kp_s_75, __pyx_k_75, sizeof(__pyx_k_75), 0, 0, 1, 0},
  {&__pyx_kp_s_78, __pyx_k_78, sizeof(__pyx_k_78), 0, 0, 1, 0},
  {&__pyx_n_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 1},
  {&__pyx_kp_s_81, __pyx_k_81, sizeof(__pyx_k_81), 0, 0, 1, 0},
  {&__pyx_kp_s_84, __pyx_k_84, sizeof(__pyx_k_84), 0, 0, 1, 0},
  {&__pyx_kp_s_87, __pyx_k_87, sizeof(__pyx_k_87), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_kp_s_90, __pyx_k_90, sizeof(__pyx_k_90), 0, 0, 1, 0},
  {&__pyx_kp_s_93, __pyx_k_93, sizeof(__pyx_k_93), 0, 0, 1, 0},
  {&__pyx_kp_s_96, __pyx_k_96, sizeof(__pyx_k_96), 0, 0, 1, 0},
  {&__pyx_kp_s_99, __pyx_k_99, sizeof(__pyx_k_99), 0, 0, 1, 0},
  {&__pyx_n_s__ACKCnt, __pyx_k__ACKCnt, sizeof(__pyx_k__ACKCnt), 0, 0, 1, 1},
  {&__pyx_n_s__ACKWaiting, __pyx_k__ACKWaiting, sizeof(__pyx_k__ACKWaiting), 0, 0, 1, 1},
  {&__pyx_n_s__ActivateScene, __pyx_k__ActivateScene, sizeof(__pyx_k__ActivateScene), 0, 0, 1, 1},
  {&__pyx_n_s__AddAssociation, __pyx_k__AddAssociation, sizeof(__pyx_k__AddAssociation), 0, 0, 1, 1},
  {&__pyx_n_s__AddDevice, __pyx_k__AddDevice, sizeof(__pyx_k__AddDevice), 0, 0, 1, 1},
  {&__pyx_n_s__AddDriver, __pyx_k__AddDriver, sizeof(__pyx_k__AddDriver), 0, 0, 1, 1},
  {&__pyx_n_s__AddOptionBool, __pyx_k__AddOptionBool, sizeof(__pyx_k__AddOptionBool), 0, 0, 1, 1},
  {&__pyx_n_s__AddOptionInt, __pyx_k__AddOptionInt, sizeof(__pyx_k__AddOptionInt), 0, 0, 1, 1},
  {&__pyx_n_s__AddOptionString, __pyx_k__AddOptionString, sizeof(__pyx_k__AddOptionString), 0, 0, 1, 1},
  {&__pyx_n_s__AddSceneValue, __pyx_k__AddSceneValue, sizeof(__pyx_k__AddSceneValue), 0, 0, 1, 1},
  {&__pyx_n_s__AddWatcher, __pyx_k__AddWatcher, sizeof(__pyx_k__AddWatcher), 0, 0, 1, 1},
  {&__pyx_n_s__Alert, __pyx_k__Alert, sizeof(__pyx_k__Alert), 0, 0, 1, 1},
  {&__pyx_n_s__Alive, __pyx_k__Alive, sizeof(__pyx_k__Alive), 0, 0, 1, 1},
  {&__pyx_n_s__AllNodesQueried, __pyx_k__AllNodesQueried, sizeof(__pyx_k__AllNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s__Always, __pyx_k__Always, sizeof(__pyx_k__Always), 0, 0, 1, 1},
  {&__pyx_n_s__AssignReturnRoute, __pyx_k__AssignReturnRoute, sizeof(__pyx_k__AssignReturnRoute), 0, 0, 1, 1},
  {&__pyx_n_s__Associations, __pyx_k__Associations, sizeof(__pyx_k__Associations), 0, 0, 1, 1},
  {&__pyx_n_s__Awake, __pyx_k__Awake, sizeof(__pyx_k__Awake), 0, 0, 1, 1},
  {&__pyx_n_s__AwakeNodesQueried, __pyx_k__AwakeNodesQueried, sizeof(__pyx_k__AwakeNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s__Basic, __pyx_k__Basic, sizeof(__pyx_k__Basic), 0, 0, 1, 1},
  {&__pyx_n_s__Bool, __pyx_k__Bool, sizeof(__pyx_k__Bool), 0, 0, 1, 1},
  {&__pyx_n_s__Busy, __pyx_k__Busy, sizeof(__pyx_k__Busy), 0, 0, 1, 1},
  {&__pyx_n_s__Button, __pyx_k__Button, sizeof(__pyx_k__Button), 0, 0, 1, 1},
  {&__pyx_n_s__ButtonNotFound, __pyx_k__ButtonNotFound, sizeof(__pyx_k__ButtonNotFound), 0, 0, 1, 1},
  {&__pyx_n_s__ButtonOff, __pyx_k__ButtonOff, sizeof(__pyx_k__ButtonOff), 0, 0, 1, 1},
  {&__pyx_n_s__ButtonOn, __pyx_k__ButtonOn, sizeof(__pyx_k__ButtonOn), 0, 0, 1, 1},
  {&__pyx_n_s__Byte, __pyx_k__Byte, sizeof(__pyx_k__Byte), 0, 0, 1, 1},
  {&__pyx_n_s__CALLBACK_DESC, __pyx_k__CALLBACK_DESC, sizeof(__pyx_k__CALLBACK_DESC), 0, 0, 1, 1},
  {&__pyx_n_s__CANCnt, __pyx_k__CANCnt, sizeof(__pyx_k__CANCnt), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_ALARM, __pyx_k__COMMAND_CLASS_ALARM, sizeof(__pyx_k__COMMAND_CLASS_ALARM), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_BASIC, __pyx_k__COMMAND_CLASS_BASIC, sizeof(__pyx_k__COMMAND_CLASS_BASIC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_CLOCK, __pyx_k__COMMAND_CLASS_CLOCK, sizeof(__pyx_k__COMMAND_CLASS_CLOCK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_DESC, __pyx_k__COMMAND_CLASS_DESC, sizeof(__pyx_k__COMMAND_CLASS_DESC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_HAIL, __pyx_k__COMMAND_CLASS_HAIL, sizeof(__pyx_k__COMMAND_CLASS_HAIL), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_KICK, __pyx_k__COMMAND_CLASS_KICK, sizeof(__pyx_k__COMMAND_CLASS_KICK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_LOCK, __pyx_k__COMMAND_CLASS_LOCK, sizeof(__pyx_k__COMMAND_CLASS_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_MARK, __pyx_k__COMMAND_CLASS_MARK, sizeof(__pyx_k__COMMAND_CLASS_MARK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_METER, __pyx_k__COMMAND_CLASS_METER, sizeof(__pyx_k__COMMAND_CLASS_METER), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_TIME, __pyx_k__COMMAND_CLASS_TIME, sizeof(__pyx_k__COMMAND_CLASS_TIME), 0, 0, 1, 1},
  {&__pyx_n_s__Cancel, __pyx_k__Cancel, sizeof(__pyx_k__Cancel), 0, 0, 1, 1},
  {&__pyx_n_s__ClearSwitchPoints, __pyx_k__ClearSwitchPoints, sizeof(__pyx_k__ClearSwitchPoints), 0, 0, 1, 1},
  {&__pyx_n_s__Complete, __pyx_k__Complete, sizeof(__pyx_k__Complete), 0, 0, 1, 1},
  {&__pyx_n_s__Completed, __pyx_k__Completed, sizeof(__pyx_k__Completed), 0, 0, 1, 1},
  {&__pyx_n_s__Config, __pyx_k__Config, sizeof(__pyx_k__Config), 0, 0, 1, 1},
  {&__pyx_n_s__Configuration, __pyx_k__Configuration, sizeof(__pyx_k__Configuration), 0, 0, 1, 1},
  {&__pyx_n_s__CreateButton, __pyx_k__CreateButton, sizeof(__pyx_k__CreateButton), 0, 0, 1, 1},
  {&__pyx_n_s__CreateNewPrimary, __pyx_k__CreateNewPrimary, sizeof(__pyx_k__CreateNewPrimary), 0, 0, 1, 1},
  {&__pyx_n_s__CreateScene, __pyx_k__CreateScene, sizeof(__pyx_k__CreateScene), 0, 0, 1, 1},
  {&__pyx_n_s__Dead, __pyx_k__Dead, sizeof(__pyx_k__Dead), 0, 0, 1, 1},
  {&__pyx_n_s__Debug, __pyx_k__Debug, sizeof(__pyx_k__Debug), 0, 0, 1, 1},
  {&__pyx_n_s__Decimal, __pyx_k__Decimal, sizeof(__pyx_k__Decimal), 0, 0, 1, 1},
  {&__pyx_n_s__DeleteButton, __pyx_k__DeleteButton, sizeof(__pyx_k__DeleteButton), 0, 0, 1, 1},
  {&__pyx_n_s__Detail, __pyx_k__Detail, sizeof(__pyx_k__Detail), 0, 0, 1, 1},
  {&__pyx_n_s__DisablePoll, __pyx_k__DisablePoll, sizeof(__pyx_k__DisablePoll), 0, 0, 1, 1},
  {&__pyx_n_s__Disabled, __pyx_k__Disabled, sizeof(__pyx_k__Disabled), 0, 0, 1, 1},
  {&__pyx_n_s__DriverFailed, __pyx_k__DriverFailed, sizeof(__pyx_k__DriverFailed), 0, 0, 1, 1},
  {&__pyx_n_s__DriverReady, __pyx_k__DriverReady, sizeof(__pyx_k__DriverReady), 0, 0, 1, 1},
  {&__pyx_n_s__DriverReset, __pyx_k__DriverReset, sizeof(__pyx_k__DriverReset), 0, 0, 1, 1},
  {&__pyx_n_s__Dynamic, __pyx_k__Dynamic, sizeof(__pyx_k__Dynamic), 0, 0, 1, 1},
  {&__pyx_n_s__EnablePoll, __pyx_k__EnablePoll, sizeof(__pyx_k__EnablePoll), 0, 0, 1, 1},
  {&__pyx_n_s__EnumWithDoc, __pyx_k__EnumWithDoc, sizeof(__pyx_k__EnumWithDoc), 0, 0, 1, 1},
  {&__pyx_n_s__Error, __pyx_k__Error, sizeof(__pyx_k__Error), 0, 0, 1, 1},
  {&__pyx_n_s__Failed, __pyx_k__Failed, sizeof(__pyx_k__Failed), 0, 0, 1, 1},
  {&__pyx_n_s__Fatal, __pyx_k__Fatal, sizeof(__pyx_k__Fatal), 0, 0, 1, 1},
  {&__pyx_n_s__GetAllScenes, __pyx_k__GetAllScenes, sizeof(__pyx_k__GetAllScenes), 0, 0, 1, 1},
  {&__pyx_n_s__GetAssociations, __pyx_k__GetAssociations, sizeof(__pyx_k__GetAssociations), 0, 0, 1, 1},
  {&__pyx_n_s__GetButtonId, __pyx_k__GetButtonId, sizeof(__pyx_k__GetButtonId), 0, 0, 1, 1},
  {&__pyx_n_s__GetCommandClassId, __pyx_k__GetCommandClassId, sizeof(__pyx_k__GetCommandClassId), 0, 0, 1, 1},
  {&__pyx_n_s__GetControllerNodeId, __pyx_k__GetControllerNodeId, sizeof(__pyx_k__GetControllerNodeId), 0, 0, 1, 1},
  {&__pyx_n_s__GetControllerPath, __pyx_k__GetControllerPath, sizeof(__pyx_k__GetControllerPath), 0, 0, 1, 1},
  {&__pyx_n_s__GetDriverStatistics, __pyx_k__GetDriverStatistics, sizeof(__pyx_k__GetDriverStatistics), 0, 0, 1, 1},
  {&__pyx_n_s__GetEvent, __pyx_k__GetEvent, sizeof(__pyx_k__GetEvent), 0, 0, 1, 1},
  {&__pyx_n_s__GetGenre, __pyx_k__GetGenre, sizeof(__pyx_k__GetGenre), 0, 0, 1, 1},
  {&__pyx_n_s__GetGroupIdx, __pyx_k__GetGroupIdx, sizeof(__pyx_k__GetGroupIdx), 0, 0, 1, 1},
  {&__pyx_n_s__GetGroupLabel, __pyx_k__GetGroupLabel, sizeof(__pyx_k__GetGroupLabel), 0, 0, 1, 1},
  {&__pyx_n_s__GetHomeId, __pyx_k__GetHomeId, sizeof(__pyx_k__GetHomeId), 0, 0, 1, 1},
  {&__pyx_n_s__GetId, __pyx_k__GetId, sizeof(__pyx_k__GetId), 0, 0, 1, 1},
  {&__pyx_n_s__GetIndex, __pyx_k__GetIndex, sizeof(__pyx_k__GetIndex), 0, 0, 1, 1},
  {&__pyx_n_s__GetInstance, __pyx_k__GetInstance, sizeof(__pyx_k__GetInstance), 0, 0, 1, 1},
  {&__pyx_n_s__GetLibraryTypeName, __pyx_k__GetLibraryTypeName, sizeof(__pyx_k__GetLibraryTypeName), 0, 0, 1, 1},
  {&__pyx_n_s__GetLibraryVersion, __pyx_k__GetLibraryVersion, sizeof(__pyx_k__GetLibraryVersion), 0, 0, 1, 1},
  {&__pyx_n_s__GetMaxAssociations, __pyx_k__GetMaxAssociations, sizeof(__pyx_k__GetMaxAssociations), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeBasic, __pyx_k__GetNodeBasic, sizeof(__pyx_k__GetNodeBasic), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeGeneric, __pyx_k__GetNodeGeneric, sizeof(__pyx_k__GetNodeGeneric), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeId, __pyx_k__GetNodeId, sizeof(__pyx_k__GetNodeId), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeLocation, __pyx_k__GetNodeLocation, sizeof(__pyx_k__GetNodeLocation), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeMaxBaudRate, __pyx_k__GetNodeMaxBaudRate, sizeof(__pyx_k__GetNodeMaxBaudRate), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeName, __pyx_k__GetNodeName, sizeof(__pyx_k__GetNodeName), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeNeighbors, __pyx_k__GetNodeNeighbors, sizeof(__pyx_k__GetNodeNeighbors), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeProductId, __pyx_k__GetNodeProductId, sizeof(__pyx_k__GetNodeProductId), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeProductName, __pyx_k__GetNodeProductName, sizeof(__pyx_k__GetNodeProductName), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeProductType, __pyx_k__GetNodeProductType, sizeof(__pyx_k__GetNodeProductType), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeQueryStage, __pyx_k__GetNodeQueryStage, sizeof(__pyx_k__GetNodeQueryStage), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeSecurity, __pyx_k__GetNodeSecurity, sizeof(__pyx_k__GetNodeSecurity), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeSpecific, __pyx_k__GetNodeSpecific, sizeof(__pyx_k__GetNodeSpecific), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeStatistics, __pyx_k__GetNodeStatistics, sizeof(__pyx_k__GetNodeStatistics), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeType, __pyx_k__GetNodeType, sizeof(__pyx_k__GetNodeType), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeVersion, __pyx_k__GetNodeVersion, sizeof(__pyx_k__GetNodeVersion), 0, 0, 1, 1},
  {&__pyx_n_s__GetNotification, __pyx_k__GetNotification, sizeof(__pyx_k__GetNotification), 0, 0, 1, 1},
  {&__pyx_n_s__GetNumGroups, __pyx_k__GetNumGroups, sizeof(__pyx_k__GetNumGroups), 0, 0, 1, 1},
  {&__pyx_n_s__GetNumScenes, __pyx_k__GetNumScenes, sizeof(__pyx_k__GetNumScenes), 0, 0, 1, 1},
  {&__pyx_n_s__GetNumSwitchPoints, __pyx_k__GetNumSwitchPoints, sizeof(__pyx_k__GetNumSwitchPoints), 0, 0, 1, 1},
  {&__pyx_n_s__GetPollIntensity, __pyx_k__GetPollIntensity, sizeof(__pyx_k__GetPollIntensity), 0, 0, 1, 1},
  {&__pyx_n_s__GetPollInterval, __pyx_k__GetPollInterval, sizeof(__pyx_k__GetPollInterval), 0, 0, 1, 1},
  {&__pyx_n_s__GetSceneId, __pyx_k__GetSceneId, sizeof(__pyx_k__GetSceneId), 0, 0, 1, 1},
  {&__pyx_n_s__GetSceneLabel, __pyx_k__GetSceneLabel, sizeof(__pyx_k__GetSceneLabel), 0, 0, 1, 1},
  {&__pyx_n_s__GetSendQueueCount, __pyx_k__GetSendQueueCount, sizeof(__pyx_k__GetSendQueueCount), 0, 0, 1, 1},
  {&__pyx_n_s__GetSwitchPoint, __pyx_k__GetSwitchPoint, sizeof(__pyx_k__GetSwitchPoint), 0, 0, 1, 1},
  {&__pyx_n_s__GetType, __pyx_k__GetType, sizeof(__pyx_k__GetType), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsBool, __pyx_k__GetValueAsBool, sizeof(__pyx_k__GetValueAsBool), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsByte, __pyx_k__GetValueAsByte, sizeof(__pyx_k__GetValueAsByte), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsFloat, __pyx_k__GetValueAsFloat, sizeof(__pyx_k__GetValueAsFloat), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsInt, __pyx_k__GetValueAsInt, sizeof(__pyx_k__GetValueAsInt), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsShort, __pyx_k__GetValueAsShort, sizeof(__pyx_k__GetValueAsShort), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsString, __pyx_k__GetValueAsString, sizeof(__pyx_k__GetValueAsString), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueHelp, __pyx_k__GetValueHelp, sizeof(__pyx_k__GetValueHelp), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueID, __pyx_k__GetValueID, sizeof(__pyx_k__GetValueID), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueLabel, __pyx_k__GetValueLabel, sizeof(__pyx_k__GetValueLabel), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueListItems, __pyx_k__GetValueListItems, sizeof(__pyx_k__GetValueListItems), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueMax, __pyx_k__GetValueMax, sizeof(__pyx_k__GetValueMax), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueMin, __pyx_k__GetValueMin, sizeof(__pyx_k__GetValueMin), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueUnits, __pyx_k__GetValueUnits, sizeof(__pyx_k__GetValueUnits), 0, 0, 1, 1},
  {&__pyx_n_s__Group, __pyx_k__Group, sizeof(__pyx_k__Group), 0, 0, 1, 1},
  {&__pyx_n_s__HasNodeFailed, __pyx_k__HasNodeFailed, sizeof(__pyx_k__HasNodeFailed), 0, 0, 1, 1},
  {&__pyx_n_s__HealNetwork, __pyx_k__HealNetwork, sizeof(__pyx_k__HealNetwork), 0, 0, 1, 1},
  {&__pyx_n_s__HealNetworkNode, __pyx_k__HealNetworkNode, sizeof(__pyx_k__HealNetworkNode), 0, 0, 1, 1},
  {&__pyx_n_s__Hid, __pyx_k__Hid, sizeof(__pyx_k__Hid), 0, 0, 1, 1},
  {&__pyx_n_s__InProgress, __pyx_k__InProgress, sizeof(__pyx_k__InProgress), 0, 0, 1, 1},
  {&__pyx_n_s__Info, __pyx_k__Info, sizeof(__pyx_k__Info), 0, 0, 1, 1},
  {&__pyx_n_s__Instances, __pyx_k__Instances, sizeof(__pyx_k__Instances), 0, 0, 1, 1},
  {&__pyx_n_s__Int, __pyx_k__Int, sizeof(__pyx_k__Int), 0, 0, 1, 1},
  {&__pyx_n_s__Internal, __pyx_k__Internal, sizeof(__pyx_k__Internal), 0, 0, 1, 1},
  {&__pyx_n_s__IsBridgeController, __pyx_k__IsBridgeController, sizeof(__pyx_k__IsBridgeController), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeAwake, __pyx_k__IsNodeAwake, sizeof(__pyx_k__IsNodeAwake), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeBeamingDevice, __pyx_k__IsNodeBeamingDevice, sizeof(__pyx_k__IsNodeBeamingDevice), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeFailed, __pyx_k__IsNodeFailed, sizeof(__pyx_k__IsNodeFailed), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeInfoReceived, __pyx_k__IsNodeInfoReceived, sizeof(__pyx_k__IsNodeInfoReceived), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeRoutingDevice, __pyx_k__IsNodeRoutingDevice, sizeof(__pyx_k__IsNodeRoutingDevice), 0, 0, 1, 1},
  {&__pyx_n_s__IsPrimary, __pyx_k__IsPrimary, sizeof(__pyx_k__IsPrimary), 0, 0, 1, 1},
  {&__pyx_n_s__IsPrimaryController, __pyx_k__IsPrimaryController, sizeof(__pyx_k__IsPrimaryController), 0, 0, 1, 1},
  {&__pyx_n_s__IsValueReadOnly, __pyx_k__IsValueReadOnly, sizeof(__pyx_k__IsValueReadOnly), 0, 0, 1, 1},
  {&__pyx_n_s__IsValueSet, __pyx_k__IsValueSet, sizeof(__pyx_k__IsValueSet), 0, 0, 1, 1},
  {&__pyx_n_s__IsValueWriteOnly, __pyx_k__IsValueWriteOnly, sizeof(__pyx_k__IsValueWriteOnly), 0, 0, 1, 1},
  {&__pyx_n_s__List, __pyx_k__List, sizeof(__pyx_k__List), 0, 0, 1, 1},
  {&__pyx_n_s__Lock, __pyx_k__Lock, sizeof(__pyx_k__Lock), 0, 0, 1, 1},
  {&__pyx_n_s__LogDriverStatistics, __pyx_k__LogDriverStatistics, sizeof(__pyx_k__LogDriverStatistics), 0, 0, 1, 1},
  {&__pyx_n_s__MsgComplete, __pyx_k__MsgComplete, sizeof(__pyx_k__MsgComplete), 0, 0, 1, 1},
  {&__pyx_n_s__NAKCnt, __pyx_k__NAKCnt, sizeof(__pyx_k__NAKCnt), 0, 0, 1, 1},
  {&__pyx_n_s__Neighbors, __pyx_k__Neighbors, sizeof(__pyx_k__Neighbors), 0, 0, 1, 1},
  {&__pyx_n_s__NoOperation, __pyx_k__NoOperation, sizeof(__pyx_k__NoOperation), 0, 0, 1, 1},
  {&__pyx_n_s__NodeAdded, __pyx_k__NodeAdded, sizeof(__pyx_k__NodeAdded), 0, 0, 1, 1},
  {&__pyx_n_s__NodeEvent, __pyx_k__NodeEvent, sizeof(__pyx_k__NodeEvent), 0, 0, 1, 1},
  {&__pyx_n_s__NodeFailed, __pyx_k__NodeFailed, sizeof(__pyx_k__NodeFailed), 0, 0, 1, 1},
  {&__pyx_n_s__NodeInfo, __pyx_k__NodeInfo, sizeof(__pyx_k__NodeInfo), 0, 0, 1, 1},
  {&__pyx_n_s__NodeNaming, __pyx_k__NodeNaming, sizeof(__pyx_k__NodeNaming), 0, 0, 1, 1},
  {&__pyx_n_s__NodeNew, __pyx_k__NodeNew, sizeof(__pyx_k__NodeNew), 0, 0, 1, 1},
  {&__pyx_n_s__NodeNotFound, __pyx_k__NodeNotFound, sizeof(__pyx_k__NodeNotFound), 0, 0, 1, 1},
  {&__pyx_n_s__NodeOK, __pyx_k__NodeOK, sizeof(__pyx_k__NodeOK), 0, 0, 1, 1},
  {&__pyx_n_s__NodeProtocolInfo, __pyx_k__NodeProtocolInfo, sizeof(__pyx_k__NodeProtocolInfo), 0, 0, 1, 1},
  {&__pyx_n_s__NodeQueriesComplete, __pyx_k__NodeQueriesComplete, sizeof(__pyx_k__NodeQueriesComplete), 0, 0, 1, 1},
  {&__pyx_n_s__NodeRemoved, __pyx_k__NodeRemoved, sizeof(__pyx_k__NodeRemoved), 0, 0, 1, 1},
  {&__pyx_n_s__None, __pyx_k__None, sizeof(__pyx_k__None), 0, 0, 1, 1},
  {&__pyx_n_s__Normal, __pyx_k__Normal, sizeof(__pyx_k__Normal), 0, 0, 1, 1},
  {&__pyx_n_s__NotBridge, __pyx_k__NotBridge, sizeof(__pyx_k__NotBridge), 0, 0, 1, 1},
  {&__pyx_n_s__NotFound, __pyx_k__NotFound, sizeof(__pyx_k__NotFound), 0, 0, 1, 1},
  {&__pyx_n_s__NotPrimary, __pyx_k__NotPrimary, sizeof(__pyx_k__NotPrimary), 0, 0, 1, 1},
  {&__pyx_n_s__NotSUC, __pyx_k__NotSUC, sizeof(__pyx_k__NotSUC), 0, 0, 1, 1},
  {&__pyx_n_s__NotSecondary, __pyx_k__NotSecondary, sizeof(__pyx_k__NotSecondary), 0, 0, 1, 1},
  {&__pyx_n_s__Notification, __pyx_k__Notification, sizeof(__pyx_k__Notification), 0, 0, 1, 1},
  {&__pyx_n_s__OOFCnt, __pyx_k__OOFCnt, sizeof(__pyx_k__OOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s__Overflow, __pyx_k__Overflow, sizeof(__pyx_k__Overflow), 0, 0, 1, 1},
  {&__pyx_n_s__PYLIBRARY, __pyx_k__PYLIBRARY, sizeof(__pyx_k__PYLIBRARY), 0, 0, 1, 1},
  {&__pyx_n_s__PollingDisabled, __pyx_k__PollingDisabled, sizeof(__pyx_k__PollingDisabled), 0, 0, 1, 1},
  {&__pyx_n_s__PollingEnabled, __pyx_k__PollingEnabled, sizeof(__pyx_k__PollingEnabled), 0, 0, 1, 1},
  {&__pyx_n_s__PressButton, __pyx_k__PressButton, sizeof(__pyx_k__PressButton), 0, 0, 1, 1},
  {&__pyx_n_s__Probe, __pyx_k__Probe, sizeof(__pyx_k__Probe), 0, 0, 1, 1},
  {&__pyx_n_s__Probe1, __pyx_k__Probe1, sizeof(__pyx_k__Probe1), 0, 0, 1, 1},
  {&__pyx_n_s__ProtocolInfo, __pyx_k__ProtocolInfo, sizeof(__pyx_k__ProtocolInfo), 0, 0, 1, 1},
  {&__pyx_n_s__PyControllerCommand, __pyx_k__PyControllerCommand, sizeof(__pyx_k__PyControllerCommand), 0, 0, 1, 1},
  {&__pyx_n_s__PyControllerError, __pyx_k__PyControllerError, sizeof(__pyx_k__PyControllerError), 0, 0, 1, 1},
  {&__pyx_n_s__PyControllerState, __pyx_k__PyControllerState, sizeof(__pyx_k__PyControllerState), 0, 0, 1, 1},
  {&__pyx_n_s__PyGenres, __pyx_k__PyGenres, sizeof(__pyx_k__PyGenres), 0, 0, 1, 1},
  {&__pyx_n_s__PyLogLevels, __pyx_k__PyLogLevels, sizeof(__pyx_k__PyLogLevels), 0, 0, 1, 1},
  {&__pyx_n_s__PyNotificationCodes, __pyx_k__PyNotificationCodes, sizeof(__pyx_k__PyNotificationCodes), 0, 0, 1, 1},
  {&__pyx_n_s__PyNotifications, __pyx_k__PyNotifications, sizeof(__pyx_k__PyNotifications), 0, 0, 1, 1},
  {&__pyx_n_s__PyStatDriver, __pyx_k__PyStatDriver, sizeof(__pyx_k__PyStatDriver), 0, 0, 1, 1},
  {&__pyx_n_s__PyValueTypes, __pyx_k__PyValueTypes, sizeof(__pyx_k__PyValueTypes), 0, 0, 1, 1},
  {&__pyx_n_s__RefreshNodeInfo, __pyx_k__RefreshNodeInfo, sizeof(__pyx_k__RefreshNodeInfo), 0, 0, 1, 1},
  {&__pyx_n_s__RefreshValue, __pyx_k__RefreshValue, sizeof(__pyx_k__RefreshValue), 0, 0, 1, 1},
  {&__pyx_n_s__ReleaseButton, __pyx_k__ReleaseButton, sizeof(__pyx_k__ReleaseButton), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveAllScenes, __pyx_k__RemoveAllScenes, sizeof(__pyx_k__RemoveAllScenes), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveAssociation, __pyx_k__RemoveAssociation, sizeof(__pyx_k__RemoveAssociation), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveDevice, __pyx_k__RemoveDevice, sizeof(__pyx_k__RemoveDevice), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveDriver, __pyx_k__RemoveDriver, sizeof(__pyx_k__RemoveDriver), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveFailedNode, __pyx_k__RemoveFailedNode, sizeof(__pyx_k__RemoveFailedNode), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveScene, __pyx_k__RemoveScene, sizeof(__pyx_k__RemoveScene), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveSceneValue, __pyx_k__RemoveSceneValue, sizeof(__pyx_k__RemoveSceneValue), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveSwitchPoint, __pyx_k__RemoveSwitchPoint, sizeof(__pyx_k__RemoveSwitchPoint), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveWatcher, __pyx_k__RemoveWatcher, sizeof(__pyx_k__RemoveWatcher), 0, 0, 1, 1},
  {&__pyx_n_s__ReplaceFailedNode, __pyx_k__ReplaceFailedNode, sizeof(__pyx_k__ReplaceFailedNode), 0, 0, 1, 1},
  {&__pyx_n_s__ReplicationSend, __pyx_k__ReplicationSend, sizeof(__pyx_k__ReplicationSend), 0, 0, 1, 1},
  {&__pyx_n_s__RequestConfigParam, __pyx_k__RequestConfigParam, sizeof(__pyx_k__RequestConfigParam), 0, 0, 1, 1},
  {&__pyx_n_s__RequestNodeDynamic, __pyx_k__RequestNodeDynamic, sizeof(__pyx_k__RequestNodeDynamic), 0, 0, 1, 1},
  {&__pyx_n_s__RequestNodeState, __pyx_k__RequestNodeState, sizeof(__pyx_k__RequestNodeState), 0, 0, 1, 1},
  {&__pyx_n_s__ResetController, __pyx_k__ResetController, sizeof(__pyx_k__ResetController), 0, 0, 1, 1},
  {&__pyx_n_s__SOFCnt, __pyx_k__SOFCnt, sizeof(__pyx_k__SOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s__SceneEvent, __pyx_k__SceneEvent, sizeof(__pyx_k__SceneEvent), 0, 0, 1, 1},
  {&__pyx_n_s__SceneExists, __pyx_k__SceneExists, sizeof(__pyx_k__SceneExists), 0, 0, 1, 1},
  {&__pyx_n_s__SceneGetValueAsBool, __pyx_k__SceneGetValueAsBool, sizeof(__pyx_k__SceneGetValueAsBool), 0, 0, 1, 1},
  {&__pyx_n_s__SceneGetValueAsByte, __pyx_k__SceneGetValueAsByte, sizeof(__pyx_k__SceneGetValueAsByte), 0, 0, 1, 1},
  {&__pyx_n_s__SceneGetValueAsInt, __pyx_k__SceneGetValueAsInt, sizeof(__pyx_k__SceneGetValueAsInt), 0, 0, 1, 1},
  {&__pyx_n_s__SceneGetValues, __pyx_k__SceneGetValues, sizeof(__pyx_k__SceneGetValues), 0, 0, 1, 1},
  {&__pyx_n_s__Schedule, __pyx_k__Schedule, sizeof(__pyx_k__Schedule), 0, 0, 1, 1},
  {&__pyx_n_s__SendNodeInformation, __pyx_k__SendNodeInformation, sizeof(__pyx_k__SendNodeInformation), 0, 0, 1, 1},
  {&__pyx_n_s__Serial, __pyx_k__Serial, sizeof(__pyx_k__Serial), 0, 0, 1, 1},
  {&__pyx_n_s__Session, __pyx_k__Session, sizeof(__pyx_k__Session), 0, 0, 1, 1},
  {&__pyx_n_s__SetConfigParam, __pyx_k__SetConfigParam, sizeof(__pyx_k__SetConfigParam), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeLevel, __pyx_k__SetNodeLevel, sizeof(__pyx_k__SetNodeLevel), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeLocation, __pyx_k__SetNodeLocation, sizeof(__pyx_k__SetNodeLocation), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeName, __pyx_k__SetNodeName, sizeof(__pyx_k__SetNodeName), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeOff, __pyx_k__SetNodeOff, sizeof(__pyx_k__SetNodeOff), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeOn, __pyx_k__SetNodeOn, sizeof(__pyx_k__SetNodeOn), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeProductName, __pyx_k__SetNodeProductName, sizeof(__pyx_k__SetNodeProductName), 0, 0, 1, 1},
  {&__pyx_n_s__SetPollIntensity, __pyx_k__SetPollIntensity, sizeof(__pyx_k__SetPollIntensity), 0, 0, 1, 1},
  {&__pyx_n_s__SetPollInterval, __pyx_k__SetPollInterval, sizeof(__pyx_k__SetPollInterval), 0, 0, 1, 1},
  {&__pyx_n_s__SetSceneLabel, __pyx_k__SetSceneLabel, sizeof(__pyx_k__SetSceneLabel), 0, 0, 1, 1},
  {&__pyx_n_s__SetSceneValue, __pyx_k__SetSceneValue, sizeof(__pyx_k__SetSceneValue), 0, 0, 1, 1},
  {&__pyx_n_s__SetSwitchPoint, __pyx_k__SetSwitchPoint, sizeof(__pyx_k__SetSwitchPoint), 0, 0, 1, 1},
  {&__pyx_n_s__SetValue, __pyx_k__SetValue, sizeof(__pyx_k__SetValue), 0, 0, 1, 1},
  {&__pyx_n_s__SetValueHelp, __pyx_k__SetValueHelp, sizeof(__pyx_k__SetValueHelp), 0, 0, 1, 1},
  {&__pyx_n_s__SetValueLabel, __pyx_k__SetValueLabel, sizeof(__pyx_k__SetValueLabel), 0, 0, 1, 1},
  {&__pyx_n_s__SetValueUnits, __pyx_k__SetValueUnits, sizeof(__pyx_k__SetValueUnits), 0, 0, 1, 1},
  {&__pyx_n_s__Short, __pyx_k__Short, sizeof(__pyx_k__Short), 0, 0, 1, 1},
  {&__pyx_n_s__Sleep, __pyx_k__Sleep, sizeof(__pyx_k__Sleep), 0, 0, 1, 1},
  {&__pyx_n_s__Sleeping, __pyx_k__Sleeping, sizeof(__pyx_k__Sleeping), 0, 0, 1, 1},
  {&__pyx_n_s__SoftReset, __pyx_k__SoftReset, sizeof(__pyx_k__SoftReset), 0, 0, 1, 1},
  {&__pyx_n_s__Starting, __pyx_k__Starting, sizeof(__pyx_k__Starting), 0, 0, 1, 1},
  {&__pyx_n_s__Static, __pyx_k__Static, sizeof(__pyx_k__Static), 0, 0, 1, 1},
  {&__pyx_n_s__StreamDetail, __pyx_k__StreamDetail, sizeof(__pyx_k__StreamDetail), 0, 0, 1, 1},
  {&__pyx_n_s__String, __pyx_k__String, sizeof(__pyx_k__String), 0, 0, 1, 1},
  {&__pyx_n_s__SwitchAllOff, __pyx_k__SwitchAllOff, sizeof(__pyx_k__SwitchAllOff), 0, 0, 1, 1},
  {&__pyx_n_s__SwitchAllOn, __pyx_k__SwitchAllOn, sizeof(__pyx_k__SwitchAllOn), 0, 0, 1, 1},
  {&__pyx_n_s__System, __pyx_k__System, sizeof(__pyx_k__System), 0, 0, 1, 1},
  {&__pyx_n_s__TestNetwork, __pyx_k__TestNetwork, sizeof(__pyx_k__TestNetwork), 0, 0, 1, 1},
  {&__pyx_n_s__TestNetworkNode, __pyx_k__TestNetworkNode, sizeof(__pyx_k__TestNetworkNode), 0, 0, 1, 1},
  {&__pyx_n_s__Timeout, __pyx_k__Timeout, sizeof(__pyx_k__Timeout), 0, 0, 1, 1},
  {&__pyx_n_s__TransferPrimaryRole, __pyx_k__TransferPrimaryRole, sizeof(__pyx_k__TransferPrimaryRole), 0, 0, 1, 1},
  {&__pyx_n_s__Unknown, __pyx_k__Unknown, sizeof(__pyx_k__Unknown), 0, 0, 1, 1},
  {&__pyx_n_s__User, __pyx_k__User, sizeof(__pyx_k__User), 0, 0, 1, 1},
  {&__pyx_n_s__ValueAdded, __pyx_k__ValueAdded, sizeof(__pyx_k__ValueAdded), 0, 0, 1, 1},
  {&__pyx_n_s__ValueChanged, __pyx_k__ValueChanged, sizeof(__pyx_k__ValueChanged), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueRefreshed, __pyx_k__ValueRefreshed, sizeof(__pyx_k__ValueRefreshed), 0, 0, 1, 1},
  {&__pyx_n_s__ValueRemoved, __pyx_k__ValueRemoved, sizeof(__pyx_k__ValueRemoved), 0, 0, 1, 1},
  {&__pyx_n_s__Versions, __pyx_k__Versions, sizeof(__pyx_k__Versions), 0, 0, 1, 1},
  {&__pyx_n_s__Waiting, __pyx_k__Waiting, sizeof(__pyx_k__Waiting), 0, 0, 1, 1},
  {&__pyx_n_s__WakeUp, __pyx_k__WakeUp, sizeof(__pyx_k__WakeUp), 0, 0, 1, 1},
  {&__pyx_n_s__Warning, __pyx_k__Warning, sizeof(__pyx_k__Warning), 0, 0, 1, 1},
  {&__pyx_n_s__WriteConfig, __pyx_k__WriteConfig, sizeof(__pyx_k__WriteConfig), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___controllerCallback, __pyx_k___controllerCallback, sizeof(__pyx_k___controllerCallback), 0, 0, 1, 1},
  {&__pyx_n_s___watcherCallback, __pyx_k___watcherCallback, sizeof(__pyx_k___watcherCallback), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__add, __pyx_k__add, sizeof(__pyx_k__add), 0, 0, 1, 1},
  {&__pyx_n_s__append, __pyx_k__append, sizeof(__pyx_k__append), 0, 0, 1, 1},
  {&__pyx_n_s__arg, __pyx_k__arg, sizeof(__pyx_k__arg), 0, 0, 1, 1},
  {&__pyx_n_s__at, __pyx_k__at, sizeof(__pyx_k__at), 0, 0, 1, 1},
  {&__pyx_n_s__averageRequestRTT, __pyx_k__averageRequestRTT, sizeof(__pyx_k__averageRequestRTT), 0, 0, 1, 1},
  {&__pyx_n_s__averageResponseRTT, __pyx_k__averageResponseRTT, sizeof(__pyx_k__averageResponseRTT), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__back, __pyx_k__back, sizeof(__pyx_k__back), 0, 0, 1, 1},
  {&__pyx_n_s__badChecksum, __pyx_k__badChecksum, sizeof(__pyx_k__badChecksum), 0, 0, 1, 1},
  {&__pyx_n_s__badroutes, __pyx_k__badroutes, sizeof(__pyx_k__badroutes), 0, 0, 1, 1},
  {&__pyx_n_s__broadcastReadCnt, __pyx_k__broadcastReadCnt, sizeof(__pyx_k__broadcastReadCnt), 0, 0, 1, 1},
  {&__pyx_n_s__broadcastWriteCnt, __pyx_k__broadcastWriteCnt, sizeof(__pyx_k__broadcastWriteCnt), 0, 0, 1, 1},
  {&__pyx_n_s__buttonId, __pyx_k__buttonId, sizeof(__pyx_k__buttonId), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__callbacks, __pyx_k__callbacks, sizeof(__pyx_k__callbacks), 0, 0, 1, 1},
  {&__pyx_n_s__ccData, __pyx_k__ccData, sizeof(__pyx_k__ccData), 0, 0, 1, 1},
  {&__pyx_n_s__className, __pyx_k__className, sizeof(__pyx_k__className), 0, 0, 1, 1},
  {&__pyx_n_s__classVersion, __pyx_k__classVersion, sizeof(__pyx_k__classVersion), 0, 0, 1, 1},
  {&__pyx_n_s__clear, __pyx_k__clear, sizeof(__pyx_k__clear), 0, 0, 1, 1},
  {&__pyx_n_s__command, __pyx_k__command, sizeof(__pyx_k__command), 0, 0, 1, 1},
  {&__pyx_n_s__commandClass, __pyx_k__commandClass, sizeof(__pyx_k__commandClass), 0, 0, 1, 1},
  {&__pyx_n_s__commandClassId, __pyx_k__commandClassId, sizeof(__pyx_k__commandClassId), 0, 0, 1, 1},
  {&__pyx_n_s__configPath, __pyx_k__configPath, sizeof(__pyx_k__configPath), 0, 0, 1, 1},
  {&__pyx_n_s__count, __pyx_k__count, sizeof(__pyx_k__count), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__doc, __pyx_k__doc, sizeof(__pyx_k__doc), 0, 0, 1, 1},
  {&__pyx_n_s__dropped, __pyx_k__dropped, sizeof(__pyx_k__dropped), 0, 0, 1, 1},
  {&__pyx_n_s__empty, __pyx_k__empty, sizeof(__pyx_k__empty), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__error, __pyx_k__error, sizeof(__pyx_k__error), 0, 0, 1, 1},
  {&__pyx_n_s__error_msg, __pyx_k__error_msg, sizeof(__pyx_k__error_msg), 0, 0, 1, 1},
  {&__pyx_n_s__event, __pyx_k__event, sizeof(__pyx_k__event), 0, 0, 1, 1},
  {&__pyx_n_s__exists, __pyx_k__exists, sizeof(__pyx_k__exists), 0, 0, 1, 1},
  {&__pyx_n_s__find, __pyx_k__find, sizeof(__pyx_k__find), 0, 0, 1, 1},
  {&__pyx_n_s__genre, __pyx_k__genre, sizeof(__pyx_k__genre), 0, 0, 1, 1},
  {&__pyx_n_s__groupIdx, __pyx_k__groupIdx, sizeof(__pyx_k__groupIdx), 0, 0, 1, 1},
  {&__pyx_n_s__groupidx, __pyx_k__groupidx, sizeof(__pyx_k__groupidx), 0, 0, 1, 1},
  {&__pyx_n_s__help, __pyx_k__help, sizeof(__pyx_k__help), 0, 0, 1, 1},
  {&__pyx_n_s__highPower, __pyx_k__highPower, sizeof(__pyx_k__highPower), 0, 0, 1, 1},
  {&__pyx_n_s__homeId, __pyx_k__homeId, sizeof(__pyx_k__homeId), 0, 0, 1, 1},
  {&__pyx_n_s__homeid, __pyx_k__homeid, sizeof(__pyx_k__homeid), 0, 0, 1, 1},
  {&__pyx_n_s__hours, __pyx_k__hours, sizeof(__pyx_k__hours), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__idx, __pyx_k__idx, sizeof(__pyx_k__idx), 0, 0, 1, 1},
  {&__pyx_n_s__index, __pyx_k__index, sizeof(__pyx_k__index), 0, 0, 1, 1},
  {&__pyx_n_s__insert, __pyx_k__insert, sizeof(__pyx_k__insert), 0, 0, 1, 1},
  {&__pyx_n_s__instance, __pyx_k__instance, sizeof(__pyx_k__instance), 0, 0, 1, 1},
  {&__pyx_n_s__intensity, __pyx_k__intensity, sizeof(__pyx_k__intensity), 0, 0, 1, 1},
  {&__pyx_n_s__isPolled, __pyx_k__isPolled, sizeof(__pyx_k__isPolled), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__label, __pyx_k__label, sizeof(__pyx_k__label), 0, 0, 1, 1},
  {&__pyx_n_s__lastReceivedMessage, __pyx_k__lastReceivedMessage, sizeof(__pyx_k__lastReceivedMessage), 0, 0, 1, 1},
  {&__pyx_n_s__lastRequestRTT, __pyx_k__lastRequestRTT, sizeof(__pyx_k__lastRequestRTT), 0, 0, 1, 1},
  {&__pyx_n_s__lastResponseRTT, __pyx_k__lastResponseRTT, sizeof(__pyx_k__lastResponseRTT), 0, 0, 1, 1},
  {&__pyx_n_s__level, __pyx_k__level, sizeof(__pyx_k__level), 0, 0, 1, 1},
  {&__pyx_n_s__libopenzwave, __pyx_k__libopenzwave, sizeof(__pyx_k__libopenzwave), 0, 0, 1, 1},
  {&__pyx_n_s__listdir, __pyx_k__listdir, sizeof(__pyx_k__listdir), 0, 0, 1, 1},
  {&__pyx_n_s__location, __pyx_k__location, sizeof(__pyx_k__location), 0, 0, 1, 1},
  {&__pyx_n_s__m_ACKCnt, __pyx_k__m_ACKCnt, sizeof(__pyx_k__m_ACKCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_ACKWaiting, __pyx_k__m_ACKWaiting, sizeof(__pyx_k__m_ACKWaiting), 0, 0, 1, 1},
  {&__pyx_n_s__m_CANCnt, __pyx_k__m_CANCnt, sizeof(__pyx_k__m_CANCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_NAKCnt, __pyx_k__m_NAKCnt, sizeof(__pyx_k__m_NAKCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_OOFCnt, __pyx_k__m_OOFCnt, sizeof(__pyx_k__m_OOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_SOFCnt, __pyx_k__m_SOFCnt, sizeof(__pyx_k__m_SOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_averageRequestRTT, __pyx_k__m_averageRequestRTT, sizeof(__pyx_k__m_averageRequestRTT), 0, 0, 1, 1},
  {&__pyx_n_s__m_badChecksum, __pyx_k__m_badChecksum, sizeof(__pyx_k__m_badChecksum), 0, 0, 1, 1},
  {&__pyx_n_s__m_badroutes, __pyx_k__m_badroutes, sizeof(__pyx_k__m_badroutes), 0, 0, 1, 1},
  {&__pyx_n_s__m_broadcastReadCnt, __pyx_k__m_broadcastReadCnt, sizeof(__pyx_k__m_broadcastReadCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_broadcastWriteCnt, __pyx_k__m_broadcastWriteCnt, sizeof(__pyx_k__m_broadcastWriteCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_callbacks, __pyx_k__m_callbacks, sizeof(__pyx_k__m_callbacks), 0, 0, 1, 1},
  {&__pyx_n_s__m_ccData, __pyx_k__m_ccData, sizeof(__pyx_k__m_ccData), 0, 0, 1, 1},
  {&__pyx_n_s__m_commandClassId, __pyx_k__m_commandClassId, sizeof(__pyx_k__m_commandClassId), 0, 0, 1, 1},
  {&__pyx_n_s__m_dropped, __pyx_k__m_dropped, sizeof(__pyx_k__m_dropped), 0, 0, 1, 1},
  {&__pyx_n_s__m_lastRequestRTT, __pyx_k__m_lastRequestRTT, sizeof(__pyx_k__m_lastRequestRTT), 0, 0, 1, 1},
  {&__pyx_n_s__m_lastResponseRTT, __pyx_k__m_lastResponseRTT, sizeof(__pyx_k__m_lastResponseRTT), 0, 0, 1, 1},
  {&__pyx_n_s__m_netbusy, __pyx_k__m_netbusy, sizeof(__pyx_k__m_netbusy), 0, 0, 1, 1},
  {&__pyx_n_s__m_noack, __pyx_k__m_noack, sizeof(__pyx_k__m_noack), 0, 0, 1, 1},
  {&__pyx_n_s__m_nondelivery, __pyx_k__m_nondelivery, sizeof(__pyx_k__m_nondelivery), 0, 0, 1, 1},
  {&__pyx_n_s__m_quality, __pyx_k__m_quality, sizeof(__pyx_k__m_quality), 0, 0, 1, 1},
  {&__pyx_n_s__m_readAborts, __pyx_k__m_readAborts, sizeof(__pyx_k__m_readAborts), 0, 0, 1, 1},
  {&__pyx_n_s__m_readCnt, __pyx_k__m_readCnt, sizeof(__pyx_k__m_readCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_receivedCnt, __pyx_k__m_receivedCnt, sizeof(__pyx_k__m_receivedCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_receivedDups, __pyx_k__m_receivedDups, sizeof(__pyx_k__m_receivedDups), 0, 0, 1, 1},
  {&__pyx_n_s__m_receivedTS, __pyx_k__m_receivedTS, sizeof(__pyx_k__m_receivedTS), 0, 0, 1, 1},
  {&__pyx_n_s__m_retries, __pyx_k__m_retries, sizeof(__pyx_k__m_retries), 0, 0, 1, 1},
  {&__pyx_n_s__m_routedbusy, __pyx_k__m_routedbusy, sizeof(__pyx_k__m_routedbusy), 0, 0, 1, 1},
  {&__pyx_n_s__m_sentCnt, __pyx_k__m_sentCnt, sizeof(__pyx_k__m_sentCnt), 0, 0, 1, 1},
  {&__pyx_n_s__m_sentFailed, __pyx_k__m_sentFailed, sizeof(__pyx_k__m_sentFailed), 0, 0, 1, 1},
  {&__pyx_n_s__m_sentTS, __pyx_k__m_sentTS, sizeof(__pyx_k__m_sentTS), 0, 0, 1, 1},
  {&__pyx_n_s__m_writeCnt, __pyx_k__m_writeCnt, sizeof(__pyx_k__m_writeCnt), 0, 0, 1, 1},
  {&__pyx_n_s__manager, __pyx_k__manager, sizeof(__pyx_k__manager), 0, 0, 1, 1},
  {&__pyx_n_s__manufacturerName, __pyx_k__manufacturerName, sizeof(__pyx_k__manufacturerName), 0, 0, 1, 1},
  {&__pyx_n_s__message, __pyx_k__message, sizeof(__pyx_k__message), 0, 0, 1, 1},
  {&__pyx_n_s__milliseconds, __pyx_k__milliseconds, sizeof(__pyx_k__milliseconds), 0, 0, 1, 1},
  {&__pyx_n_s__minutes, __pyx_k__minutes, sizeof(__pyx_k__minutes), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__netbusy, __pyx_k__netbusy, sizeof(__pyx_k__netbusy), 0, 0, 1, 1},
  {&__pyx_n_s__noack, __pyx_k__noack, sizeof(__pyx_k__noack), 0, 0, 1, 1},
  {&__pyx_n_s__nodeId, __pyx_k__nodeId, sizeof(__pyx_k__nodeId), 0, 0, 1, 1},
  {&__pyx_n_s__nodeid, __pyx_k__nodeid, sizeof(__pyx_k__nodeid), 0, 0, 1, 1},
  {&__pyx_n_s__nondelivery, __pyx_k__nondelivery, sizeof(__pyx_k__nondelivery), 0, 0, 1, 1},
  {&__pyx_n_s__notificationCode, __pyx_k__notificationCode, sizeof(__pyx_k__notificationCode), 0, 0, 1, 1},
  {&__pyx_n_s__notificationType, __pyx_k__notificationType, sizeof(__pyx_k__notificationType), 0, 0, 1, 1},
  {&__pyx_n_s__options, __pyx_k__options, sizeof(__pyx_k__options), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__param, __pyx_k__param, sizeof(__pyx_k__param), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__pop_back, __pyx_k__pop_back, sizeof(__pyx_k__pop_back), 0, 0, 1, 1},
  {&__pyx_n_s__productName, __pyx_k__productName, sizeof(__pyx_k__productName), 0, 0, 1, 1},
  {&__pyx_n_s__pythonfunc, __pyx_k__pythonfunc, sizeof(__pyx_k__pythonfunc), 0, 0, 1, 1},
  {&__pyx_n_s__quality, __pyx_k__quality, sizeof(__pyx_k__quality), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__readAborts, __pyx_k__readAborts, sizeof(__pyx_k__readAborts), 0, 0, 1, 1},
  {&__pyx_n_s__readCnt, __pyx_k__readCnt, sizeof(__pyx_k__readCnt), 0, 0, 1, 1},
  {&__pyx_n_s__readOnly, __pyx_k__readOnly, sizeof(__pyx_k__readOnly), 0, 0, 1, 1},
  {&__pyx_n_s__receivedCnt, __pyx_k__receivedCnt, sizeof(__pyx_k__receivedCnt), 0, 0, 1, 1},
  {&__pyx_n_s__receivedDups, __pyx_k__receivedDups, sizeof(__pyx_k__receivedDups), 0, 0, 1, 1},
  {&__pyx_n_s__receivedTS, __pyx_k__receivedTS, sizeof(__pyx_k__receivedTS), 0, 0, 1, 1},
  {&__pyx_n_s__receivedUnsolicited, __pyx_k__receivedUnsolicited, sizeof(__pyx_k__receivedUnsolicited), 0, 0, 1, 1},
  {&__pyx_n_s__retries, __pyx_k__retries, sizeof(__pyx_k__retries), 0, 0, 1, 1},
  {&__pyx_n_s__routedbusy, __pyx_k__routedbusy, sizeof(__pyx_k__routedbusy), 0, 0, 1, 1},
  {&__pyx_n_s__sceneId, __pyx_k__sceneId, sizeof(__pyx_k__sceneId), 0, 0, 1, 1},
  {&__pyx_n_s__sceneid, __pyx_k__sceneid, sizeof(__pyx_k__sceneid), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__sentCnt, __pyx_k__sentCnt, sizeof(__pyx_k__sentCnt), 0, 0, 1, 1},
  {&__pyx_n_s__sentFailed, __pyx_k__sentFailed, sizeof(__pyx_k__sentFailed), 0, 0, 1, 1},
  {&__pyx_n_s__sentTS, __pyx_k__sentTS, sizeof(__pyx_k__sentTS), 0, 0, 1, 1},
  {&__pyx_n_s__setDoc, __pyx_k__setDoc, sizeof(__pyx_k__setDoc), 0, 0, 1, 1},
  {&__pyx_n_s__setback, __pyx_k__setback, sizeof(__pyx_k__setback), 0, 0, 1, 1},
  {&__pyx_n_s__siz, __pyx_k__siz, sizeof(__pyx_k__siz), 0, 0, 1, 1},
  {&__pyx_n_s__state, __pyx_k__state, sizeof(__pyx_k__state), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__targetnodeid, __pyx_k__targetnodeid, sizeof(__pyx_k__targetnodeid), 0, 0, 1, 1},
  {&__pyx_n_s__type, __pyx_k__type, sizeof(__pyx_k__type), 0, 0, 1, 1},
  {&__pyx_n_s__unit, __pyx_k__unit, sizeof(__pyx_k__unit), 0, 0, 1, 1},
  {&__pyx_n_s__units, __pyx_k__units, sizeof(__pyx_k__units), 0, 0, 1, 1},
  {&__pyx_n_s__upNodeRoute, __pyx_k__upNodeRoute, sizeof(__pyx_k__upNodeRoute), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__valueId, __pyx_k__valueId, sizeof(__pyx_k__valueId), 0, 0, 1, 1},
  {&__pyx_n_s__writeCnt, __pyx_k__writeCnt, sizeof(__pyx_k__writeCnt), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3213
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * 
 *     def removeWatcher(self, pythonfunc):
 */
  __pyx_k_tuple_31 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_31));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_30));
  PyTuple_SET_ITEM(__pyx_k_tuple_31, 0, ((PyObject *)__pyx_kp_s_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_30));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_31));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3227
 *         '''
 *         if not self.manager.RemoveWatcher(notif_callback, <void*>self._watcherCallback):
 *             raise ValueError("call to RemoveWatcher failed")             # <<<<<<<<<<<<<<
 *         else:
 *             self._watcherCallback = None
 */
  __pyx_k_tuple_33 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_33));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_32));
  PyTuple_SET_ITEM(__pyx_k_tuple_33, 0, ((PyObject *)__pyx_kp_s_32));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_32));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_33));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":68
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 */
  __pyx_k_tuple_47 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_47));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueAdded));
  PyTuple_SET_ITEM(__pyx_k_tuple_47, 0, ((PyObject *)__pyx_n_s__ValueAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_47));
  __pyx_k_tuple_49 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_49));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_48));
  PyTuple_SET_ITEM(__pyx_k_tuple_49, 0, ((PyObject *)__pyx_kp_s_48));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_48));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_49));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":69
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 */
  __pyx_k_tuple_50 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_50));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueRemoved));
  PyTuple_SET_ITEM(__pyx_k_tuple_50, 0, ((PyObject *)__pyx_n_s__ValueRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_50));
  __pyx_k_tuple_52 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_52));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_51));
  PyTuple_SET_ITEM(__pyx_k_tuple_52, 0, ((PyObject *)__pyx_kp_s_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_52));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":70
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 */
  __pyx_k_tuple_53 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_53));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueChanged));
  PyTuple_SET_ITEM(__pyx_k_tuple_53, 0, ((PyObject *)__pyx_n_s__ValueChanged));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueChanged));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));
  __pyx_k_tuple_55 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_55));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_54));
  PyTuple_SET_ITEM(__pyx_k_tuple_55, 0, ((PyObject *)__pyx_kp_s_54));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_54));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_55));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":71
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 */
  __pyx_k_tuple_56 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueRefreshed));
  PyTuple_SET_ITEM(__pyx_k_tuple_56, 0, ((PyObject *)__pyx_n_s__ValueRefreshed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueRefreshed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));
  __pyx_k_tuple_58 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_58));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_57));
  PyTuple_SET_ITEM(__pyx_k_tuple_58, 0, ((PyObject *)__pyx_kp_s_57));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_57));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_58));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":72
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 */
  __pyx_k_tuple_59 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_59));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Group));
  PyTuple_SET_ITEM(__pyx_k_tuple_59, 0, ((PyObject *)__pyx_n_s__Group));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Group));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_59));
  __pyx_k_tuple_61 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_61));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_60));
  PyTuple_SET_ITEM(__pyx_k_tuple_61, 0, ((PyObject *)__pyx_kp_s_60));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_60));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_61));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":73
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 */
  __pyx_k_tuple_62 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_62));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeNew));
  PyTuple_SET_ITEM(__pyx_k_tuple_62, 0, ((PyObject *)__pyx_n_s__NodeNew));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeNew));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_62));
  __pyx_k_tuple_64 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_64));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_63));
  PyTuple_SET_ITEM(__pyx_k_tuple_64, 0, ((PyObject *)__pyx_kp_s_63));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_63));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_64));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":74
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 */
  __pyx_k_tuple_65 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_65));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeAdded));
  PyTuple_SET_ITEM(__pyx_k_tuple_65, 0, ((PyObject *)__pyx_n_s__NodeAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_65));
  __pyx_k_tuple_67 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_67));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_66));
  PyTuple_SET_ITEM(__pyx_k_tuple_67, 0, ((PyObject *)__pyx_kp_s_66));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_66));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_67));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":75
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 */
  __pyx_k_tuple_68 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_68));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeRemoved));
  PyTuple_SET_ITEM(__pyx_k_tuple_68, 0, ((PyObject *)__pyx_n_s__NodeRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_68));
  __pyx_k_tuple_70 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_70));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_69));
  PyTuple_SET_ITEM(__pyx_k_tuple_70, 0, ((PyObject *)__pyx_kp_s_69));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_69));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_70));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":76
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 */
  __pyx_k_tuple_71 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_71));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeProtocolInfo));
  PyTuple_SET_ITEM(__pyx_k_tuple_71, 0, ((PyObject *)__pyx_n_s__NodeProtocolInfo));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeProtocolInfo));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_71));
  __pyx_k_tuple_73 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_73));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_72));
  PyTuple_SET_ITEM(__pyx_k_tuple_73, 0, ((PyObject *)__pyx_kp_s_72));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_72));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_73));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":77
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 */
  __pyx_k_tuple_74 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_74));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeNaming));
  PyTuple_SET_ITEM(__pyx_k_tuple_74, 0, ((PyObject *)__pyx_n_s__NodeNaming));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeNaming));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_74));
  __pyx_k_tuple_76 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_76));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_75));
  PyTuple_SET_ITEM(__pyx_k_tuple_76, 0, ((PyObject *)__pyx_kp_s_75));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_75));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_76));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":78
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 */
  __pyx_k_tuple_77 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_77));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeEvent));
  PyTuple_SET_ITEM(__pyx_k_tuple_77, 0, ((PyObject *)__pyx_n_s__NodeEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_77));
  __pyx_k_tuple_79 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_79));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_78));
  PyTuple_SET_ITEM(__pyx_k_tuple_79, 0, ((PyObject *)__pyx_kp_s_78));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_78));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_79));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":79
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 */
  __pyx_k_tuple_80 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_80));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PollingDisabled));
  PyTuple_SET_ITEM(__pyx_k_tuple_80, 0, ((PyObject *)__pyx_n_s__PollingDisabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PollingDisabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_80));
  __pyx_k_tuple_82 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_82));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_81));
  PyTuple_SET_ITEM(__pyx_k_tuple_82, 0, ((PyObject *)__pyx_kp_s_81));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_81));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_82));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":80
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 */
  __pyx_k_tuple_83 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_83));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PollingEnabled));
  PyTuple_SET_ITEM(__pyx_k_tuple_83, 0, ((PyObject *)__pyx_n_s__PollingEnabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PollingEnabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_83));
  __pyx_k_tuple_85 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_85));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_84));
  PyTuple_SET_ITEM(__pyx_k_tuple_85, 0, ((PyObject *)__pyx_kp_s_84));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_84));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_85));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":81
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 */
  __pyx_k_tuple_86 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_86));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__SceneEvent));
  PyTuple_SET_ITEM(__pyx_k_tuple_86, 0, ((PyObject *)__pyx_n_s__SceneEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__SceneEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_86));
  __pyx_k_tuple_88 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_88));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_87));
  PyTuple_SET_ITEM(__pyx_k_tuple_88, 0, ((PyObject *)__pyx_kp_s_87));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_87));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_88));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":82
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 */
  __pyx_k_tuple_89 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_89));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CreateButton));
  PyTuple_SET_ITEM(__pyx_k_tuple_89, 0, ((PyObject *)__pyx_n_s__CreateButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CreateButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_89));
  __pyx_k_tuple_91 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_91));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_90));
  PyTuple_SET_ITEM(__pyx_k_tuple_91, 0, ((PyObject *)__pyx_kp_s_90));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_90));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_91));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":83
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 */
  __pyx_k_tuple_92 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_92));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DeleteButton));
  PyTuple_SET_ITEM(__pyx_k_tuple_92, 0, ((PyObject *)__pyx_n_s__DeleteButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DeleteButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_92));
  __pyx_k_tuple_94 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_94));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_93));
  PyTuple_SET_ITEM(__pyx_k_tuple_94, 0, ((PyObject *)__pyx_kp_s_93));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_93));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_94));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":84
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 */
  __pyx_k_tuple_95 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_95));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ButtonOn));
  PyTuple_SET_ITEM(__pyx_k_tuple_95, 0, ((PyObject *)__pyx_n_s__ButtonOn));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ButtonOn));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_95));
  __pyx_k_tuple_97 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_97));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_96));
  PyTuple_SET_ITEM(__pyx_k_tuple_97, 0, ((PyObject *)__pyx_kp_s_96));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_96));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_97));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":85
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 */
  __pyx_k_tuple_98 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_98));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ButtonOff));
  PyTuple_SET_ITEM(__pyx_k_tuple_98, 0, ((PyObject *)__pyx_n_s__ButtonOff));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ButtonOff));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_98));
  __pyx_k_tuple_100 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_100));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_99));
  PyTuple_SET_ITEM(__pyx_k_tuple_100, 0, ((PyObject *)__pyx_kp_s_99));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_99));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_100));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":86
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 */
  __pyx_k_tuple_101 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_101));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DriverReady));
  PyTuple_SET_ITEM(__pyx_k_tuple_101, 0, ((PyObject *)__pyx_n_s__DriverReady));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DriverReady));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_101));
  __pyx_k_tuple_103 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_103));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_102));
  PyTuple_SET_ITEM(__pyx_k_tuple_103, 0, ((PyObject *)__pyx_kp_s_102));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_102));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_103));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":87
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 */
  __pyx_k_tuple_104 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_104));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DriverFailed));
  PyTuple_SET_ITEM(__pyx_k_tuple_104, 0, ((PyObject *)__pyx_n_s__DriverFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DriverFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_104));
  __pyx_k_tuple_106 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_106));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_105));
  PyTuple_SET_ITEM(__pyx_k_tuple_106, 0, ((PyObject *)__pyx_kp_s_105));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_105));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_106));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":88
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 */
  __pyx_k_tuple_107 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_107));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DriverReset));
  PyTuple_SET_ITEM(__pyx_k_tuple_107, 0, ((PyObject *)__pyx_n_s__DriverReset));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DriverReset));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_107));
  __pyx_k_tuple_109 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_109));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_108));
  PyTuple_SET_ITEM(__pyx_k_tuple_109, 0, ((PyObject *)__pyx_kp_s_108));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_108));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_109));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":89
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 */
  __pyx_k_tuple_111 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_111));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_110));
  PyTuple_SET_ITEM(__pyx_k_tuple_111, 0, ((PyObject *)__pyx_n_s_110));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_110));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_111));
  __pyx_k_tuple_113 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_113));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_112));
  PyTuple_SET_ITEM(__pyx_k_tuple_113, 0, ((PyObject *)__pyx_kp_s_112));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_112));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_113));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":90
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 */
  __pyx_k_tuple_114 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_114));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeQueriesComplete));
  PyTuple_SET_ITEM(__pyx_k_tuple_114, 0, ((PyObject *)__pyx_n_s__NodeQueriesComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeQueriesComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_114));
  __pyx_k_tuple_116 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_116));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_115));
  PyTuple_SET_ITEM(__pyx_k_tuple_116, 0, ((PyObject *)__pyx_kp_s_115));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_115));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_116));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":91
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 */
  __pyx_k_tuple_117 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_117));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AwakeNodesQueried));
  PyTuple_SET_ITEM(__pyx_k_tuple_117, 0, ((PyObject *)__pyx_n_s__AwakeNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AwakeNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_117));
  __pyx_k_tuple_119 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_119));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_118));
  PyTuple_SET_ITEM(__pyx_k_tuple_119, 0, ((PyObject *)__pyx_kp_s_118));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_118));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_119));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":92
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report.."),
 */
  __pyx_k_tuple_120 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_120));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AllNodesQueried));
  PyTuple_SET_ITEM(__pyx_k_tuple_120, 0, ((PyObject *)__pyx_n_s__AllNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AllNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_120));
  __pyx_k_tuple_122 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_122));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_121));
  PyTuple_SET_ITEM(__pyx_k_tuple_122, 0, ((PyObject *)__pyx_kp_s_121));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_121));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_122));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":93
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Notification').setDoc("A manager notification report.."),
 *     ]
 */
  __pyx_k_tuple_124 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_124));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_123));
  PyTuple_SET_ITEM(__pyx_k_tuple_124, 0, ((PyObject *)__pyx_n_s_123));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_123));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_124));
  __pyx_k_tuple_126 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_126));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_125));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 0, ((PyObject *)__pyx_kp_s_125));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_125));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_126));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":94
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report.."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_127 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_127));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Notification));
  PyTuple_SET_ITEM(__pyx_k_tuple_127, 0, ((PyObject *)__pyx_n_s__Notification));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Notification));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_127));
  __pyx_k_tuple_129 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_129));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_128));
  PyTuple_SET_ITEM(__pyx_k_tuple_129, 0, ((PyObject *)__pyx_kp_s_128));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_128));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_129));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":98
 * 
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 */
  __pyx_k_tuple_130 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_130));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__MsgComplete));
  PyTuple_SET_ITEM(__pyx_k_tuple_130, 0, ((PyObject *)__pyx_n_s__MsgComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__MsgComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_130));
  __pyx_k_tuple_132 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_132));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_131));
  PyTuple_SET_ITEM(__pyx_k_tuple_132, 0, ((PyObject *)__pyx_kp_s_131));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_131));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_132));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":99
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 */
  __pyx_k_tuple_133 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_133));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Timeout));
  PyTuple_SET_ITEM(__pyx_k_tuple_133, 0, ((PyObject *)__pyx_n_s__Timeout));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Timeout));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_133));
  __pyx_k_tuple_135 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_135));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_134));
  PyTuple_SET_ITEM(__pyx_k_tuple_135, 0, ((PyObject *)__pyx_kp_s_134));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_134));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_135));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":100
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 */
  __pyx_k_tuple_136 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_136));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NoOperation));
  PyTuple_SET_ITEM(__pyx_k_tuple_136, 0, ((PyObject *)__pyx_n_s__NoOperation));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NoOperation));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_136));
  __pyx_k_tuple_138 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_138));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_137));
  PyTuple_SET_ITEM(__pyx_k_tuple_138, 0, ((PyObject *)__pyx_kp_s_137));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_137));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_138));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":101
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 */
  __pyx_k_tuple_139 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_139));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Awake));
  PyTuple_SET_ITEM(__pyx_k_tuple_139, 0, ((PyObject *)__pyx_n_s__Awake));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Awake));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_139));
  __pyx_k_tuple_141 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_141));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_140));
  PyTuple_SET_ITEM(__pyx_k_tuple_141, 0, ((PyObject *)__pyx_kp_s_140));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_140));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_141));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":102
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 */
  __pyx_k_tuple_142 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_142));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Sleep));
  PyTuple_SET_ITEM(__pyx_k_tuple_142, 0, ((PyObject *)__pyx_n_s__Sleep));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Sleep));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_142));
  __pyx_k_tuple_144 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_144));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_143));
  PyTuple_SET_ITEM(__pyx_k_tuple_144, 0, ((PyObject *)__pyx_kp_s_143));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_143));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_144));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":103
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 *     ]
 */
  __pyx_k_tuple_145 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_145));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Dead));
  PyTuple_SET_ITEM(__pyx_k_tuple_145, 0, ((PyObject *)__pyx_n_s__Dead));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Dead));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_145));
  __pyx_k_tuple_147 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_147));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_146));
  PyTuple_SET_ITEM(__pyx_k_tuple_147, 0, ((PyObject *)__pyx_kp_s_146));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_146));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_147));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":104
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_148 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_148));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Alive));
  PyTuple_SET_ITEM(__pyx_k_tuple_148, 0, ((PyObject *)__pyx_n_s__Alive));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Alive));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_148));
  __pyx_k_tuple_150 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_150));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_149));
  PyTuple_SET_ITEM(__pyx_k_tuple_150, 0, ((PyObject *)__pyx_kp_s_149));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_149));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_150));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":108
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_k_tuple_151 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_151));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Basic));
  PyTuple_SET_ITEM(__pyx_k_tuple_151, 0, ((PyObject *)__pyx_n_s__Basic));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Basic));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_151));
  __pyx_k_tuple_153 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_153));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_152));
  PyTuple_SET_ITEM(__pyx_k_tuple_153, 0, ((PyObject *)__pyx_kp_s_152));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_152));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_153));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":109
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_k_tuple_154 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_154));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__User));
  PyTuple_SET_ITEM(__pyx_k_tuple_154, 0, ((PyObject *)__pyx_n_s__User));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__User));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_154));
  __pyx_k_tuple_156 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_156));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_155));
  PyTuple_SET_ITEM(__pyx_k_tuple_156, 0, ((PyObject *)__pyx_kp_s_155));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_155));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_156));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":110
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_k_tuple_157 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_157));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Config));
  PyTuple_SET_ITEM(__pyx_k_tuple_157, 0, ((PyObject *)__pyx_n_s__Config));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Config));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_157));
  __pyx_k_tuple_159 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_159)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_159));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_158));
  PyTuple_SET_ITEM(__pyx_k_tuple_159, 0, ((PyObject *)__pyx_kp_s_158));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_158));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_159));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":111
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_160 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_160)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_160));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__System));
  PyTuple_SET_ITEM(__pyx_k_tuple_160, 0, ((PyObject *)__pyx_n_s__System));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__System));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_160));
  __pyx_k_tuple_162 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_162)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_162));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_161));
  PyTuple_SET_ITEM(__pyx_k_tuple_162, 0, ((PyObject *)__pyx_kp_s_161));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_161));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_162));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":115
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_k_tuple_163 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_163)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_163));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Bool));
  PyTuple_SET_ITEM(__pyx_k_tuple_163, 0, ((PyObject *)__pyx_n_s__Bool));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Bool));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_163));
  __pyx_k_tuple_165 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_165)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_165));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_164));
  PyTuple_SET_ITEM(__pyx_k_tuple_165, 0, ((PyObject *)__pyx_kp_s_164));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_164));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_165));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":116
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 */
  __pyx_k_tuple_166 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_166)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_166));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Byte));
  PyTuple_SET_ITEM(__pyx_k_tuple_166, 0, ((PyObject *)__pyx_n_s__Byte));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Byte));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_166));
  __pyx_k_tuple_168 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_168)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_168));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_167));
  PyTuple_SET_ITEM(__pyx_k_tuple_168, 0, ((PyObject *)__pyx_kp_s_167));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_167));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_168));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":117
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 */
  __pyx_k_tuple_169 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_169)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_169));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Decimal));
  PyTuple_SET_ITEM(__pyx_k_tuple_169, 0, ((PyObject *)__pyx_n_s__Decimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Decimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_169));
  __pyx_k_tuple_171 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_171)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_171));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_170));
  PyTuple_SET_ITEM(__pyx_k_tuple_171, 0, ((PyObject *)__pyx_kp_s_170));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_170));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_171));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":118
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_k_tuple_172 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_172)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_172));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Int));
  PyTuple_SET_ITEM(__pyx_k_tuple_172, 0, ((PyObject *)__pyx_n_s__Int));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Int));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_172));
  __pyx_k_tuple_174 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_174)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_174));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_173));
  PyTuple_SET_ITEM(__pyx_k_tuple_174, 0, ((PyObject *)__pyx_kp_s_173));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_173));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_174));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":119
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 */
  __pyx_k_tuple_175 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_175)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_175));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__List));
  PyTuple_SET_ITEM(__pyx_k_tuple_175, 0, ((PyObject *)__pyx_n_s__List));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__List));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_175));
  __pyx_k_tuple_177 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_177)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_177));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_176));
  PyTuple_SET_ITEM(__pyx_k_tuple_177, 0, ((PyObject *)__pyx_kp_s_176));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_176));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_177));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":120
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 */
  __pyx_k_tuple_178 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_178)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_178));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Schedule));
  PyTuple_SET_ITEM(__pyx_k_tuple_178, 0, ((PyObject *)__pyx_n_s__Schedule));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Schedule));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_178));
  __pyx_k_tuple_180 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_180)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_180));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_179));
  PyTuple_SET_ITEM(__pyx_k_tuple_180, 0, ((PyObject *)__pyx_kp_s_179));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_179));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_180));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":121
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_k_tuple_181 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_181)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_181));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Short));
  PyTuple_SET_ITEM(__pyx_k_tuple_181, 0, ((PyObject *)__pyx_n_s__Short));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Short));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_181));
  __pyx_k_tuple_183 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_183)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_183));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_182));
  PyTuple_SET_ITEM(__pyx_k_tuple_183, 0, ((PyObject *)__pyx_kp_s_182));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_182));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_183));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":122
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     ]
 */
  __pyx_k_tuple_184 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_184)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_184));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__String));
  PyTuple_SET_ITEM(__pyx_k_tuple_184, 0, ((PyObject *)__pyx_n_s__String));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__String));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_184));
  __pyx_k_tuple_186 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_186)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_186));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_185));
  PyTuple_SET_ITEM(__pyx_k_tuple_186, 0, ((PyObject *)__pyx_kp_s_185));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_185));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_186));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":123
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_187 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_187)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_187));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Button));
  PyTuple_SET_ITEM(__pyx_k_tuple_187, 0, ((PyObject *)__pyx_n_s__Button));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Button));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_187));
  __pyx_k_tuple_189 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_189)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_189));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_188));
  PyTuple_SET_ITEM(__pyx_k_tuple_189, 0, ((PyObject *)__pyx_kp_s_188));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_188));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_189));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":127
 * 
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 */
  __pyx_k_tuple_190 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_190)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_190));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Normal));
  PyTuple_SET_ITEM(__pyx_k_tuple_190, 0, ((PyObject *)__pyx_n_s__Normal));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Normal));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_190));
  __pyx_k_tuple_192 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_192)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_192));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_191));
  PyTuple_SET_ITEM(__pyx_k_tuple_192, 0, ((PyObject *)__pyx_kp_s_191));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_191));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_192));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":128
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 */
  __pyx_k_tuple_193 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_193)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_193));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Starting));
  PyTuple_SET_ITEM(__pyx_k_tuple_193, 0, ((PyObject *)__pyx_n_s__Starting));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Starting));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_193));
  __pyx_k_tuple_195 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_195)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_195));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_194));
  PyTuple_SET_ITEM(__pyx_k_tuple_195, 0, ((PyObject *)__pyx_kp_s_194));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_194));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_195));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":129
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 */
  __pyx_k_tuple_196 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_196)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_196));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Cancel));
  PyTuple_SET_ITEM(__pyx_k_tuple_196, 0, ((PyObject *)__pyx_n_s__Cancel));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Cancel));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_196));
  __pyx_k_tuple_198 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_198)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_198));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_197));
  PyTuple_SET_ITEM(__pyx_k_tuple_198, 0, ((PyObject *)__pyx_kp_s_197));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_197));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_198));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":130
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 */
  __pyx_k_tuple_199 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_199)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_199));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Error));
  PyTuple_SET_ITEM(__pyx_k_tuple_199, 0, ((PyObject *)__pyx_n_s__Error));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Error));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_199));
  __pyx_k_tuple_201 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_201)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_201));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_200));
  PyTuple_SET_ITEM(__pyx_k_tuple_201, 0, ((PyObject *)__pyx_kp_s_200));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_200));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_201));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":131
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 */
  __pyx_k_tuple_202 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_202)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_202));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Waiting));
  PyTuple_SET_ITEM(__pyx_k_tuple_202, 0, ((PyObject *)__pyx_n_s__Waiting));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Waiting));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_202));
  __pyx_k_tuple_204 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_204)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_204));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_203));
  PyTuple_SET_ITEM(__pyx_k_tuple_204, 0, ((PyObject *)__pyx_kp_s_203));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_203));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_204));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":132
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 */
  __pyx_k_tuple_205 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_205)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_205));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Sleeping));
  PyTuple_SET_ITEM(__pyx_k_tuple_205, 0, ((PyObject *)__pyx_n_s__Sleeping));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Sleeping));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_205));
  __pyx_k_tuple_207 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_207)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_207));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_206));
  PyTuple_SET_ITEM(__pyx_k_tuple_207, 0, ((PyObject *)__pyx_kp_s_206));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_206));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_207));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":133
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 */
  __pyx_k_tuple_208 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_208)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_208));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__InProgress));
  PyTuple_SET_ITEM(__pyx_k_tuple_208, 0, ((PyObject *)__pyx_n_s__InProgress));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__InProgress));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_208));
  __pyx_k_tuple_210 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_210)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_210));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_209));
  PyTuple_SET_ITEM(__pyx_k_tuple_210, 0, ((PyObject *)__pyx_kp_s_209));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_209));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_210));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":134
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 */
  __pyx_k_tuple_211 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_211)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_211));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Completed));
  PyTuple_SET_ITEM(__pyx_k_tuple_211, 0, ((PyObject *)__pyx_n_s__Completed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Completed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_211));
  __pyx_k_tuple_213 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_213)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_213));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_212));
  PyTuple_SET_ITEM(__pyx_k_tuple_213, 0, ((PyObject *)__pyx_kp_s_212));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_212));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_213));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":135
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 */
  __pyx_k_tuple_214 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_214)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_214));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Failed));
  PyTuple_SET_ITEM(__pyx_k_tuple_214, 0, ((PyObject *)__pyx_n_s__Failed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Failed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_214));
  __pyx_k_tuple_216 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_216)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_216));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_215));
  PyTuple_SET_ITEM(__pyx_k_tuple_216, 0, ((PyObject *)__pyx_kp_s_215));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_215));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_216));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":136
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 *     ]
 */
  __pyx_k_tuple_217 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_217)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_217));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeOK));
  PyTuple_SET_ITEM(__pyx_k_tuple_217, 0, ((PyObject *)__pyx_n_s__NodeOK));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeOK));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_217));
  __pyx_k_tuple_219 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_219)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_219));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_218));
  PyTuple_SET_ITEM(__pyx_k_tuple_219, 0, ((PyObject *)__pyx_kp_s_218));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_218));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_219));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":137
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_220 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_220)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_220));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeFailed));
  PyTuple_SET_ITEM(__pyx_k_tuple_220, 0, ((PyObject *)__pyx_n_s__NodeFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_220));
  __pyx_k_tuple_222 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_222)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_222));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_221));
  PyTuple_SET_ITEM(__pyx_k_tuple_222, 0, ((PyObject *)__pyx_kp_s_221));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_221));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_222));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":141
 * 
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 */
  __pyx_k_tuple_223 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_223)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_223));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__None));
  PyTuple_SET_ITEM(__pyx_k_tuple_223, 0, ((PyObject *)__pyx_n_s__None));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__None));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_223));
  __pyx_k_tuple_225 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_225)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_225));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_224));
  PyTuple_SET_ITEM(__pyx_k_tuple_225, 0, ((PyObject *)__pyx_kp_s_224));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_224));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_225));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":142
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 */
  __pyx_k_tuple_226 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_226)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_226));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ButtonNotFound));
  PyTuple_SET_ITEM(__pyx_k_tuple_226, 0, ((PyObject *)__pyx_n_s__ButtonNotFound));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ButtonNotFound));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_226));
  __pyx_k_tuple_228 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_228)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_228));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_227));
  PyTuple_SET_ITEM(__pyx_k_tuple_228, 0, ((PyObject *)__pyx_kp_s_227));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_227));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_228));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":143
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 */
  __pyx_k_tuple_229 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_229)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_229));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeNotFound));
  PyTuple_SET_ITEM(__pyx_k_tuple_229, 0, ((PyObject *)__pyx_n_s__NodeNotFound));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeNotFound));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_229));
  __pyx_k_tuple_230 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_230)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_230));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_227));
  PyTuple_SET_ITEM(__pyx_k_tuple_230, 0, ((PyObject *)__pyx_kp_s_227));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_227));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_230));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":144
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 */
  __pyx_k_tuple_231 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_231)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_231));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NotBridge));
  PyTuple_SET_ITEM(__pyx_k_tuple_231, 0, ((PyObject *)__pyx_n_s__NotBridge));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NotBridge));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_231));
  __pyx_k_tuple_232 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_232)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_232));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_227));
  PyTuple_SET_ITEM(__pyx_k_tuple_232, 0, ((PyObject *)__pyx_kp_s_227));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_227));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_232));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":145
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 */
  __pyx_k_tuple_233 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_233)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_233));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NotSUC));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 0, ((PyObject *)__pyx_n_s__NotSUC));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NotSUC));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_233));
  __pyx_k_tuple_235 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_235)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_235));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_234));
  PyTuple_SET_ITEM(__pyx_k_tuple_235, 0, ((PyObject *)__pyx_kp_s_234));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_234));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_235));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":146
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 */
  __pyx_k_tuple_236 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_236)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_236));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NotSecondary));
  PyTuple_SET_ITEM(__pyx_k_tuple_236, 0, ((PyObject *)__pyx_n_s__NotSecondary));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NotSecondary));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_236));
  __pyx_k_tuple_237 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_237)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_237));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_234));
  PyTuple_SET_ITEM(__pyx_k_tuple_237, 0, ((PyObject *)__pyx_kp_s_234));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_234));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_237));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":147
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 */
  __pyx_k_tuple_238 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_238)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_238));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NotPrimary));
  PyTuple_SET_ITEM(__pyx_k_tuple_238, 0, ((PyObject *)__pyx_n_s__NotPrimary));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NotPrimary));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_238));
  __pyx_k_tuple_240 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_240));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_239));
  PyTuple_SET_ITEM(__pyx_k_tuple_240, 0, ((PyObject *)__pyx_kp_s_239));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_239));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_240));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":148
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_k_tuple_241 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_241)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_241));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__IsPrimary));
  PyTuple_SET_ITEM(__pyx_k_tuple_241, 0, ((PyObject *)__pyx_n_s__IsPrimary));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__IsPrimary));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_241));
  __pyx_k_tuple_243 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_243)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_243));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_242));
  PyTuple_SET_ITEM(__pyx_k_tuple_243, 0, ((PyObject *)__pyx_kp_s_242));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_242));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_243));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":149
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_k_tuple_244 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_244)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_244));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NotFound));
  PyTuple_SET_ITEM(__pyx_k_tuple_244, 0, ((PyObject *)__pyx_n_s__NotFound));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NotFound));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_244));
  __pyx_k_tuple_246 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_246)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_246));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_245));
  PyTuple_SET_ITEM(__pyx_k_tuple_246, 0, ((PyObject *)__pyx_kp_s_245));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_245));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_246));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":150
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_k_tuple_247 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_247)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_247));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Busy));
  PyTuple_SET_ITEM(__pyx_k_tuple_247, 0, ((PyObject *)__pyx_n_s__Busy));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Busy));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_247));
  __pyx_k_tuple_249 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_249)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_249));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_248));
  PyTuple_SET_ITEM(__pyx_k_tuple_249, 0, ((PyObject *)__pyx_kp_s_248));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_248));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_249));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":151
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_k_tuple_250 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_250)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_250));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Failed));
  PyTuple_SET_ITEM(__pyx_k_tuple_250, 0, ((PyObject *)__pyx_n_s__Failed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Failed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_250));
  __pyx_k_tuple_251 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_251)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_251));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_248));
  PyTuple_SET_ITEM(__pyx_k_tuple_251, 0, ((PyObject *)__pyx_kp_s_248));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_248));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_251));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":152
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 *     ]
 */
  __pyx_k_tuple_252 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_252)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_252));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Disabled));
  PyTuple_SET_ITEM(__pyx_k_tuple_252, 0, ((PyObject *)__pyx_n_s__Disabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Disabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_252));
  __pyx_k_tuple_254 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_254)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_254));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_253));
  PyTuple_SET_ITEM(__pyx_k_tuple_254, 0, ((PyObject *)__pyx_kp_s_253));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_253));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_254));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":153
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_255 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_255)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_255));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Overflow));
  PyTuple_SET_ITEM(__pyx_k_tuple_255, 0, ((PyObject *)__pyx_n_s__Overflow));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Overflow));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_255));
  __pyx_k_tuple_256 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_256)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_256));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_253));
  PyTuple_SET_ITEM(__pyx_k_tuple_256, 0, ((PyObject *)__pyx_kp_s_253));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_253));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_256));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":157
 * 
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 */
  __pyx_k_tuple_257 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_257)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_257));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__None));
  PyTuple_SET_ITEM(__pyx_k_tuple_257, 0, ((PyObject *)__pyx_n_s__None));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__None));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_257));
  __pyx_k_tuple_259 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_259)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_259));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_258));
  PyTuple_SET_ITEM(__pyx_k_tuple_259, 0, ((PyObject *)__pyx_kp_s_258));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_258));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_259));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":158
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 */
  __pyx_k_tuple_260 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_260)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_260));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AddDevice));
  PyTuple_SET_ITEM(__pyx_k_tuple_260, 0, ((PyObject *)__pyx_n_s__AddDevice));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AddDevice));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_260));
  __pyx_k_tuple_262 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_262)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_262));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_261));
  PyTuple_SET_ITEM(__pyx_k_tuple_262, 0, ((PyObject *)__pyx_kp_s_261));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_261));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_262));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":159
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 */
  __pyx_k_tuple_263 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_263)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_263));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CreateNewPrimary));
  PyTuple_SET_ITEM(__pyx_k_tuple_263, 0, ((PyObject *)__pyx_n_s__CreateNewPrimary));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CreateNewPrimary));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_263));
  __pyx_k_tuple_265 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_265)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_265));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_264));
  PyTuple_SET_ITEM(__pyx_k_tuple_265, 0, ((PyObject *)__pyx_kp_s_264));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_264));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_265));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":160
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 */
  __pyx_k_tuple_267 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_267)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_267));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_266));
  PyTuple_SET_ITEM(__pyx_k_tuple_267, 0, ((PyObject *)__pyx_n_s_266));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_266));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_267));
  __pyx_k_tuple_269 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_269)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_269));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_268));
  PyTuple_SET_ITEM(__pyx_k_tuple_269, 0, ((PyObject *)__pyx_kp_s_268));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_268));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_269));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":161
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 */
  __pyx_k_tuple_270 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_270)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_270));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__RemoveDevice));
  PyTuple_SET_ITEM(__pyx_k_tuple_270, 0, ((PyObject *)__pyx_n_s__RemoveDevice));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__RemoveDevice));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_270));
  __pyx_k_tuple_272 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_272)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_272));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_271));
  PyTuple_SET_ITEM(__pyx_k_tuple_272, 0, ((PyObject *)__pyx_kp_s_271));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_271));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_272));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":162
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 */
  __pyx_k_tuple_273 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_273)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_273));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__RemoveFailedNode));
  PyTuple_SET_ITEM(__pyx_k_tuple_273, 0, ((PyObject *)__pyx_n_s__RemoveFailedNode));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__RemoveFailedNode));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_273));
  __pyx_k_tuple_275 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_275)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_275));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_274));
  PyTuple_SET_ITEM(__pyx_k_tuple_275, 0, ((PyObject *)__pyx_kp_s_274));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_274));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_275));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":163
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 */
  __pyx_k_tuple_276 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_276)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_276));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__HasNodeFailed));
  PyTuple_SET_ITEM(__pyx_k_tuple_276, 0, ((PyObject *)__pyx_n_s__HasNodeFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__HasNodeFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_276));
  __pyx_k_tuple_278 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_278)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_278));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_277));
  PyTuple_SET_ITEM(__pyx_k_tuple_278, 0, ((PyObject *)__pyx_kp_s_277));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_277));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_278));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":164
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 */
  __pyx_k_tuple_279 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_279)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_279));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ReplaceFailedNode));
  PyTuple_SET_ITEM(__pyx_k_tuple_279, 0, ((PyObject *)__pyx_n_s__ReplaceFailedNode));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ReplaceFailedNode));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_279));
  __pyx_k_tuple_281 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_281)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_281));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_280));
  PyTuple_SET_ITEM(__pyx_k_tuple_281, 0, ((PyObject *)__pyx_kp_s_280));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_280));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_281));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":165
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 */
  __pyx_k_tuple_282 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_282)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_282));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__TransferPrimaryRole));
  PyTuple_SET_ITEM(__pyx_k_tuple_282, 0, ((PyObject *)__pyx_n_s__TransferPrimaryRole));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__TransferPrimaryRole));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_282));
  __pyx_k_tuple_284 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_284)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_284));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_283));
  PyTuple_SET_ITEM(__pyx_k_tuple_284, 0, ((PyObject *)__pyx_kp_s_283));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_283));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_284));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":166
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 */
  __pyx_k_tuple_286 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_286)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_286));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_285));
  PyTuple_SET_ITEM(__pyx_k_tuple_286, 0, ((PyObject *)__pyx_n_s_285));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_285));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_286));
  __pyx_k_tuple_288 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_288)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_288));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_287));
  PyTuple_SET_ITEM(__pyx_k_tuple_288, 0, ((PyObject *)__pyx_kp_s_287));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_287));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_288));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":167
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 */
  __pyx_k_tuple_290 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_290)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_290));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_289));
  PyTuple_SET_ITEM(__pyx_k_tuple_290, 0, ((PyObject *)__pyx_n_s_289));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_289));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_290));
  __pyx_k_tuple_292 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_292)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_292));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_291));
  PyTuple_SET_ITEM(__pyx_k_tuple_292, 0, ((PyObject *)__pyx_kp_s_291));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_291));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_292));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":168
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 */
  __pyx_k_tuple_293 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_293)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_293));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AssignReturnRoute));
  PyTuple_SET_ITEM(__pyx_k_tuple_293, 0, ((PyObject *)__pyx_n_s__AssignReturnRoute));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AssignReturnRoute));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_293));
  __pyx_k_tuple_295 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_295)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_295));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_294));
  PyTuple_SET_ITEM(__pyx_k_tuple_295, 0, ((PyObject *)__pyx_kp_s_294));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_294));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_295));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":169
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 */
  __pyx_k_tuple_297 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_297)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_297));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_296));
  PyTuple_SET_ITEM(__pyx_k_tuple_297, 0, ((PyObject *)__pyx_n_s_296));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_296));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_297));
  __pyx_k_tuple_299 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_299)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_299));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_298));
  PyTuple_SET_ITEM(__pyx_k_tuple_299, 0, ((PyObject *)__pyx_kp_s_298));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_298));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_299));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":170
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 */
  __pyx_k_tuple_300 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_300)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_300));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__SendNodeInformation));
  PyTuple_SET_ITEM(__pyx_k_tuple_300, 0, ((PyObject *)__pyx_n_s__SendNodeInformation));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__SendNodeInformation));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_300));
  __pyx_k_tuple_302 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_302)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_302));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_301));
  PyTuple_SET_ITEM(__pyx_k_tuple_302, 0, ((PyObject *)__pyx_kp_s_301));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_301));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_302));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":171
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 */
  __pyx_k_tuple_303 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_303)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_303));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ReplicationSend));
  PyTuple_SET_ITEM(__pyx_k_tuple_303, 0, ((PyObject *)__pyx_n_s__ReplicationSend));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ReplicationSend));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_303));
  __pyx_k_tuple_305 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_305)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_305));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_304));
  PyTuple_SET_ITEM(__pyx_k_tuple_305, 0, ((PyObject *)__pyx_kp_s_304));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_304));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_305));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":172
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 *     ]
 */
  __pyx_k_tuple_306 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_306)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_306));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CreateButton));
  PyTuple_SET_ITEM(__pyx_k_tuple_306, 0, ((PyObject *)__pyx_n_s__CreateButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CreateButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_306));
  __pyx_k_tuple_308 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_308)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_308));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_307));
  PyTuple_SET_ITEM(__pyx_k_tuple_308, 0, ((PyObject *)__pyx_kp_s_307));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_307));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_308));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":173
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_309 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_309)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_309));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DeleteButton));
  PyTuple_SET_ITEM(__pyx_k_tuple_309, 0, ((PyObject *)__pyx_n_s__DeleteButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DeleteButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_309));
  __pyx_k_tuple_311 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_311)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_311));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_310));
  PyTuple_SET_ITEM(__pyx_k_tuple_311, 0, ((PyObject *)__pyx_kp_s_310));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_310));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_311));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":177
 * 
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 */
  __pyx_k_tuple_312 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_312)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_312));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Unknown));
  PyTuple_SET_ITEM(__pyx_k_tuple_312, 0, ((PyObject *)__pyx_n_s__Unknown));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Unknown));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_312));
  __pyx_k_tuple_314 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_314)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_314));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_313));
  PyTuple_SET_ITEM(__pyx_k_tuple_314, 0, ((PyObject *)__pyx_kp_s_313));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_313));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_314));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":178
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 * ]
 */
  __pyx_k_tuple_315 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_315)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_315));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Serial));
  PyTuple_SET_ITEM(__pyx_k_tuple_315, 0, ((PyObject *)__pyx_n_s__Serial));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Serial));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_315));
  __pyx_k_tuple_317 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_317)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_317));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_316));
  PyTuple_SET_ITEM(__pyx_k_tuple_317, 0, ((PyObject *)__pyx_kp_s_316));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_316));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_317));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":179
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),             # <<<<<<<<<<<<<<
 * ]
 * 
 */
  __pyx_k_tuple_318 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_318)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_318));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Hid));
  PyTuple_SET_ITEM(__pyx_k_tuple_318, 0, ((PyObject *)__pyx_n_s__Hid));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Hid));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_318));
  __pyx_k_tuple_320 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_320)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_320));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_319));
  PyTuple_SET_ITEM(__pyx_k_tuple_320, 0, ((PyObject *)__pyx_kp_s_319));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_319));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_320));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":615
 *     '''
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  __pyx_k_tuple_439 = PyTuple_New(18); if (unlikely(!__pyx_k_tuple_439)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_439));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_421));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 0, ((PyObject *)__pyx_kp_s_421));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_421));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_422));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 1, ((PyObject *)__pyx_kp_s_422));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_422));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_423));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 2, ((PyObject *)__pyx_kp_s_423));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_423));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_424));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 3, ((PyObject *)__pyx_kp_s_424));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_424));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_425));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 4, ((PyObject *)__pyx_kp_s_425));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_425));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_426));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 5, ((PyObject *)__pyx_kp_s_426));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_426));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_427));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 6, ((PyObject *)__pyx_kp_s_427));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_427));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_428));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 7, ((PyObject *)__pyx_kp_s_428));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_428));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_429));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 8, ((PyObject *)__pyx_kp_s_429));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_429));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_430));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 9, ((PyObject *)__pyx_kp_s_430));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_430));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_431));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 10, ((PyObject *)__pyx_kp_s_431));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_431));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_432));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 11, ((PyObject *)__pyx_kp_s_432));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_432));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_433));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 12, ((PyObject *)__pyx_kp_s_433));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_433));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_434));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 13, ((PyObject *)__pyx_kp_s_434));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_434));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_435));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 14, ((PyObject *)__pyx_kp_s_435));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_435));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_436));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 15, ((PyObject *)__pyx_kp_s_436));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_436));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_437));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 16, ((PyObject *)__pyx_kp_s_437));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_437));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_438));
  PyTuple_SET_ITEM(__pyx_k_tuple_439, 17, ((PyObject *)__pyx_kp_s_438));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_438));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_439));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_34 = PyInt_FromLong(34); if (unlikely(!__pyx_int_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_36 = PyInt_FromLong(36); if (unlikely(!__pyx_int_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_37 = PyInt_FromLong(37); if (unlikely(!__pyx_int_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_38 = PyInt_FromLong(38); if (unlikely(!__pyx_int_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_39 = PyInt_FromLong(39); if (unlikely(!__pyx_int_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_40 = PyInt_FromLong(40); if (unlikely(!__pyx_int_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_41 = PyInt_FromLong(41); if (unlikely(!__pyx_int_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_42 = PyInt_FromLong(42); if (unlikely(!__pyx_int_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_43 = PyInt_FromLong(43); if (unlikely(!__pyx_int_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_44 = PyInt_FromLong(44); if (unlikely(!__pyx_int_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_45 = PyInt_FromLong(45); if (unlikely(!__pyx_int_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_46 = PyInt_FromLong(46); if (unlikely(!__pyx_int_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_47 = PyInt_FromLong(47); if (unlikely(!__pyx_int_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_48 = PyInt_FromLong(48); if (unlikely(!__pyx_int_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_49 = PyInt_FromLong(49); if (unlikely(!__pyx_int_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_51 = PyInt_FromLong(51); if (unlikely(!__pyx_int_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_52 = PyInt_FromLong(52); if (unlikely(!__pyx_int_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_56 = PyInt_FromLong(56); if (unlikely(!__pyx_int_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_60 = PyInt_FromLong(60); if (unlikely(!__pyx_int_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_61 = PyInt_FromLong(61); if (unlikely(!__pyx_int_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_62 = PyInt_FromLong(62); if (unlikely(!__pyx_int_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_66 = PyInt_FromLong(66); if (unlikely(!__pyx_int_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_67 = PyInt_FromLong(67); if (unlikely(!__pyx_int_67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_68 = PyInt_FromLong(68); if (unlikely(!__pyx_int_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_69 = PyInt_FromLong(69); if (unlikely(!__pyx_int_69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_70 = PyInt_FromLong(70); if (unlikely(!__pyx_int_70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_71 = PyInt_FromLong(71); if (unlikely(!__pyx_int_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_76 = PyInt_FromLong(76); if (unlikely(!__pyx_int_76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_78 = PyInt_FromLong(78); if (unlikely(!__pyx_int_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_81 = PyInt_FromLong(81); if (unlikely(!__pyx_int_81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_96 = PyInt_FromLong(96); if (unlikely(!__pyx_int_96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_97 = PyInt_FromLong(97); if (unlikely(!__pyx_int_97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_98 = PyInt_FromLong(98); if (unlikely(!__pyx_int_98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_99 = PyInt_FromLong(99); if (unlikely(!__pyx_int_99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_112 = PyInt_FromLong(112); if (unlikely(!__pyx_int_112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_113 = PyInt_FromLong(113); if (unlikely(!__pyx_int_113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_114 = PyInt_FromLong(114); if (unlikely(!__pyx_int_114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_115 = PyInt_FromLong(115); if (unlikely(!__pyx_int_115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_117 = PyInt_FromLong(117); if (unlikely(!__pyx_int_117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_118 = PyInt_FromLong(118); if (unlikely(!__pyx_int_118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_119 = PyInt_FromLong(119); if (unlikely(!__pyx_int_119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_120 = PyInt_FromLong(120); if (unlikely(!__pyx_int_120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_121 = PyInt_FromLong(121); if (unlikely(!__pyx_int_121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_122 = PyInt_FromLong(122); if (unlikely(!__pyx_int_122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_123 = PyInt_FromLong(123); if (unlikely(!__pyx_int_123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_124 = PyInt_FromLong(124); if (unlikely(!__pyx_int_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_125 = PyInt_FromLong(125); if (unlikely(!__pyx_int_125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_129 = PyInt_FromLong(129); if (unlikely(!__pyx_int_129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_130 = PyInt_FromLong(130); if (unlikely(!__pyx_int_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_131 = PyInt_FromLong(131); if (unlikely(!__pyx_int_131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_132 = PyInt_FromLong(132); if (unlikely(!__pyx_int_132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_133 = PyInt_FromLong(133); if (unlikely(!__pyx_int_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_134 = PyInt_FromLong(134); if (unlikely(!__pyx_int_134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_135 = PyInt_FromLong(135); if (unlikely(!__pyx_int_135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_136 = PyInt_FromLong(136); if (unlikely(!__pyx_int_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_137 = PyInt_FromLong(137); if (unlikely(!__pyx_int_137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_138 = PyInt_FromLong(138); if (unlikely(!__pyx_int_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_139 = PyInt_FromLong(139); if (unlikely(!__pyx_int_139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_140 = PyInt_FromLong(140); if (unlikely(!__pyx_int_140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_141 = PyInt_FromLong(141); if (unlikely(!__pyx_int_141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_142 = PyInt_FromLong(142); if (unlikely(!__pyx_int_142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_143 = PyInt_FromLong(143); if (unlikely(!__pyx_int_143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_145 = PyInt_FromLong(145); if (unlikely(!__pyx_int_145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_146 = PyInt_FromLong(146); if (unlikely(!__pyx_int_146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_147 = PyInt_FromLong(147); if (unlikely(!__pyx_int_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_148 = PyInt_FromLong(148); if (unlikely(!__pyx_int_148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_149 = PyInt_FromLong(149); if (unlikely(!__pyx_int_149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_150 = PyInt_FromLong(150); if (unlikely(!__pyx_int_150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_151 = PyInt_FromLong(151); if (unlikely(!__pyx_int_151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_152 = PyInt_FromLong(152); if (unlikely(!__pyx_int_152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_153 = PyInt_FromLong(153); if (unlikely(!__pyx_int_153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_154 = PyInt_FromLong(154); if (unlikely(!__pyx_int_154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_155 = PyInt_FromLong(155); if (unlikely(!__pyx_int_155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_156 = PyInt_FromLong(156); if (unlikely(!__pyx_int_156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_157 = PyInt_FromLong(157); if (unlikely(!__pyx_int_157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_158 = PyInt_FromLong(158); if (unlikely(!__pyx_int_158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_239 = PyInt_FromLong(239); if (unlikely(!__pyx_int_239)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_240 = PyInt_FromLong(240); if (unlikely(!__pyx_int_240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlibopenzwave(void); /*proto*/
PyMODINIT_FUNC initlibopenzwave(void)
#else
PyMODINIT_FUNC PyInit_libopenzwave(void); /*proto*/
PyMODINIT_FUNC PyInit_libopenzwave(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_libopenzwave(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("libopenzwave"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_43), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_libopenzwave) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_12libopenzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyOptions", (PyObject *)&__pyx_type_12libopenzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_PyOptions = &__pyx_type_12libopenzwave_PyOptions;
  if (PyType_Ready(&__pyx_type_12libopenzwave_RetAlloc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "RetAlloc", (PyObject *)&__pyx_type_12libopenzwave_RetAlloc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_RetAlloc = &__pyx_type_12libopenzwave_RetAlloc;
  if (PyType_Ready(&__pyx_type_12libopenzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyManager", (PyObject *)&__pyx_type_12libopenzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_PyManager = &__pyx_type_12libopenzwave_PyManager;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":49
 * from cython.operator cimport dereference
 * from log cimport LogLevel
 * import os             # <<<<<<<<<<<<<<
 * import sys
 * 
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":50
 * from log cimport LogLevel
 * import os
 * import sys             # <<<<<<<<<<<<<<
 * 
 * #import logging
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":58
 * #It will be done when releasing only.
 * #Need to modifiy make_archive.sh,setup.py and docs/conf.py too.
 * PYLIBRARY = "0.2.6"             # <<<<<<<<<<<<<<
 * PY_OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PYLIBRARY, ((PyObject *)__pyx_kp_s_44)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":59
 * #Need to modifiy make_archive.sh,setup.py and docs/conf.py too.
 * PYLIBRARY = "0.2.6"
 * PY_OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"             # <<<<<<<<<<<<<<
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_3, ((PyObject *)__pyx_kp_s_45)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":60
 * PYLIBRARY = "0.2.6"
 * PY_OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"             # <<<<<<<<<<<<<<
 * 
 * class EnumWithDoc(str):
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_5, ((PyObject *)__pyx_kp_s_46)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":62
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     def setDoc(self, doc):
 *         self.doc = doc
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":63
 * 
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         return self
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_12libopenzwave_11EnumWithDoc_0setDoc, NULL, __pyx_n_s__libopenzwave); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__setDoc, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":62
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     def setDoc(self, doc):
 *         self.doc = doc
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)(&PyString_Type))));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__EnumWithDoc, __pyx_n_s__libopenzwave); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EnumWithDoc, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":68
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_47), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_49), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":69
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_50), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_52), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":70
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_53), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_55), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":71
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_58), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":72
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_59), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_61), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":73
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_62), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_64), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":74
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_65), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_67), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":75
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_68), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_70), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":76
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_71), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_10, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_73), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":77
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_74), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_76), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":78
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_77), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_12, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_79), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":79
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_80), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_13, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_82), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":80
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_83), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_14, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_85), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":81
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_86), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_15, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_88), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":82
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_89), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_91), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":83
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_92), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_17, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_94), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":84
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_95), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_97), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":85
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_98), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_100), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":86
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_101), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_20, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_103), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":87
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_104), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_21, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_106), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":88
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_107), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_109), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":89
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_111), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_113), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":90
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_114), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_116), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":91
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_117), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_119), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":92
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report.."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_120), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_122), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":93
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Notification').setDoc("A manager notification report.."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_124), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_126), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":94
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report.."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_127), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_28, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_129), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(27); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyNotifications, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":98
 * 
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_130), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_28, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_132), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":99
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_133), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_135), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":100
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_136), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_138), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":101
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_139), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_141), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":102
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_142), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_144), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":103
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_145), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_147), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":104
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_148), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_150), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_26 = 0;
  __pyx_t_25 = 0;
  __pyx_t_24 = 0;
  __pyx_t_23 = 0;
  __pyx_t_22 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyNotificationCodes, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":108
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_151), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_153), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":109
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_154), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_156), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":110
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_157), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_159), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":111
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_160), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_162), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyGenres, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":115
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_163), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_165), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":116
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_166), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_168), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":117
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_169), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_171), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":118
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_172), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_174), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":119
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_175), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_177), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":120
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_178), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_180), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":121
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_181), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_28, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_183), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":122
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_184), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_21, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_186), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":123
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_187), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_20, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_189), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  __pyx_t_25 = 0;
  __pyx_t_24 = 0;
  __pyx_t_23 = 0;
  __pyx_t_22 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_20 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyValueTypes, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":127
 * 
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_190), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_20, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_192), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":128
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_193), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_21, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_195), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":129
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_196), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_28, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_198), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":130
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_199), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_201), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":131
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_202), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_204), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":132
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_205), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_207), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":133
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_208), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_210), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":134
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_211), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_213), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":135
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_214), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_216), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":136
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_217), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_219), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":137
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_220), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_222), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(11); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_26 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_19 = 0;
  __pyx_t_18 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyControllerState, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":141
 * 
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_223), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_225), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":142
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_226), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_228), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":143
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_229), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_230), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":144
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_231), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_232), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":145
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_233), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_235), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":146
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_236), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_237), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":147
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_238), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_240), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":148
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_241), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_243), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":149
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_244), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_28, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_246), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":150
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_247), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_21, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_249), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":151
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_250), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_20, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_251), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":152
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_252), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_17, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_254), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":153
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_255), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_256), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(13); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_25 = 0;
  __pyx_t_24 = 0;
  __pyx_t_23 = 0;
  __pyx_t_22 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_20 = 0;
  __pyx_t_17 = 0;
  __pyx_t_16 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyControllerError, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":157
 * 
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_257), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_259), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":158
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_260), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_17, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_262), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":159
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_263), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_20, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_265), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":160
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_267), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_21, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_269), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":161
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_270), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_28, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_272), NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":162
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_273), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_275), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":163
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_276), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_278), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":164
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_279), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_281), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":165
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_282), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_284), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":166
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_286), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_288), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":167
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_290), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_292), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":168
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_293), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_295), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":169
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_297), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_299), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":170
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_300), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_15, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_302), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":171
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_303), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_14, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_305), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":172
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_306), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_13, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_308), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":173
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_309), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_12, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_311), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(17); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_26 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_19 = 0;
  __pyx_t_18 = 0;
  __pyx_t_15 = 0;
  __pyx_t_14 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyControllerCommand, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":177
 * 
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_312), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_12, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_314), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":178
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 * ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_315), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_13, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_317), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":179
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),             # <<<<<<<<<<<<<<
 * ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_318), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_14, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_320), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_7, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":182
 * ]
 * 
 * PyStatDriver = {             # <<<<<<<<<<<<<<
 *     'SOFCnt' : "Number of SOF bytes received",
 *     'ACKWaiting' : "Number of unsolicited messages while waiting for an ACK",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__SOFCnt), ((PyObject *)__pyx_kp_s_321)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__ACKWaiting), ((PyObject *)__pyx_kp_s_322)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__readAborts), ((PyObject *)__pyx_kp_s_323)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__badChecksum), ((PyObject *)__pyx_kp_s_324)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__readCnt), ((PyObject *)__pyx_kp_s_325)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__writeCnt), ((PyObject *)__pyx_kp_s_326)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__CANCnt), ((PyObject *)__pyx_kp_s_327)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__NAKCnt), ((PyObject *)__pyx_kp_s_328)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__ACKCnt), ((PyObject *)__pyx_kp_s_329)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__OOFCnt), ((PyObject *)__pyx_kp_s_330)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dropped), ((PyObject *)__pyx_kp_s_331)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__retries), ((PyObject *)__pyx_kp_s_332)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__callbacks), ((PyObject *)__pyx_kp_s_333)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__badroutes), ((PyObject *)__pyx_kp_s_334)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__noack), ((PyObject *)__pyx_kp_s_335)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__netbusy), ((PyObject *)__pyx_kp_s_336)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__nondelivery), ((PyObject *)__pyx_kp_s_337)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__routedbusy), ((PyObject *)__pyx_kp_s_338)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__broadcastReadCnt), ((PyObject *)__pyx_kp_s_339)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__broadcastWriteCnt), ((PyObject *)__pyx_kp_s_340)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyStatDriver, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":205
 *     }
 * 
 * PyLogLevels = {             # <<<<<<<<<<<<<<
 *     'None' : 0,
 *     'Always' : 1,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__None), __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Always), __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Fatal), __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Error), __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Warning), __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Alert), __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Info), __pyx_int_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Detail), __pyx_int_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Debug), __pyx_int_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__StreamDetail), __pyx_int_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__Internal), __pyx_int_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyLogLevels, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":341
 *     cdef DriverData data
 * 
 * def configPath():             # <<<<<<<<<<<<<<
 *     '''
 * Retrieve the config path. This directory hold the xml files.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_12libopenzwave_1configPath, NULL, __pyx_n_s__libopenzwave); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__configPath, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":519
 * sleeping) have been polled, an "AllNodesQueried" notification is sent.
 *     '''
 *     COMMAND_CLASS_DESC = {             # <<<<<<<<<<<<<<
 *         0x00: 'COMMAND_CLASS_NO_OPERATION',
 *         0x20: 'COMMAND_CLASS_BASIC',
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, ((PyObject *)__pyx_n_s_341)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_32, ((PyObject *)__pyx_n_s__COMMAND_CLASS_BASIC)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_33, ((PyObject *)__pyx_n_s_342)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_34, ((PyObject *)__pyx_n_s_343)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_35, ((PyObject *)__pyx_n_s_344)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_36, ((PyObject *)__pyx_n_s_345)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_37, ((PyObject *)__pyx_n_s_346)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_38, ((PyObject *)__pyx_n_s_347)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_39, ((PyObject *)__pyx_n_s_348)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_40, ((PyObject *)__pyx_n_s_349)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_41, ((PyObject *)__pyx_n_s_350)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_42, ((PyObject *)__pyx_n_s_351)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_43, ((PyObject *)__pyx_n_s_352)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_44, ((PyObject *)__pyx_n_s_353)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_45, ((PyObject *)__pyx_n_s_354)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_46, ((PyObject *)__pyx_n_s_355)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_47, ((PyObject *)__pyx_n_s_356)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_48, ((PyObject *)__pyx_n_s_357)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_49, ((PyObject *)__pyx_n_s_358)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_50, ((PyObject *)__pyx_n_s__COMMAND_CLASS_METER)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_51, ((PyObject *)__pyx_n_s_359)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_52, ((PyObject *)__pyx_n_s_360)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_53, ((PyObject *)__pyx_n_s_361)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_60, ((PyObject *)__pyx_n_s_362)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_61, ((PyObject *)__pyx_n_s_363)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_62, ((PyObject *)__pyx_n_s_364)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_56, ((PyObject *)__pyx_n_s_365)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_64, ((PyObject *)__pyx_n_s_366)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_66, ((PyObject *)__pyx_n_s_367)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_67, ((PyObject *)__pyx_n_s_368)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_68, ((PyObject *)__pyx_n_s_369)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_69, ((PyObject *)__pyx_n_s_370)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_70, ((PyObject *)__pyx_n_s_371)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_71, ((PyObject *)__pyx_n_s_372)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_76, ((PyObject *)__pyx_n_s_373)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_78, ((PyObject *)__pyx_n_s_374)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_80, ((PyObject *)__pyx_n_s_375)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_81, ((PyObject *)__pyx_n_s_376)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_96, ((PyObject *)__pyx_n_s_377)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_97, ((PyObject *)__pyx_n_s_378)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_98, ((PyObject *)__pyx_n_s_379)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_99, ((PyObject *)__pyx_n_s_380)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_100, ((PyObject *)__pyx_n_s_381)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_112, ((PyObject *)__pyx_n_s_382)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_113, ((PyObject *)__pyx_n_s__COMMAND_CLASS_ALARM)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_114, ((PyObject *)__pyx_n_s_383)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_115, ((PyObject *)__pyx_n_s_384)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_117, ((PyObject *)__pyx_n_s_385)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_118, ((PyObject *)__pyx_n_s__COMMAND_CLASS_LOCK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_119, ((PyObject *)__pyx_n_s_386)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_120, ((PyObject *)__pyx_n_s_387)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_121, ((PyObject *)__pyx_n_s__COMMAND_CLASS_KICK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_122, ((PyObject *)__pyx_n_s_388)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_123, ((PyObject *)__pyx_n_s_389)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_124, ((PyObject *)__pyx_n_s_390)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_125, ((PyObject *)__pyx_n_s_391)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_128, ((PyObject *)__pyx_n_s_392)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_129, ((PyObject *)__pyx_n_s__COMMAND_CLASS_CLOCK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_130, ((PyObject *)__pyx_n_s__COMMAND_CLASS_HAIL)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_131, ((PyObject *)__pyx_n_s_393)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_132, ((PyObject *)__pyx_n_s_394)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_133, ((PyObject *)__pyx_n_s_395)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_134, ((PyObject *)__pyx_n_s_396)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_135, ((PyObject *)__pyx_n_s_397)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_136, ((PyObject *)__pyx_n_s_398)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_137, ((PyObject *)__pyx_n_s_399)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_138, ((PyObject *)__pyx_n_s__COMMAND_CLASS_TIME)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_139, ((PyObject *)__pyx_n_s_400)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_140, ((PyObject *)__pyx_n_s_401)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_141, ((PyObject *)__pyx_n_s_402)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_142, ((PyObject *)__pyx_n_s_403)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_143, ((PyObject *)__pyx_n_s_404)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_144, ((PyObject *)__pyx_n_s_405)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_145, ((PyObject *)__pyx_n_s_406)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_146, ((PyObject *)__pyx_n_s_407)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_147, ((PyObject *)__pyx_n_s_408)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_148, ((PyObject *)__pyx_n_s_409)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_149, ((PyObject *)__pyx_n_s_410)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_150, ((PyObject *)__pyx_n_s_411)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_151, ((PyObject *)__pyx_n_s_412)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_152, ((PyObject *)__pyx_n_s_413)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_153, ((PyObject *)__pyx_n_s_414)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_154, ((PyObject *)__pyx_n_s_415)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_155, ((PyObject *)__pyx_n_s_416)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_156, ((PyObject *)__pyx_n_s_417)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_157, ((PyObject *)__pyx_n_s_418)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_158, ((PyObject *)__pyx_n_s_419)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_239, ((PyObject *)__pyx_n_s__COMMAND_CLASS_MARK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_240, ((PyObject *)__pyx_n_s_420)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12libopenzwave_PyManager->tp_dict, __pyx_n_s__COMMAND_CLASS_DESC, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_12libopenzwave_PyManager);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":615
 *     '''
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12libopenzwave_PyManager->tp_dict, __pyx_n_s__CALLBACK_DESC, ((PyObject *)__pyx_k_tuple_439)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_12libopenzwave_PyManager);

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1023
 *         self.manager.TestNetwork(homeid, count)
 * 
 *     def healNetworkNode(self, homeid, nodeid,  upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetworkNode:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_12 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1041
 *         self.manager.HealNetworkNode(homeid, nodeid,  upNodeRoute)
 * 
 *     def healNetwork(self, homeid, upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetwork:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_13 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":3286
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\
 *             highPower=False, nodeId=0xff, arg=0):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_35 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/linaro/python-openzwave/lib/libopenzwave.pyx":1
 * """             # <<<<<<<<<<<<<<
 * .. module:: libopenzwave
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  if (__pyx_m) {
    __Pyx_AddTraceback("init libopenzwave");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init libopenzwave");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}


static CYTHON_INLINE void __Pyx_RaiseNoneIndexingError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is unsubscriptable");
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}



static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}

static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, "__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;

    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;

    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}


PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
	__pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
    if (op == NULL)
        return NULL;
	op->func.m_ml = ml;
	Py_XINCREF(self);
	op->func.m_self = self;
	Py_XINCREF(module);
	op->func.m_module = module;
	PyObject_GC_Track(op);
	return (PyObject *)op;
}

static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
	PyObject_GC_UnTrack(m);
	Py_XDECREF(m->func.m_self);
	Py_XDECREF(m->func.m_module);
    PyObject_GC_Del(m);
}

static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
	if (obj == Py_None)
		obj = NULL;
	return PyMethod_New(func, obj, type);
}

int __pyx_binding_PyCFunctionType_init(void) {
    __pyx_binding_PyCFunctionType_type = PyCFunction_Type;
    __pyx_binding_PyCFunctionType_type.tp_name = __Pyx_NAMESTR("cython_binding_builtin_function_or_method");
    __pyx_binding_PyCFunctionType_type.tp_dealloc = (destructor)__pyx_binding_PyCFunctionType_dealloc;
    __pyx_binding_PyCFunctionType_type.tp_descr_get = __pyx_binding_PyCFunctionType_descr_get;
    if (PyType_Ready(&__pyx_binding_PyCFunctionType_type) < 0) {
        return -1;
    }
    __pyx_binding_PyCFunctionType = &__pyx_binding_PyCFunctionType_type;
    return 0;

}

static CYTHON_INLINE uint64_t __Pyx_PyInt_from_py_uint64_t(PyObject* x) {
    const uint64_t neg_one = (uint64_t)-1, const_zero = (uint64_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(uint64_t) == sizeof(char)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(uint64_t) == sizeof(short)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(uint64_t) == sizeof(int)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(uint64_t) == sizeof(long)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(uint64_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        uint64_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (uint64_t)-1;
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint8_t(uint8_t val) {
    const uint8_t neg_one = (uint8_t)-1, const_zero = (uint8_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(uint8_t) == sizeof(char))  ||
        (sizeof(uint8_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(uint8_t) == sizeof(int)) ||
               (sizeof(uint8_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(uint8_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(uint8_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_int32_t(int32_t val) {
    const int32_t neg_one = (int32_t)-1, const_zero = (int32_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(int32_t) == sizeof(char))  ||
        (sizeof(int32_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(int32_t) == sizeof(int)) ||
               (sizeof(int32_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(int32_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_int16_t(int16_t val) {
    const int16_t neg_one = (int16_t)-1, const_zero = (int16_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(int16_t) == sizeof(char))  ||
        (sizeof(int16_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(int16_t) == sizeof(int)) ||
               (sizeof(int16_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(int16_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(int16_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint32_t(uint32_t val) {
    const uint32_t neg_one = (uint32_t)-1, const_zero = (uint32_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(uint32_t) == sizeof(char))  ||
        (sizeof(uint32_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(uint32_t) == sizeof(int)) ||
               (sizeof(uint32_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(uint32_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint64_t(uint64_t val) {
    const uint64_t neg_one = (uint64_t)-1, const_zero = (uint64_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(uint64_t) == sizeof(char))  ||
        (sizeof(uint64_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(uint64_t) == sizeof(int)) ||
               (sizeof(uint64_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(uint64_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE int32_t __Pyx_PyInt_from_py_int32_t(PyObject* x) {
    const int32_t neg_one = (int32_t)-1, const_zero = (int32_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(int32_t) == sizeof(char)) {
        if (is_unsigned)
            return (int32_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (int32_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(int32_t) == sizeof(short)) {
        if (is_unsigned)
            return (int32_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (int32_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(int32_t) == sizeof(int)) {
        if (is_unsigned)
            return (int32_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (int32_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(int32_t) == sizeof(long)) {
        if (is_unsigned)
            return (int32_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (int32_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(int32_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (int32_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (int32_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        int32_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (int32_t)-1;
    }
}

static CYTHON_INLINE uint32_t __Pyx_PyInt_from_py_uint32_t(PyObject* x) {
    const uint32_t neg_one = (uint32_t)-1, const_zero = (uint32_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(uint32_t) == sizeof(char)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(uint32_t) == sizeof(short)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(uint32_t) == sizeof(int)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(uint32_t) == sizeof(long)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(uint32_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        uint32_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (uint32_t)-1;
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint16_t(uint16_t val) {
    const uint16_t neg_one = (uint16_t)-1, const_zero = (uint16_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(uint16_t) == sizeof(char))  ||
        (sizeof(uint16_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(uint16_t) == sizeof(int)) ||
               (sizeof(uint16_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(uint16_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(uint16_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE uint8_t __Pyx_PyInt_from_py_uint8_t(PyObject* x) {
    const uint8_t neg_one = (uint8_t)-1, const_zero = (uint8_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(uint8_t) == sizeof(char)) {
        if (is_unsigned)
            return (uint8_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (uint8_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(uint8_t) == sizeof(short)) {
        if (is_unsigned)
            return (uint8_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (uint8_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(uint8_t) == sizeof(int)) {
        if (is_unsigned)
            return (uint8_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (uint8_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(uint8_t) == sizeof(long)) {
        if (is_unsigned)
            return (uint8_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (uint8_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(uint8_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (uint8_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (uint8_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        uint8_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (uint8_t)-1;
    }
}

static CYTHON_INLINE int16_t __Pyx_PyInt_from_py_int16_t(PyObject* x) {
    const int16_t neg_one = (int16_t)-1, const_zero = (int16_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(int16_t) == sizeof(char)) {
        if (is_unsigned)
            return (int16_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (int16_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(int16_t) == sizeof(short)) {
        if (is_unsigned)
            return (int16_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (int16_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(int16_t) == sizeof(int)) {
        if (is_unsigned)
            return (int16_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (int16_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(int16_t) == sizeof(long)) {
        if (is_unsigned)
            return (int16_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (int16_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(int16_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (int16_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (int16_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        int16_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (int16_t)-1;
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_int8_t(int8_t val) {
    const int8_t neg_one = (int8_t)-1, const_zero = (int8_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(int8_t) == sizeof(char))  ||
        (sizeof(int8_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(int8_t) == sizeof(int)) ||
               (sizeof(int8_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(int8_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(int8_t),
                                     little, !is_unsigned);
    }
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
